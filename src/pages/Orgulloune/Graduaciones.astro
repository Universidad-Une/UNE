---
import Layout from "@/layouts/Layout.astro";

// Importar todas las imágenes usando import.meta.glob
const allImages = import.meta.glob('/src/assets/Imagenes/Graduaciones/*.{png,jpg,jpeg,webp,svg}', {
  eager: true,
  as: 'url'
});

// Crear array de objetos con información de las imágenes
const graduationImages = Object.entries(allImages).map(([path, url]) => {
  const fileName = path.split('/').pop();
  const name = fileName?.split('.')[0] || '';
  return {
    src: url,
    alt: `Graduación ${name}`,
    name: name,
    path: path
  };
});
---

<Layout>
  <main class="min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50">
    <!-- Header -->
    <header class="text-center py-12 px-4">
      <h1 class="text-5xl font-bold text-gray-800 mb-4 tracking-tight">
        Galería de <span class="text-blue-600">Graduaciones</span>
      </h1>
      <p class="text-xl text-gray-600 max-w-2xl mx-auto leading-relaxed">
        Momentos especiales capturados para toda la vida. Celebramos cada logro y cada sueño cumplido.
      </p>
      <div class="mt-6 flex items-center justify-center gap-2">
        <div class="h-1 w-20 bg-blue-500 rounded"></div>
        <div class="h-1 w-8 bg-purple-400 rounded"></div>
        <div class="h-1 w-4 bg-blue-300 rounded"></div>
      </div>
    </header>

    <!-- Contador de imágenes -->
    <div class="text-center mb-8">
      <span class="inline-block bg-white/80 backdrop-blur-sm px-6 py-2 rounded-full text-gray-700 font-medium shadow-sm border border-gray-200">
        {graduationImages.length} fotografías de graduación
      </span>
    </div>

    <!-- Galería -->
    <section class="container mx-auto px-4 pb-12">
      {graduationImages.length > 0 ? (
        <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-6" id="imageGrid">
          {graduationImages.map((image, index) => (
            <div 
              class="group relative overflow-hidden rounded-xl bg-white shadow-md hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1 cursor-pointer gallery-item"
              key={index}
              data-image-index={index}
              style={index >= 20 ? "display: none;" : ""}
            >
              <div class="aspect-square overflow-hidden">
                <img 
                  src={index < 12 ? image.src : ""}
                  data-src={image.src}
                  alt={image.alt}
                  class="w-full h-full object-cover transition-transform duration-500 group-hover:scale-110 lazy-image"
                  loading={index < 6 ? "eager" : "lazy"}
                  decoding="async"
                />
                
                <!-- Skeleton loader -->
                {index >= 12 && (
                  <div class="absolute inset-0 bg-gray-200 animate-pulse flex items-center justify-center image-skeleton">
                    <svg class="w-8 h-8 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
                      <path fill-rule="evenodd" d="M4 3a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V5a2 2 0 00-2-2H4zm12 12H4l4-8 3 6 2-4 3 6z" clip-rule="evenodd"></path>
                    </svg>
                  </div>
        
        <!-- Botón cargar más -->
        <div class="text-center mt-12" id="loadMoreContainer" style={graduationImages.length <= 20 ? "display: none;" : ""}>
          <button 
            id="loadMoreBtn"
            class="bg-blue-600 hover:bg-blue-700 text-white font-semibold py-3 px-8 rounded-full transition-all duration-300 transform hover:scale-105 shadow-lg hover:shadow-xl"
          >
            <span class="flex items-center gap-2">
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 14l-7 7m0 0l-7-7m7 7V3"></path>
              </svg>
              Cargar más fotografías
            </span>
          </button>
          <p class="text-gray-500 mt-3 text-sm">
            <span id="loadedCount">20</span> de {graduationImages.length} fotografías mostradas
          </p>
        </div>
                )}
              </div>
              
              <!-- Overlay con información -->
              <div class="absolute inset-0 bg-gradient-to-t from-black/70 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300">
                <div class="absolute bottom-0 left-0 right-0 p-4">
                  <p class="text-white text-sm font-medium truncate">
                    {image.name}
                  </p>
                </div>
              </div>

              <!-- Indicador de hover -->
              <div class="absolute top-3 right-3 opacity-0 group-hover:opacity-100 transition-opacity duration-300">
                <div class="bg-white/90 backdrop-blur-sm rounded-full p-2">
                  <svg class="w-4 h-4 text-gray-700" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                  </svg>
                </div>
              </div>
            </div>
          ))}
        </div>
      ) : (
        <!-- Estado vacío -->
        <div class="text-center py-20">
          <div class="mx-auto w-24 h-24 bg-gray-100 rounded-full flex items-center justify-center mb-6">
            <svg class="w-12 h-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
            </svg>
          </div>
          <h3 class="text-2xl font-semibold text-gray-600 mb-2">No hay imágenes disponibles</h3>
          <p class="text-gray-500 max-w-md mx-auto">
            Aún no se han subido fotografías de graduación. Pronto verás aquí todos los momentos especiales.
          </p>
        </div>
      )}
    </section>

    <!-- Lightbox Modal -->
    <div id="lightbox" class="fixed inset-0 bg-black/90 backdrop-blur-sm z-50 hidden flex items-center justify-center">
      <!-- Botón cerrar -->
      <button 
        id="closeLightbox" 
        class="absolute top-6 right-6 text-white/70 hover:text-white text-4xl z-60 transition-colors"
        aria-label="Cerrar galería"
      >
        &times;
      </button>
      
      <!-- Contenedor de imagen -->
      <div class="relative max-w-[90vw] max-h-[90vh] flex items-center justify-center">
        <img 
          id="lightboxImage" 
          src="" 
          alt="" 
          class="max-w-full max-h-full object-contain rounded-lg shadow-2xl"
        />
        
        <!-- Botón anterior -->
        <button 
          id="prevImage" 
          class="absolute left-4 top-1/2 transform -translate-y-1/2 bg-black/50 hover:bg-black/70 text-white rounded-full p-3 transition-all"
          aria-label="Imagen anterior"
        >
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
          </svg>
        </button>
        
        <!-- Botón siguiente -->
        <button 
          id="nextImage" 
          class="absolute right-4 top-1/2 transform -translate-y-1/2 bg-black/50 hover:bg-black/70 text-white rounded-full p-3 transition-all"
          aria-label="Imagen siguiente"
        >
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
          </svg>
        </button>
      </div>
      
      <!-- Información de imagen -->
      <div class="absolute bottom-6 left-1/2 transform -translate-x-1/2 bg-black/50 backdrop-blur-sm text-white px-6 py-3 rounded-full">
        <span id="imageCounter">1 de {graduationImages.length}</span>
        <span class="mx-2">•</span>
        <span id="imageName">Imagen</span>
      </div>
    </div>

    <!-- Footer de la galería -->
    <footer class="bg-white/50 backdrop-blur-sm border-t border-gray-200 mt-16">
      <div class="container mx-auto px-4 py-8 text-center">
        <p class="text-gray-600">
          Cada graduación es un nuevo comienzo. Cada foto, un recuerdo eterno.
        </p>
        <div class="mt-4 flex justify-center space-x-1">
          <div class="w-2 h-2 bg-blue-400 rounded-full animate-pulse"></div>
          <div class="w-2 h-2 bg-purple-400 rounded-full animate-pulse" style="animation-delay: 0.5s;"></div>
          <div class="w-2 h-2 bg-blue-300 rounded-full animate-pulse" style="animation-delay: 1s;"></div>
        </div>
      </div>
    </footer>
  </main>
</Layout>

<style>
  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(30px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .grid > div {
    animation: fadeInUp 0.6s ease-out forwards;
    animation-delay: calc(var(--index, 0) * 0.1s);
  }
</style>

<script define:vars={{ images: graduationImages }}>
  // Array de imágenes para el lightbox ya está disponible como variable 'images'
  
  let currentImageIndex = 0;
  let loadedImagesCount = 20;
  const LOAD_BATCH_SIZE = 20;
  
  // Intersection Observer para lazy loading
  const imageObserver = new IntersectionObserver((entries, observer) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        const img = entry.target;
        const skeleton = img.parentNode.querySelector('.image-skeleton');
        
        if (img.dataset.src && !img.src) {
          img.src = img.dataset.src;
          img.onload = () => {
            img.style.opacity = '1';
            if (skeleton) skeleton.style.display = 'none';
          };
          observer.unobserve(img);
        }
      }
    });
  }, {
    rootMargin: '50px'
  });
  
  // Función para cargar más imágenes
  function loadMoreImages() {
    const grid = document.getElementById('imageGrid');
    const items = grid.querySelectorAll('.gallery-item');
    const loadMoreBtn = document.getElementById('loadMoreBtn');
    const loadedCount = document.getElementById('loadedCount');
    const loadMoreContainer = document.getElementById('loadMoreContainer');
    
    let newlyVisible = 0;
    
    for (let i = loadedImagesCount; i < Math.min(loadedImagesCount + LOAD_BATCH_SIZE, items.length); i++) {
      items[i].style.display = 'block';
      items[i].style.animation = `fadeInUp 0.6s ease-out forwards`;
      items[i].style.animationDelay = `${newlyVisible * 0.1}s`;
      
      // Observar la nueva imagen para lazy loading
      const img = items[i].querySelector('.lazy-image');
      if (img) {
        imageObserver.observe(img);
      }
      
      newlyVisible++;
    }
    
    loadedImagesCount += newlyVisible;
    loadedCount.textContent = loadedImagesCount;
    
    // Ocultar botón si ya se cargaron todas
    if (loadedImagesCount >= items.length) {
      loadMoreContainer.style.display = 'none';
    }
    
    // Actualizar event listeners para nuevos elementos
    updateGalleryEventListeners();
  }
  
  // Función para actualizar event listeners
  function updateGalleryEventListeners() {
    const galleryItems = document.querySelectorAll('.gallery-item');
    galleryItems.forEach(item => {
      // Remover listeners existentes y agregar nuevos
      item.removeEventListener('click', handleGalleryClick);
      item.addEventListener('click', handleGalleryClick);
    });
  }
  
  // Handler para clicks en galería
  function handleGalleryClick() {
    openLightbox(this);
  }
  
  // Función para abrir lightbox
  function openLightbox(element) {
    currentImageIndex = parseInt(element.dataset.imageIndex);
    showImage();
    document.getElementById('lightbox').classList.remove('hidden');
    document.body.style.overflow = 'hidden';
  }
  
  // Función para mostrar imagen actual
  function showImage() {
    const image = images[currentImageIndex];
    const lightboxImage = document.getElementById('lightboxImage');
    const imageCounter = document.getElementById('imageCounter');
    const imageName = document.getElementById('imageName');
    
    lightboxImage.src = image.src;
    lightboxImage.alt = image.alt;
    imageCounter.textContent = `${currentImageIndex + 1} de ${images.length}`;
    imageName.textContent = image.name;
  }
  
  // Función para cerrar lightbox
  function closeLightbox() {
    document.getElementById('lightbox').classList.add('hidden');
    document.body.style.overflow = 'auto';
  }
  
  // Función para imagen anterior
  function prevImage() {
    currentImageIndex = currentImageIndex > 0 ? currentImageIndex - 1 : images.length - 1;
    showImage();
  }
  
  // Función para imagen siguiente
  function nextImage() {
    currentImageIndex = currentImageIndex < images.length - 1 ? currentImageIndex + 1 : 0;
    showImage();
  }
  
  // Event listeners
  document.addEventListener('DOMContentLoaded', function() {
    // Configurar lazy loading para imágenes iniciales
    const initialImages = document.querySelectorAll('.lazy-image');
    initialImages.forEach(img => {
      if (img.src || img.dataset.src) {
        imageObserver.observe(img);
      }
    });
    
    // Event listener para botón cargar más
    const loadMoreBtn = document.getElementById('loadMoreBtn');
    if (loadMoreBtn) {
      loadMoreBtn.addEventListener('click', loadMoreImages);
    }
    
    // Event listeners para abrir lightbox (inicial)
    updateGalleryEventListeners();
    
    // Cerrar lightbox
    document.getElementById('closeLightbox').addEventListener('click', closeLightbox);
    document.getElementById('lightbox').addEventListener('click', function(e) {
      if (e.target === this) closeLightbox();
    });
    
    // Navegación con botones
    document.getElementById('prevImage').addEventListener('click', prevImage);
    document.getElementById('nextImage').addEventListener('click', nextImage);
    
    // Navegación con teclado
    document.addEventListener('keydown', function(e) {
      const lightbox = document.getElementById('lightbox');
      if (!lightbox.classList.contains('hidden')) {
        switch(e.key) {
          case 'Escape':
            closeLightbox();
            break;
          case 'ArrowLeft':
            e.preventDefault();
            prevImage();
            break;
          case 'ArrowRight':
            e.preventDefault();
            nextImage();
            break;
        }
      }
    });
    
    // Añadir índices para la animación escalonada
    const items = document.querySelectorAll('.grid > div');
    items.forEach((item, index) => {
      item.style.setProperty('--index', index.toString());
    });

    // Lazy loading mejorado y manejo de errores de imágenes
    const lazyImages = document.querySelectorAll('.lazy-image');
    
    lazyImages.forEach(img => {
      img.addEventListener('error', function() {
        this.style.display = 'none';
        const parent = this.closest('.group');
        if (parent) {
          parent.style.display = 'none';
        }
      });
    });
  });
</script>