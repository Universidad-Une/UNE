---
import Layout from "@/layouts/Layout.astro";

// Importar todas las imágenes usando import.meta.glob
const allImages = import.meta.glob('/src/assets/Imagenes/Graduaciones/*.{png,jpg,jpeg,webp,svg}', {
  eager: true,
  query: '?url',
});

// Crear array de objetos con información de las imágenes
const graduationImages = Object.entries(allImages).map(([path, module]) => {
  const fileName = path.split('/').pop();
  const name = fileName?.split('.')[0] || '';
  return {
    src: module.default || module,
    alt: `Graduación ${name}`,
    name: name,
    path: path
  };
});
---

<Layout>
  <main class="min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50">
    <!-- Header -->
    <header class="text-center py-12 px-4">
      <h1 class="text-5xl font-bold text-gray-800 mb-4 tracking-tight">
        Galería de <span class="text-blue-600">Graduaciones</span>
      </h1>
      <p class="text-xl text-gray-600 max-w-2xl mx-auto leading-relaxed">
        Momentos especiales capturados para toda la vida. Celebramos cada logro y cada sueño cumplido.
      </p>
      <div class="mt-6 flex items-center justify-center gap-2">
        <div class="h-1 w-20 bg-blue-500 rounded"></div>
        <div class="h-1 w-8 bg-purple-400 rounded"></div>
        <div class="h-1 w-4 bg-blue-300 rounded"></div>
      </div>
    </header>

    <!-- Contador de imágenes y loading -->
    <div class="text-center mb-8">
      <span class="inline-block bg-white/80 backdrop-blur-sm px-6 py-2 rounded-full text-gray-700 font-medium shadow-sm border border-gray-200">
        <span id="loadedCounter">0</span> de {graduationImages.length} fotografías cargadas
      </span>
      <div id="loadingProgress" class="mt-4 max-w-md mx-auto">
        <div class="bg-gray-200 rounded-full h-2">
          <div id="progressBar" class="bg-blue-600 h-2 rounded-full transition-all duration-300" style="width: 0%"></div>
        </div>
        <p class="text-sm text-gray-500 mt-2">Cargando galería...</p>
      </div>
    </div>

    <!-- Galería -->
    <section class="container mx-auto px-4 pb-12">
      {graduationImages.length > 0 ? (
        <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-6" id="imageGrid">
          {graduationImages.map((image, index) => (
            <div 
              class="group relative overflow-hidden rounded-xl bg-white shadow-md hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1 cursor-pointer gallery-item opacity-0"
              key={index}
              data-image-index={index}
              style={`animation-delay: ${Math.floor(index / 10) * 100}ms;`}
            >
              <div class="aspect-square overflow-hidden relative">
                <!-- Skeleton loader inicial -->
                <div class="absolute inset-0 bg-gray-200 animate-pulse flex items-center justify-center image-skeleton">
                  <svg class="w-8 h-8 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M4 3a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V5a2 2 0 00-2-2H4zm12 12H4l4-8 3 6 2-4 3 6z" clip-rule="evenodd"></path>
                  </svg>
                </div>
                
                <img 
                  data-src={image.src}
                  alt={image.alt}
                  class="w-full h-full object-cover transition-all duration-500 group-hover:scale-110 lazy-image opacity-0"
                  loading="lazy"
                  decoding="async"
                />
              </div>
              
              <!-- Overlay con información -->
              <div class="absolute inset-0 bg-gradient-to-t from-black/70 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300">
                <div class="absolute bottom-0 left-0 right-0 p-4">
                  <p class="text-white text-sm font-medium truncate">
                    {image.name}
                  </p>
                </div>
              </div>

              <!-- Indicador de hover -->
              <div class="absolute top-3 right-3 opacity-0 group-hover:opacity-100 transition-opacity duration-300">
                <div class="bg-white/90 backdrop-blur-sm rounded-full p-2">
                  <svg class="w-4 h-4 text-gray-700" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                  </svg>
                </div>
              </div>
            </div>
          ))}
        </div>
      ) : (
        <!-- Estado vacío -->
        <div class="text-center py-20">
          <div class="mx-auto w-24 h-24 bg-gray-100 rounded-full flex items-center justify-center mb-6">
            <svg class="w-12 h-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
            </svg>
          </div>
          <h3 class="text-2xl font-semibold text-gray-600 mb-2">No hay imágenes disponibles</h3>
          <p class="text-gray-500 max-w-md mx-auto">
            Aún no se han subido fotografías de graduación. Pronto verás aquí todos los momentos especiales.
          </p>
        </div>
      )}
    </section>

    <!-- Lightbox Modal -->
    <div id="lightbox" class="fixed inset-0 bg-black/90 backdrop-blur-sm z-50 hidden flex items-center justify-center">
      <!-- Botón cerrar -->
      <button 
        id="closeLightbox" 
        class="absolute top-6 right-6 text-white/70 hover:text-white text-4xl z-60 transition-colors"
        aria-label="Cerrar galería"
      >
        &times;
      </button>
      
      <!-- Contenedor de imagen -->
      <div class="relative max-w-[90vw] max-h-[90vh] flex items-center justify-center">
        <img 
          id="lightboxImage" 
          src="" 
          alt="" 
          class="max-w-full max-h-full object-contain rounded-lg shadow-2xl"
        />
        
        <!-- Loading spinner para lightbox -->
        <div id="lightboxLoader" class="absolute inset-0 bg-black/50 flex items-center justify-center hidden">
          <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-white"></div>
        </div>
        
        <!-- Botón anterior -->
        <button 
          id="prevImage" 
          class="absolute left-4 top-1/2 transform -translate-y-1/2 bg-black/50 hover:bg-black/70 text-white rounded-full p-3 transition-all"
          aria-label="Imagen anterior"
        >
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
          </svg>
        </button>
        
        <!-- Botón siguiente -->
        <button 
          id="nextImage" 
          class="absolute right-4 top-1/2 transform -translate-y-1/2 bg-black/50 hover:bg-black/70 text-white rounded-full p-3 transition-all"
          aria-label="Imagen siguiente"
        >
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
          </svg>
        </button>
      </div>
      
      <!-- Información de imagen -->
      <div class="absolute bottom-6 left-1/2 transform -translate-x-1/2 bg-black/50 backdrop-blur-sm text-white px-6 py-3 rounded-full">
        <span id="imageCounter">1 de {graduationImages.length}</span>
        <span class="mx-2">•</span>
        <span id="imageName">Imagen</span>
      </div>
    </div>

    <!-- Footer de la galería -->
    <footer class="bg-white/50 backdrop-blur-sm border-t border-gray-200 mt-16">
      <div class="container mx-auto px-4 py-8 text-center">
        <p class="text-gray-600">
          Cada graduación es un nuevo comienzo. Cada foto, un recuerdo eterno.
        </p>
        <div class="mt-4 flex justify-center space-x-1">
          <div class="w-2 h-2 bg-blue-400 rounded-full animate-pulse"></div>
          <div class="w-2 h-2 bg-purple-400 rounded-full animate-pulse" style="animation-delay: 0.5s;"></div>
          <div class="w-2 h-2 bg-blue-300 rounded-full animate-pulse" style="animation-delay: 1s;"></div>
        </div>
      </div>
    </footer>
  </main>
</Layout>

<style>
  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(30px) scale(0.95);
    }
    to {
      opacity: 1;
      transform: translateY(0) scale(1);
    }
  }
  
  @keyframes slideIn {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  .gallery-item {
    animation: fadeInUp 0.6s ease-out forwards;
  }
  
  .lazy-image {
    transition: opacity 0.5s ease, transform 0.3s ease;
  }
  
  .lazy-image.loaded {
    opacity: 1 !important;
  }
  
  /* Optimización para viewport grande */
  @media (min-width: 1920px) {
    .container {
      max-width: 1800px;
    }
    
    #imageGrid {
      grid-template-columns: repeat(6, 1fr);
    }
  }
  
  /* Preload hint para imágenes críticas */
  .critical-image {
    content-visibility: auto;
    contain-intrinsic-size: 300px 300px;
  }
</style>

<script define:vars={{ images: graduationImages }}>
  console.log('Total images to load:', images.length);
  
  let currentImageIndex = 0;
  let loadedImagesCount = 0;
  let isLoadingComplete = false;
  
  // Cache para imágenes precargadas
  const imageCache = new Map();
  
  // Configuración optimizada del Intersection Observer
  const imageObserver = new IntersectionObserver((entries, observer) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        loadImage(entry.target);
        observer.unobserve(entry.target);
      }
    });
  }, {
    rootMargin: '100px', // Más agresivo para mejor UX
    threshold: 0.1
  });
  
  // Función optimizada para cargar imágenes
  function loadImage(img) {
    const src = img.dataset.src;
    if (!src || img.classList.contains('loading')) return;
    
    img.classList.add('loading');
    const skeleton = img.parentNode.querySelector('.image-skeleton');
    
    // Verificar si ya está en cache
    if (imageCache.has(src)) {
      applyImageSrc(img, src, skeleton);
      return;
    }
    
    // Crear nueva imagen para preload
    const newImg = new Image();
    newImg.onload = () => {
      imageCache.set(src, true);
      applyImageSrc(img, src, skeleton);
      updateProgress();
    };
    
    newImg.onerror = () => {
      console.error('Error loading image:', src);
      hideImageElement(img);
      updateProgress();
    };
    
    newImg.src = src;
  }
  
  // Aplicar imagen cargada
  function applyImageSrc(img, src, skeleton) {
    img.src = src;
    img.classList.add('loaded');
    if (skeleton) {
      skeleton.style.opacity = '0';
      setTimeout(() => skeleton.remove(), 500);
    }
    img.classList.remove('loading');
  }
  
  // Ocultar imagen con error
  function hideImageElement(img) {
    const parent = img.closest('.gallery-item');
    if (parent) {
      parent.style.display = 'none';
    }
  }
  
  // Actualizar progreso de carga
  function updateProgress() {
    loadedImagesCount++;
    const progress = (loadedImagesCount / images.length) * 100;
    
    const progressBar = document.getElementById('progressBar');
    const loadedCounter = document.getElementById('loadedCounter');
    const loadingProgress = document.getElementById('loadingProgress');
    
    if (progressBar) progressBar.style.width = `${progress}%`;
    if (loadedCounter) loadedCounter.textContent = loadedImagesCount.toString();
    
    // Ocultar barra de progreso cuando termine
    if (loadedImagesCount >= images.length && loadingProgress) {
      setTimeout(() => {
        loadingProgress.style.opacity = '0';
        setTimeout(() => loadingProgress.remove(), 500);
      }, 1000);
      isLoadingComplete = true;
    }
  }
  
  // Precargar imágenes críticas (primeras 12)
  function preloadCriticalImages() {
    const criticalCount = Math.min(12, images.length);
    
    for (let i = 0; i < criticalCount; i++) {
      const img = new Image();
      img.onload = () => {
        imageCache.set(images[i].src, true);
        updateProgress();
      };
      img.onerror = () => updateProgress();
      img.src = images[i].src;
    }
  }
  
  // Configurar lazy loading en lotes
  function setupLazyLoading() {
    const lazyImages = document.querySelectorAll('.lazy-image');
    
    // Cargar inmediatamente las primeras 12 si están en cache
    lazyImages.forEach((img, index) => {
      if (index < 12 && imageCache.has(img.dataset.src)) {
        loadImage(img);
      } else {
        imageObserver.observe(img);
      }
    });
  }
  
  // Precargar siguiente y anterior imagen en lightbox
  function preloadAdjacentImages(currentIndex) {
    const preloadIndexes = [
      currentIndex - 1 >= 0 ? currentIndex - 1 : images.length - 1,
      currentIndex + 1 < images.length ? currentIndex + 1 : 0
    ];
    
    preloadIndexes.forEach(index => {
      const src = images[index].src;
      if (!imageCache.has(src)) {
        const img = new Image();
        img.onload = () => imageCache.set(src, true);
        img.src = src;
      }
    });
  }
  
  // Event listeners para galería
  function setupGalleryEvents() {
    const galleryItems = document.querySelectorAll('.gallery-item');
    galleryItems.forEach(item => {
      item.addEventListener('click', function() {
        const index = parseInt(this.getAttribute('data-image-index'));
        openLightbox(index);
      });
    });
  }
  
  // Funciones del lightbox optimizadas
  function openLightbox(index) {
    currentImageIndex = index;
    showImage();
    preloadAdjacentImages(index);
    
    const lightbox = document.getElementById('lightbox');
    if (lightbox) {
      lightbox.classList.remove('hidden');
      document.body.style.overflow = 'hidden';
    }
  }
  
  function showImage() {
    if (!images || images.length === 0) return;
    
    const image = images[currentImageIndex];
    const lightboxImage = document.getElementById('lightboxImage');
    const lightboxLoader = document.getElementById('lightboxLoader');
    const imageCounter = document.getElementById('imageCounter');
    const imageName = document.getElementById('imageName');
    
    // Mostrar loader
    if (lightboxLoader) lightboxLoader.classList.remove('hidden');
    
    // Cargar imagen
    if (lightboxImage) {
      lightboxImage.onload = () => {
        if (lightboxLoader) lightboxLoader.classList.add('hidden');
      };
      lightboxImage.src = image.src;
      lightboxImage.alt = image.alt;
    }
    
    // Actualizar información
    if (imageCounter) {
      imageCounter.textContent = `${currentImageIndex + 1} de ${images.length}`;
    }
    if (imageName) {
      imageName.textContent = image.name;
    }
    
    // Precargar siguientes imágenes
    preloadAdjacentImages(currentImageIndex);
  }
  
  function closeLightbox() {
    const lightbox = document.getElementById('lightbox');
    if (lightbox) {
      lightbox.classList.add('hidden');
      document.body.style.overflow = 'auto';
    }
  }
  
  function prevImage() {
    if (images && images.length > 0) {
      currentImageIndex = currentImageIndex > 0 ? currentImageIndex - 1 : images.length - 1;
      showImage();
    }
  }
  
  function nextImage() {
    if (images && images.length > 0) {
      currentImageIndex = currentImageIndex < images.length - 1 ? currentImageIndex + 1 : 0;
      showImage();
    }
  }
  
  // Inicialización
  document.addEventListener('DOMContentLoaded', function() {
    if (!images || images.length === 0) {
      console.warn('No images available');
      return;
    }
    
    // Iniciar carga optimizada
    preloadCriticalImages();
    setupLazyLoading();
    setupGalleryEvents();
    
    // Event listeners del lightbox
    const closeLightboxBtn = document.getElementById('closeLightbox');
    const lightbox = document.getElementById('lightbox');
    const prevBtn = document.getElementById('prevImage');
    const nextBtn = document.getElementById('nextImage');
    
    if (closeLightboxBtn) closeLightboxBtn.addEventListener('click', closeLightbox);
    if (lightbox) {
      lightbox.addEventListener('click', function(e) {
        if (e.target === this) closeLightbox();
      });
    }
    if (prevBtn) prevBtn.addEventListener('click', prevImage);
    if (nextBtn) nextBtn.addEventListener('click', nextImage);
    
    // Navegación con teclado
    document.addEventListener('keydown', function(e) {
      const lightbox = document.getElementById('lightbox');
      if (lightbox && !lightbox.classList.contains('hidden')) {
        switch(e.key) {
          case 'Escape':
            closeLightbox();
            break;
          case 'ArrowLeft':
            e.preventDefault();
            prevImage();
            break;
          case 'ArrowRight':
            e.preventDefault();
            nextImage();
            break;
        }
      }
    });
    
    // Optimización: Precargar más imágenes cuando el usuario hace scroll
    let scrollTimeout;
    window.addEventListener('scroll', () => {
      clearTimeout(scrollTimeout);
      scrollTimeout = setTimeout(() => {
        if (!isLoadingComplete) {
          const visibleImages = document.querySelectorAll('.lazy-image:not(.loaded)');
          visibleImages.forEach(img => {
            const rect = img.getBoundingClientRect();
            if (rect.top < window.innerHeight + 200) {
              loadImage(img);
            }
          });
        }
      }, 100);
    });
  });
</script>

<style>
  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(30px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .grid > div {
    animation: fadeInUp 0.6s ease-out forwards;
    animation-delay: calc(var(--index, 0) * 0.1s);
  }
</style>