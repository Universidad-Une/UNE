---
// Carousel3D.astro
import Continua from "../assets/Imagenes/E_Continua.png";

// Datos de las 5 cards
const cards = [
  {
    id: 1,
    title: "Preescolar",
    subtitle: "Primeros Pasos",
    description: "Desarrollo integral temprano con metodologías lúdicas y ambientes seguros",
    image: Continua.src,
    alt: "Estudiante de Preescolar"
  },
  {
    id: 2,
    title: "Primaria",
    subtitle: "Bases Sólidas",
    description: "Educación fundamental con enfoque en valores y habilidades esenciales",
    image: Continua.src,
    alt: "Estudiante de Primaria"
  },
  {
    id: 3,
    title: "Secundaria",
    subtitle: "Formación Integral",
    description: "Formación integral con talleres académicos, deportivos y artísticos",
    image: Continua.src,
    alt: "Estudiante de Secundaria"
  },
  {
    id: 4,
    title: "Preparatoria",
    subtitle: "Excelencia Académica",
    description: "Programas de excelencia con vinculación universitaria y desarrollo profesional",
    image: Continua.src,
    alt: "Estudiante de Preparatoria"
  },
  {
    id: 5,
    title: "Universidad",
    subtitle: "Educación Superior",
    description: "Carreras profesionales con enfoque innovador y tecnológico de vanguardia",
    image: Continua.src,
    alt: "Estudiante Universitario"
  }
];
---

<div class="carousel-3d-container">
  <div class="carousel-3d" id="carousel3d">
    {cards.map((card, index) => (
      <div 
        class={`carousel-card ${index === 2 ? 'active' : ''}`}
        data-index={index}
      >
        <div class="card-content">
          <h3 class="card-title">{card.title}</h3>
          <p class="card-subtitle">{card.subtitle}</p>
          <img 
            src={card.image}
            alt={card.alt}
            class="card-image"
          />
          <p class="card-description">{card.description}</p>
          <button class="card-button">Conocer más</button>
        </div>
      </div>
    ))}
  </div>
  
  <!-- Indicadores -->
  <div class="carousel-indicators">
    {cards.map((_, index) => (
      <button 
        class={`indicator ${index === 2 ? 'active' : ''}`}
        data-index={index}
      ></button>
    ))}
  </div>
</div>

<style>
  .carousel-3d-container {
    width: 100%;
    max-width: 1200px;
    margin: 0 auto;
    padding: 40px 20px;
    position: relative;
    overflow: hidden;
  }

  .carousel-3d {
    display: flex;
    justify-content: center;
    align-items: center;
    position: relative;
    height: 500px;
    perspective: 1200px;
  }

  .carousel-card {
    position: absolute;
    width: 280px;
    height: 420px;
    border-radius: 20px;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    box-shadow: 0 20px 40px rgba(0,0,0,0.1);
    transition: all 0.6s cubic-bezier(0.175, 0.885, 0.32, 1.275);
    cursor: pointer;
    overflow: hidden;
    transform-style: preserve-3d;
  }

  /* Card central activa */
  .carousel-card.active {
    transform: translateX(0) scale(1.1) rotateY(0deg);
    z-index: 3;
    opacity: 1;
  }

  /* Cards laterales - distribuidas alrededor del centro */
  .carousel-card:nth-child(1):not(.active) {
    transform: translateX(-320px) scale(0.7) rotateY(35deg);
    z-index: 0;
    opacity: 0.5;
  }

  .carousel-card:nth-child(2):not(.active) {
    transform: translateX(-160px) scale(0.85) rotateY(20deg);
    z-index: 2;
    opacity: 0.8;
  }

  .carousel-card:nth-child(4):not(.active) {
    transform: translateX(160px) scale(0.85) rotateY(-20deg);
    z-index: 2;
    opacity: 0.8;
  }

  .carousel-card:nth-child(5):not(.active) {
    transform: translateX(320px) scale(0.7) rotateY(-35deg);
    z-index: 0;
    opacity: 0.5;
  }

  .card-content {
    padding: 30px 25px;
    height: 100%;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    color: white;
    text-align: center;
    position: relative;
  }

  .card-title {
    font-size: 24px;
    font-weight: 700;
    margin-bottom: 8px;
    text-shadow: 0 2px 4px rgba(0,0,0,0.3);
  }

  .card-subtitle {
    font-size: 14px;
    opacity: 0.9;
    margin-bottom: 20px;
    font-weight: 500;
  }

  .card-image {
    width: 120px;
    height: 150px;
    object-fit: cover;
    object-position: top;
    border-radius: 12px;
    margin: 0 auto 20px;
    box-shadow: 0 8px 16px rgba(0,0,0,0.2);
  }

  .card-description {
    font-size: 13px;
    line-height: 1.4;
    opacity: 0.9;
    margin-bottom: 20px;
    flex-grow: 1;
    display: flex;
    align-items: center;
  }

  .card-button {
    background: rgba(255,255,255,0.2);
    border: 2px solid rgba(255,255,255,0.3);
    color: white;
    padding: 10px 20px;
    border-radius: 25px;
    font-weight: 600;
    transition: all 0.3s ease;
    backdrop-filter: blur(10px);
  }

  .card-button:hover {
    background: rgba(255,255,255,0.3);
    transform: translateY(-2px);
    box-shadow: 0 5px 15px rgba(0,0,0,0.2);
  }

  /* Indicadores */
  .carousel-indicators {
    display: flex;
    justify-content: center;
    gap: 12px;
    margin-top: 40px;
  }

  .indicator {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    border: none;
    background: rgba(102, 126, 234, 0.3);
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .indicator.active {
    background: #667eea;
    transform: scale(1.2);
  }

  .indicator:hover {
    background: rgba(102, 126, 234, 0.6);
  }

  /* Responsive */
  @media (max-width: 768px) {
    .carousel-3d {
      height: 400px;
    }
    
    .carousel-card {
      width: 240px;
      height: 360px;
    }

    /* Responsive para 5 cards */
    .carousel-card:nth-child(1):not(.active) {
      transform: translateX(-240px) scale(0.65) rotateY(30deg);
      opacity: 0.4;
    }

    .carousel-card:nth-child(2):not(.active) {
      transform: translateX(-120px) scale(0.8) rotateY(15deg);
      opacity: 0.7;
    }

    .carousel-card:nth-child(4):not(.active) {
      transform: translateX(120px) scale(0.8) rotateY(-15deg);
      opacity: 0.7;
    }

    .carousel-card:nth-child(5):not(.active) {
      transform: translateX(240px) scale(0.65) rotateY(-30deg);
      opacity: 0.4;
    }

    .card-content {
      padding: 20px 18px;
    }

    .card-title {
      font-size: 20px;
    }

    .card-image {
      width: 100px;
      height: 120px;
    }
  }

  @media (max-width: 480px) {
    .carousel-card {
      width: 200px;
      height: 320px;
    }

    .carousel-card:nth-child(1):not(.active),
    .carousel-card:nth-child(5):not(.active) {
      transform: translateX(-180px) scale(0.6) rotateY(25deg);
      opacity: 0.3;
    }

    .carousel-card:nth-child(2):not(.active),
    .carousel-card:nth-child(4):not(.active) {
      transform: translateX(-90px) scale(0.75) rotateY(10deg);
      opacity: 0.6;
    }

    .carousel-card:nth-child(4):not(.active) {
      transform: translateX(90px) scale(0.75) rotateY(-10deg);
    }

    .carousel-card:nth-child(5):not(.active) {
      transform: translateX(180px) scale(0.6) rotateY(-25deg);
    }
  }
</style>

<script>
  class Carousel3D {
    constructor() {
      this.currentIndex = 2; // Empezar con la tercera card activa (centro)
      this.cards = document.querySelectorAll('.carousel-card');
      this.indicators = document.querySelectorAll('.indicator');
      this.totalCards = this.cards.length;
      
      this.init();
    }

    init() {
      // Event listeners para las cards
      this.cards.forEach((card, index) => {
        card.addEventListener('click', () => {
          if (index !== this.currentIndex) {
            this.goToSlide(index);
          }
        });
      });

      // Event listeners para los indicadores
      this.indicators.forEach((indicator, index) => {
        indicator.addEventListener('click', () => {
          this.goToSlide(index);
        });
      });

      // Touch events para móvil
      this.setupTouchEvents();
      
      // Auto-play pause setup
      this.setupAutoPlayPause();
      
      // Inicializar posiciones
      this.updatePositions();
      
      // Opcional: iniciar auto-play (descomenta la siguiente línea)
      // this.startAutoPlay(5000); // Cambia cada 5 segundos
      
      // Keyboard navigation
      document.addEventListener('keydown', (e) => {
        if (e.key === 'ArrowLeft') {
          this.prevSlide();
        } else if (e.key === 'ArrowRight') {
          this.nextSlide();
        }
      });
    }

    goToSlide(index) {
      // Remover clase active de todos
      this.cards.forEach(card => card.classList.remove('active'));
      this.indicators.forEach(indicator => indicator.classList.remove('active'));
      
      // Actualizar índice actual
      this.currentIndex = index;
      
      // Agregar clase active al nuevo
      this.cards[index].classList.add('active');
      this.indicators[index].classList.add('active');
      
      // Reorganizar posiciones
      this.updatePositions();
    }

    updatePositions() {
      this.cards.forEach((card, index) => {
        // Calcular distancia con ciclo infinito
        let distance = index - this.currentIndex;
        
        // Ajustar distancia para ciclo infinito (encontrar el camino más corto)
        if (distance > this.totalCards / 2) {
          distance -= this.totalCards;
        } else if (distance < -this.totalCards / 2) {
          distance += this.totalCards;
        }
        
        card.style.zIndex = distance === 0 ? '3' : (Math.abs(distance) === 1 ? '2' : '1');
        
        if (distance === 0) {
          // Card activa (centro)
          card.style.transform = 'translateX(0) scale(1.1) rotateY(0deg)';
          card.style.opacity = '1';
        } else {
          let translateX, scale, rotateY, opacity, zIndex;
          
          switch(distance) {
            case -2:
              translateX = -320;
              scale = 0.7;
              rotateY = 35;
              opacity = 0.5;
              zIndex = 0;
              break;
            case -1:
              translateX = -160;
              scale = 0.85;
              rotateY = 20;
              opacity = 0.8;
              zIndex = 2;
              break;
            case 1:
              translateX = 160;
              scale = 0.85;
              rotateY = -20;
              opacity = 0.8;
              zIndex = 2;
              break;
            case 2:
              translateX = 320;
              scale = 0.7;
              rotateY = -35;
              opacity = 0.5;
              zIndex = 0;
              break;
            default:
              // Cards en ciclo infinito (extremos que se conectan)
              if (distance < -2) {
                // Cards que aparecen por la derecha en el ciclo infinito
                translateX = 320 + (Math.abs(distance) - 2) * 80;
                scale = Math.max(0.7 - (Math.abs(distance) - 2) * 0.1, 0.5);
                rotateY = -35 - (Math.abs(distance) - 2) * 10;
                opacity = Math.max(0.5 - (Math.abs(distance) - 2) * 0.1, 0.2);
              } else {
                // Cards que aparecen por la izquierda en el ciclo infinito
                translateX = -320 - (distance - 2) * 80;
                scale = Math.max(0.7 - (distance - 2) * 0.1, 0.5);
                rotateY = 35 + (distance - 2) * 10;
                opacity = Math.max(0.5 - (distance - 2) * 0.1, 0.2);
              }
              zIndex = 0;
          }
          
          card.style.transform = `translateX(${translateX}px) scale(${scale}) rotateY(${rotateY}deg)`;
          card.style.opacity = opacity.toString();
          card.style.zIndex = zIndex.toString();
        }
      });
    }

    nextSlide() {
      const nextIndex = (this.currentIndex + 1) % this.totalCards;
      this.goToSlide(nextIndex);
    }

    prevSlide() {
      const prevIndex = (this.currentIndex - 1 + this.totalCards) % this.totalCards;
      this.goToSlide(prevIndex);
    }

    setupTouchEvents() {
      let startX = 0;
      let endX = 0;
      const carousel = document.querySelector('.carousel-3d');

      carousel.addEventListener('touchstart', (e) => {
        startX = e.touches[0].clientX;
      });

      carousel.addEventListener('touchend', (e) => {
        endX = e.changedTouches[0].clientX;
        this.handleSwipe();
      });
    }

    handleSwipe() {
      const threshold = 50;
      const diff = startX - endX;

      if (Math.abs(diff) > threshold) {
        if (diff > 0) {
          this.nextSlide();
        } else {
          this.prevSlide();
        }
      }
    }

    // Método para auto-play opcional
    startAutoPlay(interval = 4000) {
      this.stopAutoPlay(); // Detener cualquier auto-play existente
      this.autoPlayInterval = setInterval(() => {
        this.nextSlide();
      }, interval);
    }

    stopAutoPlay() {
      if (this.autoPlayInterval) {
        clearInterval(this.autoPlayInterval);
        this.autoPlayInterval = null;
      }
    }

    // Pausar auto-play al hacer hover
    setupAutoPlayPause() {
      const carousel = document.querySelector('.carousel-3d-container');
      
      carousel.addEventListener('mouseenter', () => {
        this.stopAutoPlay();
      });
      
      carousel.addEventListener('mouseleave', () => {
        // Opcional: reiniciar auto-play al salir del hover
        // this.startAutoPlay();
      });
    }
  }

  // Inicializar cuando el DOM esté listo
  document.addEventListener('DOMContentLoaded', () => {
    new Carousel3D();
  });
</script>