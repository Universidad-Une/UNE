---
import { Calendar, Users, BookOpen, Building2 } from "@lucide/astro";
---

<div class="max-w-4xl mx-auto p-6">
  <div class="mb-8">
    <h1 class="text-3xl font-bold text-gray-900 mb-2">Empleos Disponibles</h1>
    <p class="text-gray-600" id="jobs-count">
      Cargando oportunidades laborales...
    </p>
  </div>

  <div class="space-y-6" id="jobs-container">
    <div class="text-center py-12" id="loading-state">
      <div
        class="mx-auto w-24 h-24 bg-gray-100 rounded-full flex items-center justify-center mb-4 animate-pulse"
      >
        <BookOpen class="w-12 h-12 text-gray-400" />
      </div>
      <h3 class="text-lg font-medium text-gray-900 mb-2">
        Cargando empleos...
      </h3>
    </div>
  </div>

  <div id="pagination-container" class="mt-8 hidden">
    <div
      class="flex items-center justify-between border-t border-gray-200 pt-6"
    >
      <div class="flex-1 flex justify-start">
        <p class="text-sm text-gray-700">
          Mostrando <span class="font-medium" id="page-start">1</span> a
          <span class="font-medium" id="page-end">10</span> de
          <span class="font-medium" id="total-jobs">0</span> empleos
        </p>
      </div>

      <div class="flex-1 flex justify-center">
        <nav
          class="relative z-0 inline-flex rounded-md shadow-sm -space-x-px"
          aria-label="Pagination"
        >
          <button
            id="prev-button"
            class="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed transition-colors duration-200"
          >
            <span class="sr-only">Anterior</span>
            <svg
              class="h-5 w-5"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M15 19l-7-7 7-7"></path>
            </svg>
          </button>

          <div id="page-numbers" class="flex"></div>

          <button
            id="next-button"
            class="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed transition-colors duration-200"
          >
            <span class="sr-only">Siguiente</span>
            <svg
              class="h-5 w-5"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M9 5l7 7-7 7"></path>
            </svg>
          </button>
        </nav>
      </div>

      <div class="flex-1 flex justify-end">
        <select
          id="items-per-page"
          class="border border-gray-300 rounded-md text-sm px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
        >
          <option value="5">5 por p치gina</option>
          <option value="10" selected>10 por p치gina</option>
          <option value="20">20 por p치gina</option>
          <option value="50">50 por p치gina</option>
        </select>
      </div>
    </div>
  </div>
</div>

<script>
  const API_URL = "https://intranet.universidad-une.com/api/getjobs";

  let allJobs = [];
  let currentPage = 1;
  let itemsPerPage = 10;

  const formatDate = (dateString) => {
    const date = new Date(dateString);
    return date.toLocaleDateString("es-MX", {
      year: "numeric",
      month: "long",
      day: "numeric",
    });
  };

  const getBadgeColor = (count) => {
    if (count >= 3) return "bg-green-100 text-green-800";
    if (count >= 2) return "bg-yellow-100 text-yellow-800";
    return "bg-red-100 text-red-800";
  };

  const createJobCard = (job) => {
    const badgeColor = getBadgeColor(job.puestos_disponibles);
    const formattedDate = formatDate(job.fecha_publicacion);

    return `
    <div class="bg-white rounded-lg shadow-md border border-gray-200 hover:shadow-lg transition-shadow duration-300 animate-fade-in">
      <div class="p-6">
        <div class="flex justify-between items-start mb-4">
          <div class="flex-1">
            <h2 class="text-xl font-semibold text-gray-900 mb-2">${job.puesto}</h2>
            <div class="flex items-center text-gray-600">
              <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"></path>
              </svg>
              <span class="text-sm">${job.ubicacion}</span>
            </div>
          </div>
          <div class="px-3 py-1 rounded-full text-xs font-medium ${badgeColor}">
            <svg class="w-3 h-3 inline mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197M13 7a4 4 0 11-8 0 4 4 0 018 0z"></path>
            </svg>
            ${job.puestos_disponibles} ${job.puestos_disponibles === 1 ? "puesto" : "puestos"}
          </div>
        </div>

        <div class="flex items-center justify-between pt-4 border-t border-gray-100">
          <div class="flex items-center text-gray-500 text-sm">
            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
            </svg>
            <span>Publicado el ${formattedDate}</span>
          </div>
          
          <a href="/acerca/empleo/detalles?id=${job.id_empleo}" class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md text-sm font-medium transition-colors duration-200 flex items-center">
            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.247 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"></path>
            </svg>
            Ver detalles
          </a>
        </div>
      </div>
    </div>
  `;
  };

  const updatePaginationInfo = () => {
    const start = (currentPage - 1) * itemsPerPage + 1;
    const end = Math.min(currentPage * itemsPerPage, allJobs.length);

    document.getElementById("page-start").textContent = start;
    document.getElementById("page-end").textContent = end;
    document.getElementById("total-jobs").textContent = allJobs.length;
  };

  const generatePageNumbers = () => {
    const totalPages = Math.ceil(allJobs.length / itemsPerPage);
    const container = document.getElementById("page-numbers");
    container.innerHTML = "";

    let startPage = Math.max(1, currentPage - 2);
    let endPage = Math.min(totalPages, currentPage + 2);

    if (currentPage <= 3) endPage = Math.min(5, totalPages);
    if (currentPage >= totalPages - 2) startPage = Math.max(1, totalPages - 4);

    if (startPage > 1) {
      container.innerHTML += `<button class="page-number relative inline-flex items-center px-4 py-2 border border-gray-300 bg-white text-sm font-medium text-gray-700 hover:bg-gray-50" data-page="1">1</button>`;
      if (startPage > 2) {
        container.innerHTML += `<span class="relative inline-flex items-center px-4 py-2 border border-gray-300 bg-white text-sm font-medium text-gray-700">...</span>`;
      }
    }

    for (let i = startPage; i <= endPage; i++) {
      const isActive = i === currentPage;
      container.innerHTML += `
        <button class="page-number relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium ${
          isActive
            ? "z-10 bg-blue-600 border-blue-600 text-white"
            : "bg-white text-gray-700 hover:bg-gray-50"
        }" data-page="${i}">${i}</button>
      `;
    }

    if (endPage < totalPages) {
      if (endPage < totalPages - 1) {
        container.innerHTML += `<span class="relative inline-flex items-center px-4 py-2 border border-gray-300 bg-white text-sm font-medium text-gray-700">...</span>`;
      }
      container.innerHTML += `<button class="page-number relative inline-flex items-center px-4 py-2 border border-gray-300 bg-white text-sm font-medium text-gray-700 hover:bg-gray-50" data-page="${totalPages}">${totalPages}</button>`;
    }

    document.querySelectorAll(".page-number").forEach((btn) => {
      btn.addEventListener("click", () => goToPage(parseInt(btn.dataset.page)));
    });
  };

  const goToPage = (page) => {
    const totalPages = Math.ceil(allJobs.length / itemsPerPage);
    if (page < 1 || page > totalPages) return;

    currentPage = page;
    renderCurrentPage();
    window.scrollTo({ top: 0, behavior: "smooth" });
  };

  const renderCurrentPage = () => {
    const startIndex = (currentPage - 1) * itemsPerPage;
    const jobsToShow = allJobs.slice(startIndex, startIndex + itemsPerPage);

    document.getElementById("jobs-container").innerHTML = jobsToShow
      .map(createJobCard)
      .join("");

    updatePaginationControls();
    updatePaginationInfo();
    generatePageNumbers();
  };

  const updatePaginationControls = () => {
    const totalPages = Math.ceil(allJobs.length / itemsPerPage);
    document.getElementById("prev-button").disabled = currentPage === 1;
    document.getElementById("next-button").disabled =
      currentPage === totalPages;
  };

  const showEmptyState = () => {
    document.getElementById("jobs-container").innerHTML = `
      <div class="text-center py-12">
        <div class="mx-auto w-24 h-24 bg-gray-100 rounded-full flex items-center justify-center mb-4">
          <svg class="w-12 h-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.247 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"></path>
          </svg>
        </div>
        <h3 class="text-lg font-medium text-gray-900 mb-2">No hay empleos disponibles</h3>
        <p class="text-gray-600">Revisa m치s tarde para ver nuevas oportunidades laborales.</p>
      </div>
    `;
    document.getElementById("pagination-container").classList.add("hidden");
  };

  const showError = (error) => {
    document.getElementById("jobs-container").innerHTML = `
      <div class="text-center py-12">
        <div class="mx-auto w-24 h-24 bg-red-100 rounded-full flex items-center justify-center mb-4">
          <svg class="w-12 h-12 text-red-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
          </svg>
        </div>
        <h3 class="text-lg font-medium text-gray-900 mb-2">Error al cargar empleos</h3>
        <p class="text-gray-600 mb-4">${error.message}</p>
        <button onclick="location.reload()" class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md text-sm font-medium transition-colors duration-200">
          Reintentar
        </button>
      </div>
    `;
    document.getElementById("pagination-container").classList.add("hidden");
  };

  const fetchJobs = async () => {
    try {
      const response = await fetch(API_URL);
      if (!response.ok)
        throw new Error(`Error ${response.status}: ${response.statusText}`);

      const { data = [] } = await response.json();
      allJobs = data.filter((job) => job.puestos_disponibles > 0);

      document.getElementById("jobs-count").textContent =
        `${allJobs.length} ${allJobs.length === 1 ? "oportunidad laboral encontrada" : "oportunidades laborales encontradas"}`;

      if (allJobs.length === 0) {
        showEmptyState();
      } else {
        document
          .getElementById("pagination-container")
          .classList.remove("hidden");
        renderCurrentPage();
      }
    } catch (error) {
      console.error("[JOBS] Error:", error);
      showError(error);
      document.getElementById("jobs-count").textContent =
        "Error al cargar oportunidades laborales";
    }
  };

  document.addEventListener("DOMContentLoaded", () => {
    document
      .getElementById("prev-button")
      .addEventListener("click", () => goToPage(currentPage - 1));
    document
      .getElementById("next-button")
      .addEventListener("click", () => goToPage(currentPage + 1));
    document
      .getElementById("items-per-page")
      .addEventListener("change", (e) => {
        itemsPerPage = parseInt(e.target.value);
        currentPage = 1;
        renderCurrentPage();
      });

    fetchJobs();
  });
</script>

<style>
  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .animate-fade-in {
    animation: fadeIn 0.5s ease-out;
  }

  .animate-pulse {
    animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
  }

  @keyframes pulse {
    0%,
    100% {
      opacity: 1;
    }
    50% {
      opacity: 0.5;
    }
  }
</style>
