---
import { Calendar, Users, BookOpen, Building2 } from "@lucide/astro";
---

<div class="max-w-4xl mx-auto p-6">
  <div class="mb-8">
    <h1 class="text-3xl font-bold text-gray-900 mb-2">Empleos Disponibles</h1>
    <p class="text-gray-600" id="jobs-count">
      Cargando oportunidades laborales...
    </p>
  </div>

  <div class="space-y-6" id="jobs-container">
    <!-- Loading state -->
    <div class="text-center py-12" id="loading-state">
      <div
        class="mx-auto w-24 h-24 bg-gray-100 rounded-full flex items-center justify-center mb-4 animate-pulse"
      >
        <BookOpen class="w-12 h-12 text-gray-400" />
      </div>
      <h3 class="text-lg font-medium text-gray-900 mb-2">
        Cargando empleos...
      </h3>
    </div>
  </div>
</div>

<script>

  // URL de la API
  const apiUrl = "https://intranet.universidad-une.com/api/getjobs";

  // Funci√≥n para formatear fecha
  const formatDate = (dateString) => {
    try {
      console.log("[JOBS CLIENT] üìÖ Formateando fecha:", dateString);
      const date = new Date(dateString);
      const formatted = date.toLocaleDateString("es-MX", {
        year: "numeric",
        month: "long",
        day: "numeric",
      });
      console.log("[JOBS CLIENT] ‚úÖ Fecha formateada:", formatted);
      return formatted;
    } catch (error) {
      console.error(
        "[JOBS CLIENT] ‚ùå Error al formatear fecha:",
        dateString,
        error
      );
      return dateString;
    }
  };

  // Funci√≥n para obtener color del badge seg√∫n disponibilidad
  const getBadgeColor = (count) => {
    if (count >= 3) return "bg-green-100 text-green-800";
    if (count >= 2) return "bg-yellow-100 text-yellow-800";
    return "bg-red-100 text-red-800";
  };

  // Funci√≥n para limpiar HTML de la descripci√≥n
  const cleanDescription = (html) => {
    console.log(
      "[JOBS CLIENT] üßπ Limpiando descripci√≥n HTML:",
      html?.substring(0, 100)
    );

    if (
      !html ||
      html.trim() === "" ||
      html === '<p data-last-history-steps="1588989726754589"><br></p>'
    ) {
      console.log("[JOBS CLIENT] ‚ö†Ô∏è Descripci√≥n vac√≠a o inv√°lida");
      return "Sin descripci√≥n disponible.";
    }

    // Remover etiquetas HTML b√°sicas
    const cleaned =
      html.replace(/<[^>]*>/g, "").trim() || "Sin descripci√≥n disponible.";
    console.log(
      "[JOBS CLIENT] ‚úÖ Descripci√≥n limpia:",
      cleaned.substring(0, 100)
    );

    return cleaned;
  };

  // Funci√≥n para crear el HTML de un trabajo
  const createJobCard = (job) => {
    const badgeColor = getBadgeColor(job.puestos_disponibles);
    const description = cleanDescription(job.descripcion);
    const formattedDate = formatDate(job.fecha_publicacion);

    return `
      <div class="bg-white rounded-lg shadow-md border border-gray-200 hover:shadow-lg transition-shadow duration-300" style="animation: fadeIn 0.5s ease-out;">
        <div class="p-6">
          <!-- Header del trabajo -->
          <div class="flex justify-between items-start mb-4">
            <div class="flex-1">
              <h2 class="text-xl font-semibold text-gray-900 mb-2">
                ${job.puesto}
              </h2>
              <div class="flex items-center text-gray-600 mb-2">
                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"></path>
                </svg>
                <span class="text-sm">${job.ubicacion}</span>
              </div>
            </div>
            <div class="px-3 py-1 rounded-full text-xs font-medium ${badgeColor}">
              <svg class="w-3 h-3 inline mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197M13 7a4 4 0 11-8 0 4 4 0 018 0z"></path>
              </svg>
              ${job.puestos_disponibles} ${job.puestos_disponibles === 1 ? "puesto" : "puestos"}
            </div>
          </div>

          <!-- Descripci√≥n -->
          <p class="text-gray-700 mb-4 leading-relaxed">
            ${description}
          </p>

          <!-- Footer con fecha -->
          <div class="flex items-center justify-between pt-4 border-t border-gray-100">
            <div class="flex items-center text-gray-500 text-sm">
              <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
              </svg>
              <span>Publicado el ${formattedDate}</span>
            </div>
            
            <a 
              href="/acerca/Aplicar-empleo?id=${job.id_empleo}&puesto=${encodeURIComponent(job.puesto)}&ubicacion=${encodeURIComponent(job.ubicacion)}&puestos=${job.puestos_disponibles}&fecha=${job.fecha_publicacion}&descripcion=${encodeURIComponent(job.descripcion)}"
              class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md text-sm font-medium transition-colors duration-200 flex items-center inline-flex"
              data-job-id="${job.id_empleo}"
            >
              <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.247 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"></path>
              </svg>
              Ver detalles
            </a>
          </div>
        </div>
      </div>
    `;
  };

  // Funci√≥n para mostrar estado vac√≠o
  const showEmptyState = () => {
    const container = document.getElementById("jobs-container");
    container.innerHTML = `
      <div class="text-center py-12">
        <div class="mx-auto w-24 h-24 bg-gray-100 rounded-full flex items-center justify-center mb-4">
          <svg class="w-12 h-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.247 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"></path>
          </svg>
        </div>
        <h3 class="text-lg font-medium text-gray-900 mb-2">
          No hay empleos disponibles
        </h3>
        <p class="text-gray-600">
          Revisa m√°s tarde para ver nuevas oportunidades laborales.
        </p>
      </div>
    `;
  };

  // Funci√≥n para mostrar error
  const showError = (error) => {
    const container = document.getElementById("jobs-container");
    container.innerHTML = `
      <div class="text-center py-12">
        <div class="mx-auto w-24 h-24 bg-red-100 rounded-full flex items-center justify-center mb-4">
          <svg class="w-12 h-12 text-red-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
          </svg>
        </div>
        <h3 class="text-lg font-medium text-gray-900 mb-2">
          Error al cargar empleos
        </h3>
        <p class="text-gray-600 mb-4">
          ${error.message}
        </p>
        <button 
          onclick="location.reload()" 
          class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md text-sm font-medium transition-colors duration-200"
        >
          Reintentar
        </button>
      </div>
    `;
  };

  const fetchJobs = async () => {
    try {
      console.log("[JOBS CLIENT] üöÄ Iniciando llamada a:", apiUrl);

      const response = await fetch(apiUrl);

      console.log("[JOBS CLIENT] üì° Respuesta recibida:", {
        status: response.status,
        statusText: response.statusText,
        ok: response.ok,
      });

      if (!response.ok) {
        throw new Error(
          `Error al obtener empleos: ${response.status} - ${response.statusText}`
        );
      }

      const data = await response.json();
      console.log("[JOBS CLIENT] ‚úÖ Datos parseados exitosamente:", {
        status: data.status,
        total: data.total,
        dataLength: data.data?.length || 0,
      });

      const jobs = data.data || [];
      console.log("[JOBS CLIENT] üìä Total de empleos obtenidos:", jobs.length);

      // Filtrar empleos con puestos disponibles > 0
      const availableJobs = jobs.filter((job) => job.puestos_disponibles > 0);
      console.log(
        "[JOBS CLIENT] ‚ú® Empleos disponibles (puestos > 0):",
        availableJobs.length
      );
      console.log(
        "[JOBS CLIENT] üìù Empleos filtrados:",
        availableJobs.map((j) => ({
          id: j.id_empleo,
          puesto: j.puesto,
          disponibles: j.puestos_disponibles,
        }))
      );

      // Actualizar contador
      const countElement = document.getElementById("jobs-count");
      countElement.textContent = `${availableJobs.length} ${availableJobs.length === 1 ? "oportunidad laboral encontrada" : "oportunidades laborales encontradas"}`;

      // Renderizar empleos
      const container = document.getElementById("jobs-container");

      if (availableJobs.length === 0) {
        showEmptyState();
      } else {
        container.innerHTML = availableJobs
          .map((job) => createJobCard(job))
          .join("");

        // Agregar event listeners a los botones
        const detailButtons = container.querySelectorAll(
          'a[href*="Aplicar-empleo"]'
        );
        detailButtons.forEach((button, index) => {
          button.addEventListener("click", (e) => {
            const href = button.getAttribute("href");
            const jobId = button.getAttribute("data-job-id");
            console.log(
              `[JOBS CLIENT] üîó Click en "Ver detalles" #${index + 1}:`,
              {
                jobId,
                href,
              }
            );
          });
        });

        console.log(
          "[JOBS CLIENT] üìã Total de tarjetas renderizadas:",
          detailButtons.length
        );
      }
    } catch (error) {
      console.error("[JOBS CLIENT] ‚ùå Error en fetchJobs:", error);
      console.error("[JOBS CLIENT] üìã Detalles del error:", {
        message: error.message,
        name: error.name,
        stack: error.stack,
      });

      showError(error);

      // Actualizar contador con error
      const countElement = document.getElementById("jobs-count");
      countElement.textContent = "Error al cargar oportunidades laborales";
    }
  };

  // Ejecutar cuando el DOM est√© listo
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", fetchJobs);
  } else {
    fetchJobs();
  }
</script>

<style>
  /* Animaci√≥n de carga */
  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Animaci√≥n de pulso para loading */
  @keyframes pulse {
    0%,
    100% {
      opacity: 1;
    }
    50% {
      opacity: 0.5;
    }
  }

  .animate-pulse {
    animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
  }
</style>
