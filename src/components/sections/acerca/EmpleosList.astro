---
import { Calendar, Users, BookOpen, Building2 } from "@lucide/astro";
---

<div class="max-w-4xl mx-auto p-6">
  <div class="mb-8">
    <h1 class="text-3xl font-bold text-gray-900 mb-2">Empleos Disponibles</h1>
    <p class="text-gray-600" id="jobs-count">
      Cargando oportunidades laborales...
    </p>
  </div>

  <div class="mb-6">
    <div class="relative">
      <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
        <svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
        </svg>
      </div>
      <input
        type="text"
        id="search-input"
        class="block w-full pl-10 pr-3 py-3 border border-gray-300 rounded-lg leading-5 bg-white placeholder-gray-500 focus:outline-none focus:placeholder-gray-400 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
        placeholder="Buscar por puesto..."
      />
    </div>
  </div>

  <div class="space-y-6" id="jobs-container">
    <div class="text-center py-12" id="loading-state">
      <div class="mx-auto w-24 h-24 bg-gray-100 rounded-full flex items-center justify-center mb-4 animate-pulse">
        <BookOpen class="w-12 h-12 text-gray-400" />
      </div>
      <h3 class="text-lg font-medium text-gray-900 mb-2">Cargando empleos...</h3>
      <p class="text-sm text-gray-500">Esto puede tardar unos segundos</p>
    </div>
  </div>

  <div id="pagination-container" class="mt-8 hidden">
    <div class="flex items-center justify-between border-t border-gray-200 pt-6">
      <div class="flex-1 flex justify-start">
        <p class="text-sm text-gray-700">
          Mostrando <span class="font-medium" id="page-start">1</span> a
          <span class="font-medium" id="page-end">10</span> de
          <span class="font-medium" id="total-jobs">0</span> empleos
        </p>
      </div>

      <div class="flex-1 flex justify-center">
        <nav class="relative z-0 inline-flex rounded-md shadow-sm -space-x-px" aria-label="Pagination">
          <button id="prev-button" class="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed transition-colors duration-200">
            <span class="sr-only">Anterior</span>
            <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
            </svg>
          </button>
          <div id="page-numbers" class="flex"></div>
          <button id="next-button" class="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed transition-colors duration-200">
            <span class="sr-only">Siguiente</span>
            <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
            </svg>
          </button>
        </nav>
      </div>

      <div class="flex-1 flex justify-end">
        <select id="items-per-page" class="border border-gray-300 rounded-md text-sm px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
          <option value="5">5 por página</option>
          <option value="10" selected>10 por página</option>
          <option value="20">20 por página</option>
          <option value="50">50 por página</option>
        </select>
      </div>
    </div>
  </div>
</div>

<script>
  const API_URL = "https://intranet.universidad-une.com/api/getjobs";

  let allJobs = [];
  let filteredJobs = [];
  let currentPage = 1;
  let itemsPerPage = 10;

  const formatDate = (dateString) => {
    const date = new Date(dateString);
    return date.toLocaleDateString("es-MX", {
      year: "numeric",
      month: "long",
      day: "numeric",
    });
  };

  const getBadgeColor = (count) => {
    if (count >= 3) return "bg-green-100 text-green-800";
    if (count >= 2) return "bg-yellow-100 text-yellow-800";
    return "bg-red-100 text-red-800";
  };

  const capitalizarPrimeraLetra = (texto) => {
    if (!texto) return "";
    texto = texto.replace(/\*\*/g, "").trim();
    return texto.charAt(0).toUpperCase() + texto.slice(1).toLowerCase();
  };

  const createJobCard = (job) => {
    const badgeColor = getBadgeColor(job.puestos_disponibles);
    const formattedDate = formatDate(job.fecha_publicacion);

    return `
    <div class="bg-white rounded-lg shadow-md border border-gray-200 hover:shadow-lg transition-shadow duration-300 animate-fade-in">
      <div class="p-6">
        <div class="flex justify-between items-start mb-4">
          <div class="flex-1">
            <h2 class="text-xl font-medium normal-case text-gray-900 mb-2">${capitalizarPrimeraLetra(job.puesto)}</h2>
            <div class="flex items-center text-gray-600">
              <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"></path>
              </svg>
              <span class="text-sm">${job.ubicacion}</span>
            </div>
          </div>
          <div class="px-3 py-1 rounded-full text-xs font-medium ${badgeColor}">
            <svg class="w-3 h-3 inline mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197M13 7a4 4 0 11-8 0 4 4 0 018 0z"></path>
            </svg>
            ${job.puestos_disponibles} ${job.puestos_disponibles === 1 ? "puesto" : "puestos"}
          </div>
        </div>

        <div class="flex items-center justify-between pt-4 border-t border-gray-100">
          <div class="flex items-center text-gray-500 text-sm">
            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
            </svg>
            <span>Publicado el ${formattedDate}</span>
          </div>
          
          <a href="/acerca/empleo/detalles?id=${job.id_empleo}" class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md text-sm font-medium transition-colors duration-200 flex items-center">
            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.247 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"></path>
            </svg>
            Ver detalles
          </a>
        </div>
      </div>
    </div>
  `;
  };

  const updatePaginationInfo = () => {
    const start = (currentPage - 1) * itemsPerPage + 1;
    const end = Math.min(currentPage * itemsPerPage, filteredJobs.length);

    document.getElementById("page-start").textContent = start;
    document.getElementById("page-end").textContent = end;
    document.getElementById("total-jobs").textContent = filteredJobs.length;
  };

  const generatePageNumbers = () => {
    const totalPages = Math.ceil(filteredJobs.length / itemsPerPage);
    const container = document.getElementById("page-numbers");
    container.innerHTML = "";

    let startPage = Math.max(1, currentPage - 2);
    let endPage = Math.min(totalPages, currentPage + 2);

    if (currentPage <= 3) endPage = Math.min(5, totalPages);
    if (currentPage >= totalPages - 2) startPage = Math.max(1, totalPages - 4);

    if (startPage > 1) {
      container.innerHTML += `<button class="page-number relative inline-flex items-center px-4 py-2 border border-gray-300 bg-white text-sm font-medium text-gray-700 hover:bg-gray-50" data-page="1">1</button>`;
      if (startPage > 2) {
        container.innerHTML += `<span class="relative inline-flex items-center px-4 py-2 border border-gray-300 bg-white text-sm font-medium text-gray-700">...</span>`;
      }
    }

    for (let i = startPage; i <= endPage; i++) {
      const isActive = i === currentPage;
      container.innerHTML += `
        <button class="page-number relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium ${
          isActive
            ? "z-10 bg-blue-600 border-blue-600 text-white"
            : "bg-white text-gray-700 hover:bg-gray-50"
        }" data-page="${i}">${i}</button>
      `;
    }

    if (endPage < totalPages) {
      if (endPage < totalPages - 1) {
        container.innerHTML += `<span class="relative inline-flex items-center px-4 py-2 border border-gray-300 bg-white text-sm font-medium text-gray-700">...</span>`;
      }
      container.innerHTML += `<button class="page-number relative inline-flex items-center px-4 py-2 border border-gray-300 bg-white text-sm font-medium text-gray-700 hover:bg-gray-50" data-page="${totalPages}">${totalPages}</button>`;
    }

    document.querySelectorAll(".page-number").forEach((btn) => {
      btn.addEventListener("click", () => goToPage(parseInt(btn.dataset.page)));
    });
  };

  const goToPage = (page) => {
    const totalPages = Math.ceil(filteredJobs.length / itemsPerPage);
    if (page < 1 || page > totalPages) return;

    currentPage = page;
    renderCurrentPage();
    window.scrollTo({ top: 0, behavior: "smooth" });
  };

  const renderCurrentPage = () => {
    const startIndex = (currentPage - 1) * itemsPerPage;
    const jobsToShow = filteredJobs.slice(startIndex, startIndex + itemsPerPage);

    document.getElementById("jobs-container").innerHTML = jobsToShow.map(createJobCard).join("");

    updatePaginationControls();
    updatePaginationInfo();
    generatePageNumbers();
  };

  const updatePaginationControls = () => {
    const totalPages = Math.ceil(filteredJobs.length / itemsPerPage);
    document.getElementById("prev-button").disabled = currentPage === 1;
    document.getElementById("next-button").disabled = currentPage === totalPages;
  };

  const filterJobs = (searchTerm) => {
    const term = searchTerm.toLowerCase().trim();

    if (term === "") {
      filteredJobs = [...allJobs];
    } else {
      filteredJobs = allJobs.filter(
        (job) =>
          job.puesto.toLowerCase().includes(term) ||
          job.ubicacion.toLowerCase().includes(term)
      );
    }

    currentPage = 1;

    if (filteredJobs.length === 0) {
      document.getElementById("jobs-container").innerHTML = `
        <div class="text-center py-12">
          <div class="mx-auto w-24 h-24 bg-gray-100 rounded-full flex items-center justify-center mb-4">
            <svg class="w-12 h-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
            </svg>
          </div>
          <h3 class="text-lg font-medium text-gray-900 mb-2">No se encontraron empleos</h3>
          <p class="text-gray-600">Intenta con otros términos de búsqueda.</p>
        </div>
      `;
      document.getElementById("pagination-container").classList.add("hidden");
      document.getElementById("jobs-count").textContent = "0 oportunidades laborales encontradas";
    } else {
      document.getElementById("pagination-container").classList.remove("hidden");
      document.getElementById("jobs-count").textContent =
        `${filteredJobs.length} ${filteredJobs.length === 1 ? "oportunidad laboral encontrada" : "oportunidades laborales encontradas"}`;
      renderCurrentPage();
    }
  };

  const showEmptyState = () => {
    document.getElementById("jobs-container").innerHTML = `
      <div class="text-center py-12">
        <div class="mx-auto w-24 h-24 bg-gray-100 rounded-full flex items-center justify-center mb-4">
          <svg class="w-12 h-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.247 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"></path>
          </svg>
        </div>
        <h3 class="text-lg font-medium text-gray-900 mb-2">No hay empleos disponibles</h3>
        <p class="text-gray-600">Revisa más tarde para ver nuevas oportunidades laborales.</p>
      </div>
    `;
    document.getElementById("pagination-container").classList.add("hidden");
  };

  const showError = (errorType, errorMessage) => {
    let iconColor = "text-amber-500";
    let bgColor = "bg-amber-50";
    let title = "Problema de conexión";
    let message = "";
    let suggestion = "";

    switch(errorType) {
      case 'timeout':
        title = "La conexión está tardando más de lo usual";
        message = "El servidor está tomando demasiado tiempo en responder.";
        suggestion = "Esto puede deberse a tu conexión a internet o a que el servidor está ocupado.";
        break;
      case 'offline':
        iconColor = "text-red-500";
        bgColor = "bg-red-50";
        title = "Sin conexión a internet";
        message = "Parece que no tienes conexión a internet en este momento.";
        suggestion = "Verifica tu conexión Wi-Fi o datos móviles e intenta nuevamente.";
        break;
      case 'network':
        iconColor = "text-orange-500";
        bgColor = "bg-orange-50";
        title = "Error de red";
        message = "No pudimos conectar con el servidor.";
        suggestion = "Esto puede deberse a problemas temporales de red. Intenta de nuevo en unos momentos.";
        break;
      default:
        iconColor = "text-red-500";
        bgColor = "bg-red-50";
        title = "Error al cargar empleos";
        message = errorMessage || "Ocurrió un problema inesperado.";
        suggestion = "Por favor, intenta recargar la página.";
    }

    document.getElementById("jobs-container").innerHTML = `
      <div class="text-center py-12 px-4">
        <div class="mx-auto w-20 h-20 ${bgColor} rounded-full flex items-center justify-center mb-4">
          <svg class="w-10 h-10 ${iconColor}" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"></path>
          </svg>
        </div>
        <h3 class="text-xl font-semibold text-gray-900 mb-2">${title}</h3>
        <p class="text-gray-700 mb-2 max-w-md mx-auto">${message}</p>
        <p class="text-sm text-gray-600 mb-6 max-w-md mx-auto">${suggestion}</p>
        <div class="flex flex-col sm:flex-row gap-3 justify-center items-center">
          <button onclick="window.location.reload()" class="bg-blue-600 hover:bg-blue-700 text-white font-medium py-3 px-6 rounded-lg transition-colors duration-200 flex items-center gap-2 shadow-sm">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
            </svg>
            Reintentar
          </button>
          ${errorType === 'offline' ? '<a href="/" class="text-gray-600 hover:text-gray-800 font-medium py-3 px-6 rounded-lg transition-colors duration-200">Volver al inicio</a>' : ''}
        </div>
        <div class="mt-8 pt-6 border-t border-gray-200">
          <p class="text-sm text-gray-500 mb-2">¿Necesitas ayuda?</p>
          <a href="mailto:informes@universidad-une.com" class="text-blue-600 hover:text-blue-700 font-medium text-sm">informes@universidad-une.com</a>
        </div>
      </div>
    `;
    document.getElementById("pagination-container").classList.add("hidden");
  };

  const fetchJobs = async () => {
    try {
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 15000);

      const response = await fetch(API_URL, { signal: controller.signal });
      
      clearTimeout(timeoutId);
      
      if (!response.ok)
        throw new Error(`Error ${response.status}: ${response.statusText}`);

      const { data = [] } = await response.json();
      allJobs = data
        .filter((job) => job.puestos_disponibles > 0)
        .sort((a, b) => new Date(b.fecha_publicacion) - new Date(a.fecha_publicacion));

      filteredJobs = [...allJobs];

      document.getElementById("jobs-count").textContent =
        `${filteredJobs.length} ${filteredJobs.length === 1 ? "oportunidad laboral encontrada" : "oportunidades laborales encontradas"}`;

      if (filteredJobs.length === 0) {
        showEmptyState();
      } else {
        document.getElementById("pagination-container").classList.remove("hidden");
        renderCurrentPage();
      }
    } catch (error) {
      console.error("[JOBS] Error:", error);
      
      let errorType = 'unknown';
      let errorMsg = '';
      
      if (error.name === 'AbortError') {
        errorType = 'timeout';
        errorMsg = "La conexión tardó demasiado tiempo";
      } else if (!navigator.onLine) {
        errorType = 'offline';
        errorMsg = "Sin conexión a internet";
      } else if (error.message === "Failed to fetch" || error.name === "TypeError") {
        errorType = 'network';
        errorMsg = "Error de conexión";
      } else {
        errorType = 'server';
        errorMsg = error.message;
      }
      
      document.getElementById("jobs-count").textContent = errorMsg;
      showError(errorType, error.message);
    }
  };

  document.addEventListener("DOMContentLoaded", () => {
    const searchInput = document.getElementById("search-input");
    let searchTimeout;

    searchInput.addEventListener("input", (e) => {
      clearTimeout(searchTimeout);
      searchTimeout = setTimeout(() => {
        filterJobs(e.target.value);
      }, 300);
    });

    document.getElementById("prev-button").addEventListener("click", () => goToPage(currentPage - 1));
    document.getElementById("next-button").addEventListener("click", () => goToPage(currentPage + 1));
    document.getElementById("items-per-page").addEventListener("change", (e) => {
      itemsPerPage = parseInt(e.target.value);
      currentPage = 1;
      renderCurrentPage();
    });

    fetchJobs();
  });
</script>

<style>
  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .animate-fade-in {
    animation: fadeIn 0.5s ease-out;
  }

  .animate-pulse {
    animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
  }

  @keyframes pulse {
    0%,
    100% {
      opacity: 1;
    }
    50% {
      opacity: 0.5;
    }
  }
</style>