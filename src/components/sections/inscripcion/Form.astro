---
import { asesoresPorPlantel } from "../../../helpers/asesoresPorPlantel";
import { educationData } from "../../../helpers/educationData";

// Función para extraer todas las carreras disponibles por plantel desde educationData
function getCarrerasPorPlantel() {
  const carrerasPorPlantel = {};

  Object.keys(educationData).forEach((nivelEducativo) => {
    const carreras = educationData[nivelEducativo];

    Object.keys(carreras).forEach((nombreCarrera) => {
      const planteles = carreras[nombreCarrera];

      Object.keys(planteles).forEach((plantel) => {
        if (!carrerasPorPlantel[plantel]) {
          carrerasPorPlantel[plantel] = [];
        }

        if (!carrerasPorPlantel[plantel].includes(nombreCarrera)) {
          carrerasPorPlantel[plantel].push(nombreCarrera);
        }
      });
    });
  });

  return carrerasPorPlantel;
}

const carrerasPorPlantel = getCarrerasPorPlantel();
---

<section class="py-16 bg-gray-50">
  <div class="container mx-auto px-4">
    <form class="max-w-6xl mx-auto space-y-8">
      <!-- Datos Académicos -->
      <div class="bg-white rounded-xl shadow-sm p-8">
        <h3
          class="text-2xl font-bold text-gray-900 mb-6 pb-3 border-b border-gray-200"
        >
          Datos Académicos
        </h3>

        <div class="grid md:grid-cols-3 gap-6">
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2"
              >Apellido paterno *</label
            >
            <input
              type="text"
              class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2"
              >Apellido materno *</label
            >
            <input
              type="text"
              class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2"
              >Nombre(s) *</label
            >
            <input
              type="text"
              class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
          </div>
        </div>
      </div>

      <!-- Domicilio -->
      <div class="bg-white rounded-xl shadow-sm p-8">
        <h3
          class="text-2xl font-bold text-gray-900 mb-6 pb-3 border-b border-gray-200"
        >
          Domicilio
        </h3>

        <div class="space-y-6">
          <div class="grid md:grid-cols-2 gap-6">
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2"
                >Calle y Número *</label
              >
              <input
                type="text"
                class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2"
                >Colonia</label
              >
              <input
                type="text"
                class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
            </div>
          </div>

          <div class="grid md:grid-cols-4 gap-6">
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2"
                >Código Postal *</label
              >
              <input
                type="text"
                class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2"
                >Municipio *</label
              >
              <input
                type="text"
                class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2"
                >Estado *</label
              >
              <input
                type="text"
                value="Jalisco"
                class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2"
                >País *</label
              >
              <input
                type="text"
                value="México"
                class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
            </div>
          </div>

          <div class="grid md:grid-cols-3 gap-6">
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2"
                >Teléfono *</label
              >
              <input
                type="tel"
                class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2"
                >Celular *</label
              >
              <input
                type="tel"
                class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2"
                >Correo</label
              >
              <input
                type="email"
                class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
            </div>
          </div>

          <div class="grid md:grid-cols-2 gap-6">
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2"
                >Fecha de Nacimiento *</label
              >
              <input
                type="date"
                class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2"
                >Edad *</label
              >
              <input
                type="text"
                class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
            </div>
          </div>

          <div class="grid md:grid-cols-2 gap-6">
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2"
                >Sexo *</label
              >
              <select
                class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              >
                <option value="">Seleccione</option>
                <option value="Femenino">Femenino</option>
                <option value="Masculino">Masculino</option>
              </select>
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2"
                >Estado Civil *</label
              >
              <select
                class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              >
                <option value="">Seleccione</option>
                <option value="Soltero">Soltero/a</option>
                <option value="Casado">Casado/a</option>
                <option value="Viudo">Viudo/a</option>
                <option value="Divorciado">Divorciado/a</option>
                <option value="Union libre">Unión libre</option>
              </select>
            </div>
          </div>

          <div class="grid md:grid-cols-2 gap-6">
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2"
                >Nacionalidad *</label
              >
              <select
                class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              >
                <option value="Mexicana">Mexicana</option>
              </select>
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2"
                >Ocupación *</label
              >
              <input
                type="text"
                class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
            </div>
          </div>

          <div class="grid md:grid-cols-3 gap-6">
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2"
                >C.U.R.P. *</label
              >
              <input
                type="text"
                class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2"
                >R.F.C.</label
              >
              <input
                type="text"
                class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2"
                >Tipo de Sangre *</label
              >
              <select
                class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              >
                <option value="">Seleccione</option>
                <option value="O+">O+</option>
                <option value="O-">O-</option>
                <option value="A+">A+</option>
                <option value="A-">A-</option>
                <option value="B+">B+</option>
                <option value="B-">B-</option>
                <option value="AB+">AB+</option>
                <option value="AB-">AB-</option>
              </select>
            </div>
          </div>
        </div>
      </div>

      <!-- Datos Académicos Section 2 -->
      <div class="bg-white rounded-xl shadow-sm p-8">
        <h3
          class="text-2xl font-bold text-gray-900 mb-6 pb-3 border-b border-gray-200"
        >
          Datos Académicos
        </h3>

        <div class="space-y-6">
          <div class="grid md:grid-cols-3 gap-6">
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">
                Plantel *
              </label>
              <select
                name="plantel"
                class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              >
                <option value="">Seleccione</option>
                <option value="Centro">Centro</option>
                <option value="Centro médico">Centro médico</option>
                <option value="Chapultepec">Chapultepec</option>
                <option value="Milenio">Milenio</option>
                <option value="Tesistán">Tesistán</option>
                <option value="Tlajomulco">Tlajomulco</option>
                <option value="Tlaquepaque">Tlaquepaque</option>
                <option value="Tonalá">Tonalá</option>
                <option value="Torre Quetzal">Torre Quetzal</option>
                <option value="Torre UNE Milenio">Torre UNE Milenio</option>
                <option value="Zapopan">Zapopan</option>
                <option value="Tepatitlán">Tepatitlán</option>
                <option value="Av. México">Av. México</option>
                <option value="Campus Puerto Vallarta"
                  >Campus Puerto Vallarta</option
                >
                <option value="Caracol">Caracol</option>
                <option value="Las Juntas">Las Juntas</option>
                <option value="Plaza del Sol">Plaza del Sol</option>
                <option value="UNE en línea">UNE en línea</option>
                <option value="Centro de idiomas">Centro de idiomas</option>
              </select>
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">
                Turno *
              </label>
              <select
                name="turno"
                class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              >
                <option value="">Seleccione</option>
                <option value="Matutino">Matutino</option>
                <option value="Vespertino">Vespertino</option>
                <option value="Nocturno">Nocturno</option>
                <option value="Mixto">Mixto</option>
                <option value="Sabatino">Sabatino</option>
                <option value="En línea">En línea</option>
              </select>
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">
                Escuela de proc. *
              </label>
              <input
                type="text"
                name="escuela_proc"
                class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                placeholder="Ingrese escuela de procedencia"
              />
            </div>
          </div>

          <div class="grid md:grid-cols-2 gap-6">
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">
                Carrera *
              </label>
              <select
                name="carrera"
                class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              >
                <option value="">Seleccione</option>
              </select>
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">
                Asesor *
              </label>
              <select
                name="asesor"
                class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              >
                <option value="">Seleccione</option>
              </select>
            </div>
          </div>
        </div>
      </div>

      <!-- Datos Familiares -->
      <div class="bg-white rounded-xl shadow-sm p-8">
        <h3
          class="text-2xl font-bold text-gray-900 mb-6 pb-3 border-b border-gray-200"
        >
          Datos Familiares
        </h3>

        <div class="space-y-6">
          <div class="grid md:grid-cols-2 gap-6">
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2"
                >Nombre del padre o tutor *</label
              >
              <input
                type="text"
                class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2"
                >Ocupación *</label
              >
              <input
                type="text"
                class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
            </div>
          </div>

          <div class="grid md:grid-cols-2 gap-6">
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2"
                >Domicilio *</label
              >
              <input
                type="text"
                class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2"
                >Teléfono *</label
              >
              <input
                type="tel"
                class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
            </div>
          </div>

          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2"
              >Celular *</label
            >
            <input
              type="tel"
              class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
          </div>
        </div>
      </div>

      <!-- ¿Por qué medio te enteraste de UNE? -->
      <div class="bg-white rounded-xl shadow-sm p-8">
        <h3
          class="text-2xl font-bold text-gray-900 mb-6 pb-3 border-b border-gray-200"
        >
          ¿Por qué medio te enteraste de UNE?
        </h3>

        <div class="grid md:grid-cols-3 gap-6">
          <div class="space-y-3">
            <div class="space-y-2">
              <label class="flex items-center gap-2">
                <input
                  type="checkbox"
                  class="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                />
                <span class="text-sm"
                  >Volante o cruceros, trípticos y dípticos</span
                >
              </label>
              <label class="flex items-center gap-2">
                <input
                  type="checkbox"
                  class="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                />
                <span class="text-sm">Visita en tu escuela</span>
              </label>
              <label class="flex items-center gap-2">
                <input
                  type="checkbox"
                  class="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                />
                <span class="text-sm">Página web UNE</span>
              </label>
            </div>
          </div>

          <div class="space-y-3">
            <div class="h-8"></div>
            <!-- Spacer for alignment -->
            <div class="space-y-2">
              <label class="flex items-center gap-2">
                <input
                  type="checkbox"
                  class="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                />
                <span class="text-sm">Redes sociales UNE</span>
              </label>
              <label class="flex items-center gap-2">
                <input
                  type="checkbox"
                  class="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                />
                <span class="text-sm">Promoción en stands</span>
              </label>
              <label class="flex items-center gap-2">
                <input
                  type="checkbox"
                  class="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                />
                <span class="text-sm">Televisión</span>
              </label>
            </div>
          </div>

          <div class="space-y-3">
            <div class="h-8"></div>
            <!-- Spacer for alignment -->
            <div class="space-y-2">
              <label class="flex items-center gap-2">
                <input
                  type="checkbox"
                  class="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                />
                <span class="text-sm">Espectaculares</span>
              </label>
              <label class="flex items-center gap-2">
                <input
                  type="checkbox"
                  class="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                />
                <span class="text-sm">Recomendación</span>
              </label>
            </div>
          </div>
        </div>
      </div>

      <!-- Razones para elegir UNE -->
      <div class="bg-white rounded-xl shadow-sm p-8">
        <h3
          class="text-2xl font-bold text-gray-900 mb-6 pb-3 border-b border-gray-200"
        >
          Menciona la principal razón por la que elegiste UNE como tu
          Universidad
        </h3>
        <p class="text-gray-700 mb-6">Selecciona las 5 más importantes:</p>

        <div class="grid md:grid-cols-3 gap-6">
          <div class="space-y-3">
            <div class="space-y-2">
              <label class="flex items-center gap-2">
                <input
                  type="checkbox"
                  class="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                />
                <span class="text-sm">Ubicación</span>
              </label>
              <label class="flex items-center gap-2">
                <input
                  type="checkbox"
                  class="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                />
                <span class="text-sm">Plan de estudios</span>
              </label>
              <label class="flex items-center gap-2">
                <input
                  type="checkbox"
                  class="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                />
                <span class="text-sm">Horarios</span>
              </label>
              <label class="flex items-center gap-2">
                <input
                  type="checkbox"
                  class="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                />
                <span class="text-sm">Oferta académica</span>
              </label>
            </div>
          </div>

          <div class="space-y-3">
            <div class="space-y-2">
              <label class="flex items-center gap-2">
                <input
                  type="checkbox"
                  class="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                />
                <span class="text-sm">Rechazo de la U.D.G.</span>
              </label>
              <label class="flex items-center gap-2">
                <input
                  type="checkbox"
                  class="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                />
                <span class="text-sm">Instalaciones</span>
              </label>
              <label class="flex items-center gap-2">
                <input
                  type="checkbox"
                  class="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                />
                <span class="text-sm">Nivel académico</span>
              </label>
            </div>
          </div>

          <div class="space-y-3">
            <div class="space-y-2">
              <label class="flex items-center gap-2">
                <input
                  type="checkbox"
                  class="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                />
                <span class="text-sm">Rechazo de U. de G.</span>
              </label>
              <label class="flex items-center gap-2">
                <input
                  type="checkbox"
                  class="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                />
                <span class="text-sm">Mejor opción</span>
              </label>
              <label class="flex items-center gap-2">
                <input
                  type="checkbox"
                  class="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                />
                <span class="text-sm">Incorporación</span>
              </label>
              <label class="flex items-center gap-2">
                <input
                  type="checkbox"
                  class="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                />
                <span class="text-sm">Otro</span>
              </label>
            </div>
          </div>
        </div>
      </div>

      <!-- COMPROMISO -->
      <div class="bg-white rounded-xl shadow-sm p-8">
        <div class="bg-blue-50 p-6 rounded-lg">
          <h4 class="font-semibold text-blue-900 mb-4">COMPROMISO</h4>
          <p class="text-sm text-blue-800 mb-4">
            Por este medio de la presente solicitud, me comprometo a respetar y
            hacer valer el reglamento que rige a la Universidad de
            Especialidades en todos sus términos y me someto a los
            procedimientos del Departamento de Educación, Comercio de Idiomas y
            Sanciones correspondientes.
          </p>

          <div class="grid md:grid-cols-3 gap-6">
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2"
                >Día *</label
              >
              <input
                type="number"
                min="1"
                max="31"
                class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
            </div>
            <!-- Campo de Mes en MAYÚSCULAS -->
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2"
                >Mes *</label
              >
              <select
                class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              >
                <option value="">Seleccione</option>
                <option value="Enero">Enero</option>
                <option value="Febrero">Febrero</option>
                <option value="Marzo">Marzo</option>
                <option value="Abril">Abril</option>
                <option value="Mayo">Mayo</option>
                <option value="Junio">Junio</option>
                <option value="Julio">Julio</option>
                <option value="Agosto">Agosto</option>
                <option value="Septiembre">Septiembre</option>
                <option value="Octubre">Octubre</option>
                <option value="Noviembre">Noviembre</option>
                <option value="Diciembre">Diciembre</option>
              </select>
            </div>

            <!-- Campo de Año como SELECT con colchón de años -->
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2"
                >Año *</label
              >
              <select
                class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              >
                <option value="">Seleccione</option>
                <!-- Colchón de años: desde 2020 hasta 2030 -->
                <option value="2020">2020</option>
                <option value="2021">2021</option>
                <option value="2022">2022</option>
                <option value="2023">2023</option>
                <option value="2024">2024</option>
                <option value="2025" selected>2025</option>
                <option value="2026">2026</option>
                <option value="2027">2027</option>
                <option value="2028">2028</option>
                <option value="2029">2029</option>
                <option value="2030">2030</option>
              </select>
            </div>
          </div>
        </div>

        <div class="mt-8 space-y-4">
          <div class="text-center">
            <p class="text-sm text-gray-600 mb-4">ATENTAMENTE,</p>
            <p class="text-sm text-gray-600 mb-4">FIRMA DEL ASPIRANTE</p>

            <!-- Área de firma -->
            <div class="w-64 mx-auto">
              <div
                class="h-32 border-2 border-gray-300 border-dashed rounded-lg flex items-center justify-center p-2"
              >
                <canvas id="firmaCanvas" class="w-full h-full"></canvas>
                <input type="hidden" id="firmaImagen" name="firmaImagen" />
              </div>

              <!-- Botón separado -->
              <div class="mt-4 flex justify-center">
                <button
                  id="limpiarFirma"
                  type="button"
                  class="bg-red-500 hover:bg-red-600 text-white font-semibold text-sm py-2 px-4 rounded-md transition-colors duration-200"
                  aria-label="Limpiar firma"
                  title="Limpiar firma"
                >
                  Limpiar firma
                </button>
              </div>
            </div>
          </div>

          <!-- Botones de acción -->
          <div
            class="text-center mt-8 flex flex-col md:flex-row justify-center gap-4"
          >
            <button
              id="btnGenerarPDF"
              type="button"
              class="bg-gray-600 hover:bg-gray-700 text-white font-bold py-4 px-12 rounded-lg transition-colors duration-200 text-lg"
              aria-label="GENERAR PDF"
              title="GENERAR PDF"
            >
              GENERAR PDF
            </button>
            <button
              type="submit"
              class="bg-red-600 hover:bg-red-700 text-white font-bold py-4 px-12 rounded-lg transition-colors duration-200 text-lg"
              aria-label="INSCRIBIRME"
              title="INSCRIBIRME"
            >
              INSCRIBIRME
            </button>
          </div>
        </div>
      </div>
    </form>
  </div>

  <!-- Modal de error -->
  <div
    id="error-modal"
    class="hidden fixed inset-0 bg-opacity-50 flex items-center justify-center z-50 p-4"
  >
    <div class="bg-white rounded-lg shadow-xl max-w-md w-full p-6">
      <div class="flex items-start mb-4">
        <div class="flex-shrink-0">
          <svg
            class="w-6 h-6 text-red-600"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"
            ></path>
          </svg>
        </div>
        <div class="ml-3 flex-1">
          <h3 class="text-lg font-medium text-gray-900 mb-2">
            Error al enviar solicitud
          </h3>
          <p id="modal-error-message" class="text-sm text-gray-600 mb-4"></p>
          <div
            class="text-sm text-gray-600 bg-gray-50 p-3 rounded border border-gray-200"
          >
            <p class="font-semibold mb-1">Si el problema persiste:</p>
            <p>Por favor, envíe su solicitud por correo a:</p>
            <a
              href="mailto:informes@universidad-une.com"
              class="text-blue-600 hover:text-blue-700 font-medium"
            >
              informes@universidad-une.com
            </a>
          </div>
        </div>
      </div>
      <div class="flex gap-3 mt-6">
        <button
          id="retry-button"
          class="flex-1 bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded-md font-medium transition-colors"
        >
          Intentar de nuevo
        </button>
        <button
          id="close-modal-button"
          class="flex-1 bg-gray-200 hover:bg-gray-300 text-gray-700 py-2 px-4 rounded-md font-medium transition-colors"
        >
          Cerrar
        </button>
      </div>
    </div>
  </div>
</section>

<script define:vars={{ asesoresPorPlantel, carrerasPorPlantel }}>
  // Ahora las variables están disponibles en el scope del script
  console.log("📊 Datos cargados:");
  console.log(
    "- Carreras por plantel:",
    Object.keys(carrerasPorPlantel).length,
    "planteles"
  );
  console.log(
    "- Asesores por plantel:",
    Object.keys(asesoresPorPlantel).length,
    "planteles"
  );

  // Función para actualizar las opciones de un select
  function updateSelectOptions(selectElement, options) {
    if (!selectElement) {
      console.error("❌ ERROR: selectElement es null o undefined");
      return;
    }

    selectElement.innerHTML = "";

    const defaultOption = document.createElement("option");
    defaultOption.value = "";
    defaultOption.textContent = "Seleccione";
    selectElement.appendChild(defaultOption);

    options.forEach((option) => {
      const newOption = document.createElement("option");
      newOption.value = option;
      newOption.textContent = option;
      selectElement.appendChild(newOption);
    });
  }

  // Función principal para actualizar carreras y asesores basado en el plantel
  function updateDatosAcademicos() {
    const plantelSelect = document.querySelector('select[name="plantel"]');
    const carreraSelect = document.querySelector('select[name="carrera"]');
    const asesorSelect = document.querySelector('select[name="asesor"]');

    if (!plantelSelect || !carreraSelect || !asesorSelect) {
      console.error(
        "❌ ERROR: No se encontraron todos los elementos select necesarios"
      );
      return;
    }

    const selectedPlantel = plantelSelect.value;

    // Actualizar carreras
    if (selectedPlantel && carrerasPorPlantel[selectedPlantel]) {
      updateSelectOptions(carreraSelect, carrerasPorPlantel[selectedPlantel]);
      console.log("✅ Carreras actualizadas para:", selectedPlantel);
    } else {
      updateSelectOptions(carreraSelect, []);
      console.log("⚠️ No hay carreras para el plantel seleccionado");
    }

    // Actualizar asesores
    if (selectedPlantel && asesoresPorPlantel[selectedPlantel]) {
      updateSelectOptions(asesorSelect, asesoresPorPlantel[selectedPlantel]);
      console.log("✅ Asesores actualizados para:", selectedPlantel);
    } else {
      console.log("⚠️ No hay asesores para el plantel seleccionado");
      updateSelectOptions(asesorSelect, []);
    }
  }

  // Inicializar el formulario cuando el DOM esté cargado
  document.addEventListener("DOMContentLoaded", function () {
    const plantelSelect = document.querySelector('select[name="plantel"]');

    if (plantelSelect) {
      plantelSelect.addEventListener("change", function () {
        updateDatosAcademicos();
      });

      updateDatosAcademicos();
    } else {
      console.error("❌ ERROR CRÍTICO: No se encontró el select de plantel");
    }
  });

  // Función de validación del formulario
  function validateForm() {
    const requiredFields = [
      'select[name="plantel"]',
      'select[name="turno"]',
      'input[name="escuela_proc"]',
      'select[name="carrera"]',
      'select[name="asesor"]',
    ];

    let isValid = true;
    const errors = [];

    requiredFields.forEach((selector) => {
      const field = document.querySelector(selector);
      const fieldName = field?.previousElementSibling?.textContent || selector;

      if (!field) {
        console.error(`❌ ERROR: Elemento no encontrado - ${selector}`);
        isValid = false;
        errors.push(`No se encontró el campo ${fieldName}`);
      } else {
        const value = field.value.trim();

        if (!value) {
          console.warn(`⚠️ ADVERTENCIA: Campo vacío - ${fieldName}`);
          isValid = false;
          errors.push(`El campo ${fieldName} es requerido`);
        }
      }
    });

    if (!isValid) {
      console.error("❌ ERRORES DE VALIDACIÓN:");
      errors.forEach((error, index) => {
        console.error(`   ${index + 1}. ${error}`);
      });
      alert(
        "Por favor complete todos los campos obligatorios:\n" +
          errors.join("\n")
      );
    }

    return isValid;
  }
</script>

<script is:inline>
  // Script para enviar formulario de inscripción de estudiante
  console.log("[STUDENT FORM] 📝 Script cargado");

  const apiUrl = "https://intranet.universidad-une.com/api/createstudent";

  // Función para obtener checkboxes seleccionados
  const getSelectedCheckboxes = (name) => {
    const checkboxes = document.querySelectorAll(
      `input[type="checkbox"][data-group="${name}"]:checked`
    );
    return Array.from(checkboxes).map((cb) => cb.value);
  };

  // Función para obtener todos los medios seleccionados
  const getMediosSeleccionados = () => {
    const medios = [];
    const checkboxes = document.querySelectorAll(
      'input[type="checkbox"][data-group="medios"]:checked'
    );
    checkboxes.forEach((cb) => {
      medios.push(cb.value);
    });
    return medios;
  };

  // Función para obtener razones seleccionadas (máximo 5)
  const getRazonesSeleccionadas = () => {
    const razones = [];
    const checkboxes = document.querySelectorAll(
      'input[type="checkbox"][data-group="razones"]:checked'
    );
    checkboxes.forEach((cb) => {
      razones.push(cb.value);
    });
    return razones;
  };

  // Función para validar formulario
  const validateFormsend = () => {
    console.log("[STUDENT FORM] 🔍 Validando formulario...");
    let isValid = true;
    const missingFields = [];
    return isValid;
  };

  // Función para calcular edad a partir de fecha de nacimiento
  const calcularEdad = (fechaNacimiento) => {
    const hoy = new Date();
    const nacimiento = new Date(fechaNacimiento);
    let edad = hoy.getFullYear() - nacimiento.getFullYear();
    const mes = hoy.getMonth() - nacimiento.getMonth();

    if (mes < 0 || (mes === 0 && hoy.getDate() < nacimiento.getDate())) {
      edad--;
    }

    return edad.toString();
  };

  // Auto-calcular edad cuando cambia la fecha de nacimiento
  document.addEventListener("DOMContentLoaded", () => {
    const fechaNacimientoInput = document.querySelector(
      'input[name="fechaNacimiento"]'
    );
    const edadInput = document.querySelector('input[name="edad"]');

    if (fechaNacimientoInput && edadInput) {
      fechaNacimientoInput.addEventListener("change", (e) => {
        const edad = calcularEdad(e.target.value);
        edadInput.value = edad;
        console.log("[STUDENT FORM] 🎂 Edad calculada:", edad);
      });
    }
  });

  // Función para preparar el payload
  const preparePayload = () => {
    console.log("[STUDENT FORM] 📦 Preparando payload...");

    // Función auxiliar para obtener valor por posición dentro de una sección específica
    function obtenerPorSeccion(seccionIndex, inputIndex, tipo = "text") {
      const secciones = document.querySelectorAll(
        ".bg-white.rounded-xl.shadow-sm"
      );
      if (secciones[seccionIndex]) {
        const inputs = secciones[seccionIndex].querySelectorAll(
          `input[type="${tipo}"]`
        );
        return inputs[inputIndex] ? inputs[inputIndex].value : "";
      }
      return "";
    }

    function obtenerSelectPorSeccion(seccionIndex, selectIndex) {
      const secciones = document.querySelectorAll(
        ".bg-white.rounded-xl.shadow-sm"
      );
      if (secciones[seccionIndex]) {
        const selects = secciones[seccionIndex].querySelectorAll("select");
        return selects[selectIndex] ? selects[selectIndex].value : "";
      }
      return "";
    }

    function obtenerValor(name) {
      const element = document.querySelector(`[name="${name}"]`);
      return element ? element.value : "";
    }

    // Obtener firma desde canvas
    const firmaCanvas = document.getElementById("firmaCanvas");
    const firmaImagen = "";

    // Construir fecha de registro (fecha actual)
    const fechaActual = new Date();
    const fechaRegistro = fechaActual.toISOString().split("T")[0];

    // Obtener día, mes y año del compromiso
    const dia = obtenerPorSeccion(6, 0, "number");
    const mes = obtenerSelectPorSeccion(6, 0);
    const año = obtenerSelectPorSeccion(6, 1);

    const payload = {
      // Nombres (sección 0)
      nombre: obtenerPorSeccion(0, 2),
      apellidoPaterno: obtenerPorSeccion(0, 0),
      apellidoMaterno: obtenerPorSeccion(0, 1),
      nombres: obtenerPorSeccion(0, 2),

      // Domicilio (sección 1)
      calleNumero: obtenerPorSeccion(1, 0),
      colonia: obtenerPorSeccion(1, 1),
      codigoPostal: obtenerPorSeccion(1, 2),
      municipio: obtenerPorSeccion(1, 3),
      estado: obtenerPorSeccion(1, 4) || "Jalisco",
      pais: obtenerPorSeccion(1, 5) || "México",

      // Contacto (sección 1)
      telefono: obtenerPorSeccion(1, 0, "tel"),
      celular: obtenerPorSeccion(1, 1, "tel"),
      correo: obtenerPorSeccion(1, 0, "email"),

      // Datos personales (sección 1)
      fechaNacimiento: obtenerPorSeccion(1, 0, "date"),
      edad: obtenerPorSeccion(1, 6),
      sexo: obtenerSelectPorSeccion(1, 0),
      estadoCivil: obtenerSelectPorSeccion(1, 1),
      nacionalidad: obtenerSelectPorSeccion(1, 2) || "MEXICANA",
      ocupacion: obtenerPorSeccion(1, 7),
      curp: obtenerPorSeccion(1, 8),
      rfc: obtenerPorSeccion(1, 9),
      tipoSangre: obtenerSelectPorSeccion(1, 3),

      // Datos académicos (sección 2)
      nivelEducativo: "LICENCIATURA",
      plantel: obtenerValor("plantel"),
      turno: obtenerValor("turno"),
      escuelaProcedencia: obtenerValor("escuela_proc"),
      promedio: obtenerPorSeccion(2, 0, "number") || "",
      carrera: obtenerValor("carrera"),
      asesor: obtenerValor("asesor"),

      // Datos familiares (sección 3)
      nombrePadreTutor: obtenerPorSeccion(3, 0),
      ocupacionPadre: obtenerPorSeccion(3, 1),
      domicilioPadre: obtenerPorSeccion(3, 2),
      telefonoPadre: obtenerPorSeccion(3, 0, "tel"),
      celularPadre: obtenerPorSeccion(3, 1, "tel"),

      // Medios y razones
      "Medios Seleccionados:": getMediosSeleccionados().join(", ") || "Ninguno",
      mediosSeleccionados: getMediosSeleccionados(),
      beneficiarios: getRazonesSeleccionadas().join(", ") || "Ninguno",

      // Fechas
      fechaRegistro: fechaRegistro,
      dateFields: fechaRegistro,
      dia: dia,
      mes: mes,
      año: año,

      // Firma
      firmaImagen: firmaImagen,
    };

    console.log("[STUDENT FORM] ✅ Payload preparado:", {
      ...payload,
      firmaImagen: firmaImagen
        ? `data:image/jpeg;base64,... (${firmaImagen.length} caracteres)`
        : "Sin firma",
    });

    return payload;
  };

  // Variables globales para el modal y reintento
  let lastPayload = null;
  const errorModal = document.getElementById("error-modal");
  const modalErrorMessage = document.getElementById("modal-error-message");
  const retryButton = document.getElementById("retry-button");
  const closeModalButton = document.getElementById("close-modal-button");

  // Función para mostrar el modal de error
  function showErrorModal(message) {
    if (modalErrorMessage && errorModal) {
      modalErrorMessage.textContent = message;
      errorModal.classList.remove("hidden");
    }
  }

  // Función para cerrar el modal
  function closeErrorModal() {
    if (errorModal) {
      errorModal.classList.add("hidden");
    }
  }

  // Event listeners del modal
  if (closeModalButton) {
    closeModalButton.addEventListener("click", closeErrorModal);
  }

  if (errorModal) {
    errorModal.addEventListener("click", (e) => {
      if (e.target === errorModal) {
        closeErrorModal();
      }
    });
  }

  // Función para enviar formulario
  const submitForm = async () => {
    console.log("[STUDENT FORM] 🚀 Iniciando envío del formulario");

    if (!validateFormsend()) {
      return;
    }

    const payload = preparePayload();
    lastPayload = payload;

    const submitButton = document.querySelector('button[type="submit"]');
    const originalText = submitButton?.textContent;
    if (submitButton) {
      submitButton.disabled = true;
      submitButton.textContent = "ENVIANDO...";
      submitButton.classList.add("opacity-50", "cursor-not-allowed");
    }

    try {
      console.log("[STUDENT FORM] 📡 Enviando POST a:", apiUrl);
      console.log("[STUDENT FORM] 📦 Payload completo:", payload);

      const response = await fetch(apiUrl, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json",
        },
        body: JSON.stringify(payload),
      });

      console.log("[STUDENT FORM] 📬 Respuesta recibida:", {
        status: response.status,
        statusText: response.statusText,
        ok: response.ok,
      });

      let responseData;
      try {
        responseData = await response.json();
        console.log("[STUDENT FORM] ✅ Respuesta JSON:", responseData);
      } catch (parseError) {
        console.error("[STUDENT FORM] ⚠️ No se pudo parsear JSON:", parseError);
        const textResponse = await response.text();
        console.log("[STUDENT FORM] 📄 Respuesta como texto:", textResponse);
        responseData = {
          message: textResponse || "Respuesta del servidor no válida",
        };
      }

      if (response.ok) {
        console.log("[STUDENT FORM] 🎉 Estudiante registrado exitosamente");
        window.location.href = "/contacto/gracias";
      } else {
        throw new Error(
          responseData.message ||
            `Error ${response.status}: ${response.statusText}`
        );
      }
    } catch (error) {
      console.error("[STUDENT FORM] ❌ Error al enviar formulario:", error);
      console.error("[STUDENT FORM] 📋 Detalles del error:", {
        message: error.message,
        name: error.name,
        stack: error.stack,
      });

      let errorMessage = "";
      if (!navigator.onLine) {
        errorMessage =
          "No hay conexión a internet. Por favor, verifica tu conexión e intenta nuevamente.";
      } else if (
        error.message === "Failed to fetch" ||
        error.name === "TypeError"
      ) {
        errorMessage =
          "No se pudo conectar con el servidor. Esto puede deberse a problemas de conexión a internet. Por favor, intenta más tarde.";
      } else {
        errorMessage = `Ocurrió un error al procesar tu inscripción: ${error.message}. Por favor, intenta nuevamente.`;
      }

      showErrorModal(errorMessage);
    } finally {
      if (submitButton) {
        submitButton.disabled = false;
        submitButton.textContent = originalText;
        submitButton.classList.remove("opacity-50", "cursor-not-allowed");
      }
    }
  };

  // Botón de reintentar en el modal
  if (retryButton) {
    retryButton.addEventListener("click", async () => {
      closeErrorModal();

      if (lastPayload) {
        console.log("[STUDENT FORM] 🔄 Reintentando envío...");

        const submitButton = document.querySelector('button[type="submit"]');
        const originalText = submitButton?.textContent;
        if (submitButton) {
          submitButton.disabled = true;
          submitButton.textContent = "ENVIANDO...";
          submitButton.classList.add("opacity-50", "cursor-not-allowed");
        }

        try {
          const response = await fetch(apiUrl, {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
              Accept: "application/json",
            },
            body: JSON.stringify(lastPayload),
          });

          let responseData;
          try {
            responseData = await response.json();
          } catch (parseError) {
            const textResponse = await response.text();
            responseData = {
              message: textResponse || "Respuesta del servidor no válida",
            };
          }

          if (response.ok) {
            console.log("[STUDENT FORM] 🎉 Reintento exitoso");
            window.location.href = "/contacto/gracias";
          } else {
            throw new Error(responseData.message || `Error ${response.status}`);
          }
        } catch (error) {
          console.error("[STUDENT FORM] ❌ Error en reintento:", error);

          let errorMessage = "";
          if (!navigator.onLine) {
            errorMessage =
              "No hay conexión a internet. Por favor, verifica tu conexión e intenta nuevamente.";
          } else if (
            error.message === "Failed to fetch" ||
            error.name === "TypeError"
          ) {
            errorMessage =
              "No se pudo conectar con el servidor. Esto puede deberse a problemas de conexión a internet. Por favor, intenta más tarde.";
          } else {
            errorMessage = `Ocurrió un error al procesar tu inscripción: ${error.message}. Por favor, intenta nuevamente.`;
          }

          showErrorModal(errorMessage);
        } finally {
          if (submitButton) {
            submitButton.disabled = false;
            submitButton.textContent = originalText;
            submitButton.classList.remove("opacity-50", "cursor-not-allowed");
          }
        }
      }
    });
  }

  // Event listener para el botón de submit
  document.addEventListener("DOMContentLoaded", () => {
    console.log("[STUDENT FORM] 🎯 Configurando event listeners");

    const submitButton = document.querySelector('button[type="submit"]');

    if (submitButton) {
      console.log("[STUDENT FORM] ✅ Botón de submit encontrado");

      submitButton.addEventListener("click", async (e) => {
        e.preventDefault();
        console.log("[STUDENT FORM] 🖱️ Click en botón INSCRIBIRME");
        await submitForm();
      });
    } else {
      console.error("[STUDENT FORM] ❌ No se encontró el botón de submit");
    }

    // Agregar data-group a los checkboxes para identificarlos
    const mediosCheckboxes = document.querySelectorAll(
      'input[type="checkbox"]'
    );
    mediosCheckboxes.forEach((cb, index) => {
      if (index < 8) {
        cb.setAttribute("data-group", "medios");
        cb.setAttribute(
          "value",
          cb.nextElementSibling?.textContent?.trim() || `medio${index}`
        );
      } else {
        cb.setAttribute("data-group", "razones");
        cb.setAttribute(
          "value",
          cb.nextElementSibling?.textContent?.trim() || `razon${index}`
        );

        cb.addEventListener("change", () => {
          const checkedRazones = document.querySelectorAll(
            'input[type="checkbox"][data-group="razones"]:checked'
          );
          if (checkedRazones.length > 5) {
            cb.checked = false;
            alert("Solo puedes seleccionar máximo 5 razones.");
          }
        });
      }
    });

    console.log("[STUDENT FORM] ✅ Configuración completa");
  });
</script>

<script>
  // Función para recolectar datos del formulario (usada por generarPDF)
  function recolectarDatosFormulario() {
    function obtenerPorSeccion(seccionIndex, inputIndex, tipo = "text") {
      const secciones = document.querySelectorAll(
        ".bg-white.rounded-xl.shadow-sm"
      );
      if (secciones[seccionIndex]) {
        const inputs = secciones[seccionIndex].querySelectorAll(
          `input[type="${tipo}"]`
        );
        return inputs[inputIndex] ? inputs[inputIndex].value : "";
      }
      return "";
    }

    function obtenerSelectPorSeccion(seccionIndex, selectIndex) {
      const secciones = document.querySelectorAll(
        ".bg-white.rounded-xl.shadow-sm"
      );
      if (secciones[seccionIndex]) {
        const selects = secciones[seccionIndex].querySelectorAll("select");
        return selects[selectIndex] ? selects[selectIndex].value : "";
      }
      return "";
    }

    function obtenerValor(name) {
      const element = document.querySelector(`[name="${name}"]`);
      return element ? element.value : "";
    }

    const firmaCanvas = document.getElementById("firmaCanvas");
    let firmaImagen = "";

    if (firmaCanvas) {
      try {
        firmaImagen = firmaCanvas.toDataURL("image/png");
      } catch (error) {
        console.warn("No se pudo obtener la firma del canvas:", error);
      }
    }

    const dia = obtenerPorSeccion(6, 0, "number");
    const mes = obtenerSelectPorSeccion(6, 0);
    const año = obtenerSelectPorSeccion(6, 1);

    const mediosSeleccionados = [];
    const mediosCheckboxes = document.querySelectorAll(
      'input[type="checkbox"][data-group="medios"]:checked'
    );
    mediosCheckboxes.forEach((cb) => {
      mediosSeleccionados.push(cb.value);
    });

    return {
      apellidoPaterno: obtenerPorSeccion(0, 0),
      apellidoMaterno: obtenerPorSeccion(0, 1),
      nombres: obtenerPorSeccion(0, 2),
      calleNumero: obtenerPorSeccion(1, 0),
      colonia: obtenerPorSeccion(1, 1),
      codigoPostal: obtenerPorSeccion(1, 2),
      municipio: obtenerPorSeccion(1, 3),
      estado: obtenerPorSeccion(1, 4) || "Jalisco",
      pais: obtenerPorSeccion(1, 5) || "México",
      telefono: obtenerPorSeccion(1, 0, "tel"),
      celular: obtenerPorSeccion(1, 1, "tel"),
      correo: obtenerPorSeccion(1, 0, "email"),
      fechaNacimiento: obtenerPorSeccion(1, 0, "date"),
      edad: obtenerPorSeccion(1, 6),
      sexo: obtenerSelectPorSeccion(1, 0),
      estadoCivil: obtenerSelectPorSeccion(1, 1),
      nacionalidad: obtenerSelectPorSeccion(1, 2) || "MEXICANA",
      ocupacion: obtenerPorSeccion(1, 7),
      curp: obtenerPorSeccion(1, 8),
      rfc: obtenerPorSeccion(1, 9),
      tipoSangre: obtenerSelectPorSeccion(1, 3),
      plantel: obtenerValor("plantel"),
      turno: obtenerValor("turno"),
      escuelaProcedencia: obtenerValor("escuela_proc"),
      carrera: obtenerValor("carrera"),
      asesor: obtenerValor("asesor"),
      nombrePadreTutor: obtenerPorSeccion(3, 0),
      ocupacionPadre: obtenerPorSeccion(3, 1),
      domicilioPadre: obtenerPorSeccion(3, 2),
      telefonoPadre: obtenerPorSeccion(3, 0, "tel"),
      celularPadre: obtenerPorSeccion(3, 1, "tel"),
      mediosSeleccionados: mediosSeleccionados,
      dia: dia,
      mes: mes,
      año: año,
      firmaImagen: firmaImagen,
    };
  }

  async function generarPDF() {
    try {
      console.log("🔄 Generando PDF...");
      alert("Generando PDF, por favor espere...");

      const { PDFDocument, rgb, StandardFonts } = await import("pdf-lib");

      const datosFormulario = recolectarDatosFormulario();
      console.log(datosFormulario);

      const inscripcionPath = "/pdfs/INSCRIPCION.pdf";
      console.log("Cargando plantilla principal...");

      const inscripcionResponse = await fetch(inscripcionPath);
      if (!inscripcionResponse.ok) {
        throw new Error(
          `Error al cargar ${inscripcionPath}: ${inscripcionResponse.status}`
        );
      }
      const inscripcionBytes = await inscripcionResponse.arrayBuffer();

      let requisitosPath = "";
      const carrera = datosFormulario.carrera?.toLowerCase() || "";

      if (carrera.includes("secundaria")) {
        requisitosPath = "/pdfs/secundaria_req.pdf";
      } else if (carrera.includes("bachillerato") || carrera.includes("bis")) {
        requisitosPath = "/pdfs/bachillerato_req.pdf";
      } else if (carrera.includes("licenciatura") || carrera.includes("lic.")) {
        requisitosPath = "/pdfs/licenciatura_req.pdf";
      } else if (
        carrera.includes("posgrado") ||
        carrera.includes("maestría") ||
        carrera.includes("maestria")
      ) {
        requisitosPath = "/pdfs/posgrado_req.pdf";
      }

      let requisitosBytes = null;
      if (requisitosPath) {
        console.log(`Cargando requisitos para carrera: ${carrera}`);
        try {
          const requisitosResponse = await fetch(requisitosPath);
          if (requisitosResponse.ok) {
            requisitosBytes = await requisitosResponse.arrayBuffer();
          } else {
            console.warn(
              `No se pudo cargar ${requisitosPath}, continuando sin requisitos`
            );
          }
        } catch (error) {
          console.warn(`Error al cargar requisitos: ${error.message}`);
        }
      }

      const pdfDoc = await PDFDocument.load(inscripcionBytes);

      if (requisitosBytes) {
        try {
          const requisitosDoc = await PDFDocument.load(requisitosBytes);
          const requisitosPages = await pdfDoc.copyPages(
            requisitosDoc,
            requisitosDoc.getPageIndices()
          );
          requisitosPages.forEach((page) => pdfDoc.addPage(page));
          console.log("Requisitos agregados al PDF");
        } catch (error) {
          console.warn("Error al agregar requisitos:", error);
        }
      }

      const pages = pdfDoc.getPages();
      const firstPage = pages[0];

      const font = await pdfDoc.embedFont(StandardFonts.Helvetica);
      const fontBold = await pdfDoc.embedFont(StandardFonts.HelveticaBold);

      const coordenadas = {
        apellidoPaterno: { x: 120, y: 598 },
        apellidoMaterno: { x: 390, y: 598 },
        nombres: { x: 110, y: 575 },
        calleNumero: { x: 110, y: 540 },
        colonia: { x: 70, y: 515 },
        codigoPostal: { x: 255, y: 515 },
        municipio: { x: 360, y: 515 },
        estado: { x: 70, y: 492 },
        pais: { x: 320, y: 492 },
        telefono: { x: 75, y: 470 },
        celular: { x: 205, y: 470 },
        correo: { x: 325, y: 470 },
        fechaNacimiento: { x: 135, y: 445 },
        edad: { x: 235, y: 445 },
        sexo: { x: 290, y: 445 },
        estadoCivil: { x: 400, y: 445 },
        nacionalidad: { x: 110, y: 423 },
        ocupacion: { x: 350, y: 423 },
        curp: { x: 70, y: 398 },
        rfc: { x: 238, y: 398 },
        tipoSangre: { x: 500, y: 398 },
        plantel: { x: 215, y: 710 },
        turno: { x: 210, y: 688 },
        escuelaProcedencia: { x: 450, y: 688 },
        carrera: { x: 235, y: 662 },
        asesor: { x: 235, y: 642 },
        nombrePadreTutor: { x: 160, y: 354 },
        ocupacionPadre: { x: 410, y: 354 },
        domicilioPadre: { x: 75, y: 330 },
        telefonoPadre: { x: 260, y: 330 },
        celularPadre: { x: 399, y: 330 },
        dia: { x: 200, y: 85 },
        mes: { x: 380, y: 85 },
        año: { x: 517, y: 83 },
      };

      for (const [campo, valor] of Object.entries(datosFormulario)) {
        if (coordenadas[campo] && valor) {
          let textoValor = valor.toString();

          if (campo === "año" && textoValor.length === 4) {
            textoValor = textoValor.slice(2);
          }

          try {
            firstPage.drawText(textoValor, {
              x: coordenadas[campo].x,
              y: coordenadas[campo].y,
              size: 10,
              font,
              color: rgb(0, 0, 0),
            });
          } catch (error) {
            console.warn(`Error al escribir campo ${campo}:`, error);
          }
        }
      }

      const coordenadasMedios = {
        "Volante o cruceros, trípticos y dípticos": { x: 29, y: 278 },
        "Visita en tu escuela": { x: 187, y: 278 },
        "Página web UNE": { x: 353, y: 278 },
        "Redes sociales UNE": { x: 505, y: 278 },
        "Promoción en stands": { x: 29, y: 252 },
        Televisión: { x: 187, y: 252 },
        Espectaculares: { x: 353, y: 253 },
        Recomendación: { x: 505, y: 253 },
        Ubicación: { x: 34, y: 191 },
        "Plan de estudios": { x: 325, y: 191 },
        Horarios: { x: 34, y: 172 },
        "Oferta académica": { x: 325, y: 172 },
        "Rechazo de la U.D.G.": { x: 142, y: 191 },
        Instalaciones: { x: 142, y: 172 },
        "Nivel académico": { x: 418, y: 172 },
        "Rechazo de U. de G.": { x: 418, y: 191 },
        "Mejor opción": { x: 528, y: 191 },
        Incorporación: { x: 235, y: 172 },
        Otro: { x: 528, y: 172 },
      };

      if (datosFormulario.mediosSeleccionados?.length > 0) {
        console.log(
          "Medios seleccionados:",
          datosFormulario.mediosSeleccionados
        );

        datosFormulario.mediosSeleccionados.forEach((medio) => {
          console.log(`Procesando medio: "${medio}"`);

          if (coordenadasMedios[medio]) {
            try {
              firstPage.drawText("X", {
                x: coordenadasMedios[medio].x,
                y: coordenadasMedios[medio].y,
                size: 12,
                font: fontBold,
                color: rgb(0, 0, 0),
              });
              console.log(`✅ Checkbox marcado: ${medio}`);
            } catch (error) {
              console.warn(`Error al marcar checkbox ${medio}:`, error);
            }
          } else {
            console.warn(`❌ No se encontraron coordenadas para: "${medio}"`);
          }
        });
      } else {
        console.log("No hay medios seleccionados");
      }

      if (datosFormulario.firmaImagen) {
        try {
          const firmaImage = await pdfDoc.embedPng(datosFormulario.firmaImagen);
          firstPage.drawImage(firmaImage, {
            x: 255,
            y: 4,
            width: 150,
            height: 75,
          });
          console.log("Firma agregada al PDF");
        } catch (firmaError) {
          console.warn("Error al procesar la firma:", firmaError);
        }
      }

      console.log("Guardando PDF...");
      const pdfBytes = await pdfDoc.save();

      const blob = new Blob([pdfBytes], { type: "application/pdf" });
      const url = URL.createObjectURL(blob);

      const a = document.createElement("a");
      a.href = url;
      a.download =
        `Inscripcion_UNE_${datosFormulario.nombres || "Formulario"}.pdf`.replace(
          /\s+/g,
          "_"
        );

      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);

      setTimeout(() => URL.revokeObjectURL(url), 1000);

      let mensaje = "PDF generado y descargado exitosamente";
      if (requisitosPath) {
        mensaje += `\nIncluye requisitos para: ${carrera}`;
      }
      alert(mensaje);

      console.log("✅ PDF generado exitosamente");
      return true;
    } catch (error) {
      console.error("Error al generar el PDF:", error);
      alert(
        `Error al generar el PDF: ${error.message}\nRevisa la consola para más detalles.`
      );
      return false;
    }
  }

  document.addEventListener("DOMContentLoaded", function () {
    const btnGenerarPDF = document.getElementById("btnGenerarPDF");

    if (btnGenerarPDF) {
      btnGenerarPDF.addEventListener("click", function (e) {
        e.preventDefault();
        console.log("🔄 Iniciando generación de PDF...");
        generarPDF();
      });
    } else {
      console.warn("Botón 'btnGenerarPDF' no encontrado");
    }
  });
</script>
<!-- Script para manejo de firma en canvas -->
<script>
  // Configuración del canvas para firma
  const canvas = document.getElementById("firmaCanvas");
  const ctx = canvas.getContext("2d");
  const limpiarFirmaBtn = document.getElementById("limpiarFirma");
  const firmaImagenInput = document.getElementById("firmaImagen");

  // Ajustar tamaño real del canvas al renderizar
  if (canvas) {
    canvas.width = canvas.offsetWidth;
    canvas.height = canvas.offsetHeight;
  }

  let dibujando = false;
  let xAnterior = 0;
  let yAnterior = 0;

  function obtenerCoordenadas(e) {
    const rect = canvas.getBoundingClientRect();
    const clientX = e.touches ? e.touches[0].clientX : e.clientX;
    const clientY = e.touches ? e.touches[0].clientY : e.clientY;
    return [clientX - rect.left, clientY - rect.top];
  }

  function empezarDibujo(e) {
    dibujando = true;
    [xAnterior, yAnterior] = obtenerCoordenadas(e);
  }

  function dibujar(e) {
    if (!dibujando) return;
    const [xActual, yActual] = obtenerCoordenadas(e);

    ctx.beginPath();
    ctx.moveTo(xAnterior, yAnterior);
    ctx.lineTo(xActual, yActual);
    ctx.stroke();

    [xAnterior, yAnterior] = [xActual, yActual];
  }

  function terminarDibujo() {
    dibujando = false;
  }

  // Configurar eventos del canvas solo si existe
  if (canvas) {
    // Eventos mouse
    canvas.addEventListener("mousedown", empezarDibujo);
    canvas.addEventListener("mousemove", dibujar);
    canvas.addEventListener("mouseup", terminarDibujo);
    canvas.addEventListener("mouseout", terminarDibujo);

    // Eventos touch
    canvas.addEventListener("touchstart", empezarDibujo);
    canvas.addEventListener("touchmove", (e) => {
      e.preventDefault();
      dibujar(e);
    });
    canvas.addEventListener("touchend", terminarDibujo);
    canvas.addEventListener("touchcancel", terminarDibujo);
  }

  // Limpiar firma
  if (limpiarFirmaBtn) {
    limpiarFirmaBtn.addEventListener("click", () => {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      if (firmaImagenInput) {
        firmaImagenInput.value = "";
      }
    });
  }
</script>
