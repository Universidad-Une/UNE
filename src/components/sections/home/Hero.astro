---
// src/components/MainSlider.astro
import ComercialMp4 from "@/assets/Videos/Comercial.mp4";
import Comercial_mobile from "@/assets/Videos/UNE_mobile.webm";
import ComercialWebm from "@/assets/Videos/Comercial.webm";
// Poster images para carga instantánea
import VideoPosterDesktop from "@/assets/Imagenes/Heros/video-poster.webp";
import VideoPosterMobile from "@/assets/Imagenes/Heros/video-poster-mobile.webp";
import { ArrowRight, CirclePause, CirclePlay } from "@lucide/astro";
---

<!-- Resource Hints para preload crítico -->
<link
  rel="preload"
  as="image"
  href={VideoPosterDesktop.src}
  media="(min-width: 768px)"
/>
<link
  rel="preload"
  as="image"
  href={VideoPosterMobile.src}
  media="(max-width: 767px)"
/>
<link
  rel="preload"
  as="video"
  href={ComercialWebm.src}
  media="(min-width: 768px)"
/>
<link
  rel="preload"
  as="video"
  href={Comercial_mobile.src}
  media="(max-width: 767px)"
/>

<div class="relative w-full">
  <div id="main-slider" class="splide relative">
    <div class="splide__track">
      <ul class="splide__list">
        <li class="splide__slide">
          <div
            class="relative w-full overflow-hidden h-[650px]"
            style="contain: layout style paint;"
          >
            <video
              id="mainVideo"
              autoplay
              muted
              playsinline
              preload="metadata"
              class="w-full h-full object-cover will-change-transform"
              poster={VideoPosterDesktop.src}
              style="transform: translateZ(0);"
            >
              <source
                src={ComercialWebm}
                type="video/webm"
                media="(min-width: 768px)"
              />
              <source
                src={ComercialMp4}
                type="video/mp4"
                media="(min-width: 768px)"
              />
              <source
                src={Comercial_mobile}
                type="video/webm"
                media="(max-width: 767px)"
              />
              Tu navegador no soporta video HTML5.
            </video>

            <!-- SEO H1 semánticamente correcto pero visualmente oculto -->
            <h1 class="sr-only">
              Universidad UNE - 30 años creyendo en ti -Universidad de
              especialidades
            </h1>

            <div
              class="absolute inset-0 bg-gradient-to-t from-black/70 via-transparent to-transparent pointer-events-none"
              style="will-change: opacity;"
            >
            </div>
          </div>
        </li>

        <li class="splide__slide">
          <div
            class="oferta-bg relative w-full overflow-hidden h-[650px] bg-cover bg-center bg-no-repeat flex flex-col items-center justify-center"
            style="contain: layout style paint;"
          >
            <div class="text-center">
              <h2
                class="text-white text-4xl sm:text-5xl lg:text-6xl font-bold mb-4"
              >
                OFERTA ACADÉMICA
              </h2>
              <p
                class="text-white/90 text-lg sm:text-xl max-w-2xl mx-auto px-6"
              >
                Descubre nuestros programas educativos diseñados para tu éxito
                profesional
              </p>
            </div>
            <a
              class="bg-rojo-une py-4 px-8 rounded-md mt-12 text-white transition-transform hover:scale-105"
              href="/acerca/oferta-academica"
              >Explorar oferta
            </a>
            <div
              class="absolute inset-0 bg-gradient-to-t from-black/30 via-transparent to-transparent pointer-events-none"
            >
            </div>
          </div>
        </li>

        <li class="splide__slide">
          <div
            class="historia-bg w-full overflow-hidden h-[650px] bg-cover bg-center bg-no-repeat flex items-center justify-center"
            style="contain: layout style paint;"
          >
            <div class="text-center flex flex-col items-center">
              <h2
                class="text-white text-4xl sm:text-5xl lg:text-6xl font-bold mb-4"
              >
                NUESTRA HISTORIA
              </h2>
              <p
                class="text-white/90 text-lg sm:text-xl max-w-2xl mx-auto px-6"
              >
                30 años construyendo futuro, formando profesionales exitosos
              </p>
              <a
                class="bg-rojo-une py-4 px-8 rounded-md mt-24 text-white transition-transform hover:scale-105"
                href="/acerca/historia"
                >Conocer más de UNE
              </a>
            </div>
            <div
              class="absolute inset-0 bg-gradient-to-t from-black/30 via-transparent to-transparent pointer-events-none"
            >
            </div>
          </div>
        </li>

        <li class="splide__slide">
          <div
            class="becas-bg relative w-full overflow-hidden h-[650px] bg-cover bg-center bg-no-repeat flex items-center justify-center"
            style="contain: layout style paint;"
          >
            <div class="text-center flex flex-col items-center">
              <h2
                class="text-white text-4xl sm:text-5xl lg:text-6xl font-bold mb-4"
              >
                APOYOS EDUCATIVOS
              </h2>
              <p
                class="text-white/90 text-lg sm:text-xl max-w-2xl mx-auto px-6"
              >
                Becas y programas de apoyo para hacer realidad tus metas
                académicas
              </p>
              <a
                class="bg-rojo-une py-4 px-8 rounded-md mt-24 text-white transition-transform hover:scale-105"
                href="/acerca/Apoyos"
                >Descubrir apoyos
              </a>
            </div>
            <div
              class="absolute inset-0 bg-gradient-to-t from-black/30 via-transparent to-transparent pointer-events-none"
            >
            </div>
          </div>
        </li>
      </ul>
    </div>
  </div>

  <div class="absolute bottom-0 left-0 right-0 p-4 sm:p-6 lg:p-8 z-10">
    <div
      class="flex flex-col sm:flex-row items-end justify-between gap-4 sm:gap-6 w-full"
    >
      <div class="flex items-end gap-4 w-full sm:w-auto">
        <button
          id="playPauseBtn"
          class="bg-black/50 hover:bg-black/70 text-white p-3 rounded-full transition-all duration-300 backdrop-blur-sm shrink-0 will-change-transform"
          aria-label="Pausar"
          style="transform: translateZ(0);"
        >
          <CirclePause id="pauseIcon" />
          <CirclePlay id="playIcon" />
        </button>
      </div>

      <div class="flex items-end w-full gap-2 sm:gap-4 lg:gap-6">
        <div
          class="progress-line flex-shrink-0 flex-grow w-[16%] data-[active='true']:w-[50%] transition-all duration-300 will-change-transform"
          data-slide-index="0"
          style="transform: translateZ(0);"
        >
          <!-- Solo "30 AÑOS" en mobile y tablet -->
          <h3
            class="text-white text-base-custom font-semibold tracking-wide text-center sm:text-left lg:hidden whitespace-nowrap"
          >
            30 AÑOS
          </h3>

          <!-- Texto completo en desktop -->
          <h3
            class="text-white text-lg-custom font-semibold tracking-wide text-center sm:text-left hidden lg:block whitespace-nowrap"
          >
            30 AÑOS CREYENDO EN TI
          </h3>
        </div>

        <div
          class="progress-line flex-shrink-0 flex-grow w-[16%] data-[active='true']:w-[50%] transition-all duration-300 will-change-transform"
          data-slide-index="1"
          style="transform: translateZ(0);"
        >
          <h3
            class="text-white text-base-custom md:text-lg-custom font-semibold tracking-wide text-center sm:text-left hidden md:block whitespace-nowrap"
          >
            OFERTA ACADÉMICA
          </h3>
        </div>

        <div
          class="progress-line flex-shrink-0 flex-grow w-[16%] data-[active='true']:w-[50%] transition-all duration-300 will-change-transform"
          data-slide-index="2"
          style="transform: translateZ(0);"
        >
          <h3
            class="text-white text-base-custom md:text-lg-custom font-semibold tracking-wide text-center sm:text-left hidden md:block whitespace-nowrap"
          >
            NUESTRA HISTORIA
          </h3>
        </div>

        <div
          class="progress-line flex-shrink-0 flex-grow w-[16%] data-[active='true']:w-[50%] transition-all duration-300 will-change-transform"
          data-slide-index="3"
          style="transform: translateZ(0);"
        >
          <h3
            class="text-white text-base-custom md:text-lg-custom font-semibold tracking-wide text-center sm:text-left hidden md:block whitespace-nowrap"
          >
            APOYOS EDUCATIVOS
          </h3>
        </div>
      </div>
    </div>
  </div>
</div>

<div
  class="full-width flex flex-col md:flex-row justify-between px-4 md:px-16 py-8 items-center md:items-start"
  id="partialHero"
>
  <h2 class="font- text-3xl md:text-4xl text-center md:text-left mb-4 md:mb-0">
    Educación que <span class="text-rojo-une">transforma</span>
    <span class="hidden md:inline">vidas</span>
    <span class="block md:hidden">vidas</span>
  </h2>

  <a
    class="flex font-normal md:font-bold text-xl md:text-2xl uppercase h-14 bg-rojo-une text-white w-auto px-8 md:px-12 py-2.5 gap-8 md:gap-12 rounded-2xl
          group transition-all duration-300 ease-in-out justify-center md:justify-between hover:scale-105 will-change-transform"
    href="/contacto/solicitarinformacion"
    style="transform: translateZ(0);"
  >
    contáctanos
    <span
      class="border-2 border-white rounded-full p-1
            group-hover:border-blue-500 transition-colors duration-300 ease-in-out
            flex items-center justify-center"
    >
      <ArrowRight class="h-6 w-6" />
    </span>
  </a>
</div>

<!-- Structured Data para SEO -->
<script type="application/ld+json">
  {
    "@context": "https://schema.org",
    "@type": "EducationalOrganization",
    "name": "Universidad Nueva Época",
    "alternateName": "UNE",
    "description": "30 años creyendo en ti. Universidad con programas educativos de calidad, becas y apoyos educativos.",
    "url": "https://une.edu.mx",
    "foundingDate": "1994",
    "slogan": "30 años creyendo en ti",
    "hasOfferCatalog": {
      "@type": "OfferCatalog",
      "name": "Oferta Académica",
      "description": "Programas educativos diseñados para tu éxito profesional"
    }
  }
</script>

<style>
  /* Critical CSS inline - solo estilos del hero */
  .oferta-bg {
    background-image: url("/src/assets/Imagenes/Heros/Admision.webp");
  }

  @media (max-width: 767px) {
    .oferta-bg {
      background-image: url("/src/assets/Imagenes/Heros/Admision_mobile2.webp");
    }
  }

  .historia-bg {
    background-image: url("/src/assets/Imagenes/Heros/historia.webp");
  }

  @media (max-width: 767px) {
    .historia-bg {
      background-image: url("/src/assets/Imagenes/Heros/Admision_mobile.webp");
    }
  }

  .becas-bg {
    background-image: url("/src/assets/Imagenes/Heros/Becas.webp");
  }

  @media (max-width: 767px) {
    .becas-bg {
      background-image: url("/src/assets/Imagenes/Heros/becas_mobile.webp");
    }
  }

  /* Optimized Splide base styles */
  .splide {
    position: relative;
    width: 100%;
    contain: layout style paint;
  }

  .splide__track {
    position: relative;
    overflow: hidden;
    border-radius: 0.5rem;
    will-change: transform;
  }

  .splide__list {
    display: flex;
    align-items: flex-start;
    list-style: none;
    margin: 0;
    padding: 0;
    transition: transform 0.6s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    will-change: transform;
  }

  .splide__slide {
    flex-shrink: 0;
    width: 100%;
    opacity: 1;
    contain: layout style paint;
  }

  /* Optimized progress line with transform instead of width */
  .progress-line {
    position: relative;
    overflow: visible;
    cursor: pointer;
    padding-bottom: 8px;
    transition: opacity 0.3s ease;
    will-change: transform, opacity;
    contain: layout style paint;
  }

  /* The gray background line */
  .progress-line::before {
    content: "";
    position: absolute;
    bottom: 0px;
    left: 0%;
    width: 100%;
    height: 2px;
    background: rgba(255, 255, 255, 0.3);
    z-index: 1;
    border-radius: 1px;
    will-change: transform;
  }

  /* The active fill line - usando transform en lugar de width */
  .progress-line::after {
    content: "";
    position: absolute;
    bottom: 0px;
    left: 0%;
    width: 100%;
    height: 2px;
    background: rgba(255, 255, 255, 1);
    z-index: 2;
    transform: scaleX(0);
    transform-origin: left center;
    transition: transform 0.3s ease-out;
    border-radius: 1px;
    will-change: transform;
  }

  /* Active state for current slide */
  .progress-line.is-active::after {
    transform: scaleX(0);
    animation: progressFillTransform var(--slide-duration) linear forwards;
  }

  /* Completed state for previous slides */
  .progress-line.is-completed::after {
    transform: scaleX(1);
    animation: none;
  }

  /* Animation usando transform para mejor performance */
  @keyframes progressFillTransform {
    from {
      transform: scaleX(0);
    }
    to {
      transform: scaleX(1);
    }
  }

  /* Style for text of inactive slides */
  .progress-line:not(.is-active):not(.is-completed) {
    opacity: 0.6;
  }

  /* Style for text of active slide */
  .progress-line.is-active {
    opacity: 1;
    color: white;
    font-weight: 600;
  }

  /* Style for completed slides */
  .progress-line.is-completed {
    opacity: 0.8;
  }

  /* Paused state styles */
  .progress-line.is-paused::after {
    animation-play-state: paused;
  }

  /* Hover effect usando transform */
  .progress-line:hover {
    opacity: 1;
    transform: translateY(-1px) translateZ(0);
    transition: all 0.2s ease;
  }

  /* Screen reader only class for accessibility */
  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
  }

  /* Prefers-reduced-motion support */
  @media (prefers-reduced-motion: reduce) {
    .splide__list,
    .progress-line,
    .progress-line::after,
    .progress-line:hover,
    [class*="transition-"],
    [class*="hover:scale-"] {
      transition: none !important;
      animation: none !important;
      transform: none !important;
    }

    .will-change-transform {
      will-change: auto !important;
    }
  }

  /* Performance optimizations for mobile */
  @media (max-width: 650px) {
    .progress-line::before,
    .progress-line::after {
      width: 100%;
    }

    /* Reduce animations on mobile for better performance */
    .splide__list {
      transition: transform 0.4s ease;
    }
  }
</style>

<script>
  // Lazy load Splide for better initial performance
  let splideLoaded = false;
  let splideInstance = null;

  // Essential variables
  const mainVideo = document.getElementById("mainVideo");
  const playPauseBtn = document.getElementById("playPauseBtn");
  const playIcon = document.getElementById("playIcon");
  const pauseIcon = document.getElementById("pauseIcon");
  const progressLines = document.querySelectorAll(".progress-line");
  const mainSliderElement = document.getElementById("main-slider");

  let isVideoPlaying = true;
  let videoProgressInterval = null;
  let slideProgressInterval = null;
  let isPaused = false;
  let autoplayTimeout = null;
  let rafId = null; // RequestAnimationFrame ID
  let debounceTimer = null; // Debouncing timer

  // Durations for each slide in milliseconds
  const slideDurations = [
    60000, // 1 minuto (60 segundos * 1000 ms)
    10000, // 10 seconds for Oferta Académica
    10000, // 10 seconds for Nuestra Historia
    10000, // 10 seconds for Apoyos Educativos
  ];

  // Intersection Observer for pausing when not visible
  let heroObserver = null;
  let isHeroVisible = true;

  function initializeIntersectionObserver() {
    if ("IntersectionObserver" in window) {
      heroObserver = new IntersectionObserver(
        (entries) => {
          entries.forEach((entry) => {
            isHeroVisible = entry.isIntersecting;
            if (!isHeroVisible && !isPaused) {
              // Pause when hero is not visible
              pauseAutoplay();
              if (mainVideo && !mainVideo.paused) {
                mainVideo.pause();
              }
            } else if (isHeroVisible && !isPaused) {
              // Resume when hero is visible
              resumeAutoplay();
              if (mainVideo && splideInstance && splideInstance.index === 0) {
                mainVideo
                  .play()
                  .catch((e) => console.log("Video play error:", e));
              }
            }
          });
        },
        { threshold: 0.1 }
      );

      heroObserver.observe(mainSliderElement);
    }
  }

  // Debounced function for performance
  function debounce(func, wait) {
    return function executedFunction(...args) {
      const later = () => {
        clearTimeout(debounceTimer);
        func(...args);
      };
      clearTimeout(debounceTimer);
      debounceTimer = setTimeout(later, wait);
    };
  }

  // Custom autoplay functions with RAF optimization
  function startAutoplay(currentIndex) {
    clearAutoplay();

    if (isPaused || !isHeroVisible) return;

    const duration = slideDurations[currentIndex];

    autoplayTimeout = setTimeout(() => {
      if (!isPaused && splideInstance && isHeroVisible) {
        const nextIndex = (currentIndex + 1) % slideDurations.length;
        splideInstance.go(nextIndex);
      }
    }, duration);
  }

  function clearAutoplay() {
    if (autoplayTimeout) {
      clearTimeout(autoplayTimeout);
      autoplayTimeout = null;
    }
    if (rafId) {
      cancelAnimationFrame(rafId);
      rafId = null;
    }
  }

  function pauseAutoplay() {
    clearAutoplay();
  }

  function resumeAutoplay() {
    if (splideInstance && !isPaused && isHeroVisible) {
      startAutoplay(splideInstance.index);
    }
  }

  // Lazy load Splide
  async function loadSplide() {
    if (splideLoaded) return;

    try {
      const { Splide } = await import("@splidejs/splide");
      splideLoaded = true;
      initializeSplide(Splide);
    } catch (error) {
      console.error("Error loading Splide:", error);
    }
  }

  // Function to initialize Splide
  function initializeSplide(Splide) {
    if (!mainSliderElement) {
      console.error("Splide container not found.");
      return;
    }

    splideInstance = new Splide(mainSliderElement, {
      type: "slide",
      autoplay: false, // Disable built-in autoplay
      arrows: false,
      pagination: false,
      keyboard: false,
      drag: false,
      speed: 600,
      pauseOnHover: false,
      pauseOnFocus: false,
      rewind: true,
      lazyLoad: "nearby", // Lazy load nearby slides
      preloadPages: 1,
    });

    splideInstance.mount();

    // Splide Event Listeners with debouncing
    splideInstance.on(
      "moved",
      debounce((newIndex) => {
        handleSlideChange(newIndex);
      }, 100)
    );

    // Initialize first slide
    handleSlideChange(splideInstance.index);
  }

  // Handle slide changes with RAF optimization
  function handleSlideChange(newIndex) {
    // Use RAF for smooth updates
    rafId = requestAnimationFrame(() => {
      // Clear any existing intervals and timeouts
      clearInterval(videoProgressInterval);
      clearInterval(slideProgressInterval);
      clearAutoplay();

      updateProgressBars(newIndex);

      if (playPauseBtn) {
        if (newIndex === 0) {
          playPauseBtn.style.display = "block"; // Show button for video slide
        } else {
          playPauseBtn.style.display = "none"; // Hide button for other slides
        }
      }

      if (newIndex === 0) {
        // Video slide
        if (mainVideo) {
          mainVideo.currentTime = 0;
          if (!isPaused && isHeroVisible) {
            mainVideo.play().catch((e) => console.log("Video play error:", e));
            startVideoProgress();
            updatePlayPauseButton(true);
          } else {
            mainVideo.pause();
            updatePlayPauseButton(false);
          }
        }

        // Start custom autoplay for video
        if (!isPaused && isHeroVisible) {
          startAutoplay(0);
        }
      } else {
        // Non-video slide
        if (mainVideo && !mainVideo.paused) {
          mainVideo.pause();
        }

        if (!isPaused && isHeroVisible) {
          startSlideProgress(newIndex);
          startAutoplay(newIndex);
        } else {
          startSlideProgress(newIndex); // If paused, only initialize progress bar
        }
      }
    });
  }

  // Update visual state of progress bars with better performance
  function updateProgressBars(currentSlideIndex) {
    // Use RAF for smooth visual updates
    requestAnimationFrame(() => {
      progressLines.forEach((line, index) => {
        line.classList.remove("is-active", "is-completed", "is-paused");
        line.style.setProperty("--slide-duration", "0s");

        if (index < currentSlideIndex) {
          line.classList.add("is-completed");
        } else if (index === currentSlideIndex) {
          line.classList.add("is-active");

          if (isPaused) {
            line.classList.add("is-paused");
          }

          let duration = slideDurations[index];

          if (index === 0) {
            // Always use fixed value for slide 0
            duration = slideDurations[0];
          }

          if (duration) {
            line.style.setProperty("--slide-duration", `${duration / 1000}s`);
          }
        }
      });
    });
  }

  // Start progress bar animation for non-video slides
  function startSlideProgress(slideIndex) {
    if (slideIndex === 0) return;

    const duration = slideDurations[slideIndex];
    const progressLine = progressLines[slideIndex];

    if (!duration || !progressLine) return;

    // Use RAF for smooth animation start
    requestAnimationFrame(() => {
      progressLine.style.setProperty("--slide-duration", `${duration / 1000}s`);
      progressLine.classList.remove("is-active");
      void progressLine.offsetWidth;
      progressLine.classList.add("is-active");
    });

    slideProgressInterval = setTimeout(() => {
      if (!isPaused && splideInstance && isHeroVisible) {
        requestAnimationFrame(() => {
          progressLine.classList.remove("is-active");
          progressLine.classList.add("is-completed");
        });
        // The autoplay mechanism will handle the transition
      }
    }, duration);
  }

  // Control video play/pause and slider
  function togglePlayPause() {
    isPaused = !isPaused;

    if (isPaused) {
      if (splideInstance.index === 0 && mainVideo) {
        mainVideo.pause();
        clearInterval(videoProgressInterval);
      } else {
        clearInterval(slideProgressInterval);
      }
      pauseAutoplay();

      requestAnimationFrame(() => {
        progressLines.forEach((line) => {
          if (line.classList.contains("is-active")) {
            line.classList.add("is-paused");
          }
        });
      });

      updatePlayPauseButton(false);
    } else {
      if (splideInstance.index === 0 && mainVideo && isHeroVisible) {
        mainVideo.play().catch((e) => console.log("Video play error:", e));
        startVideoProgress();
      } else {
        startSlideProgress(splideInstance.index);
      }
      resumeAutoplay();

      requestAnimationFrame(() => {
        progressLines.forEach((line) => {
          line.classList.remove("is-paused");
        });
      });

      updatePlayPauseButton(true);
    }
  }

  // Helper to update play/pause button icon
  function updatePlayPauseButton(playing) {
    isVideoPlaying = playing;
    requestAnimationFrame(() => {
      if (playing) {
        playIcon.classList.add("hidden");
        pauseIcon.classList.remove("hidden");
        playPauseBtn.setAttribute("aria-label", "Pausar");
      } else {
        playIcon.classList.remove("hidden");
        pauseIcon.classList.add("hidden");
        playPauseBtn.setAttribute("aria-label", "Reproducir");
      }
    });
  }

  // Start progress bar animation for the video with RAF
  function startVideoProgress() {
    clearInterval(videoProgressInterval);

    if (!mainVideo) return;

    const videoDurationMs = slideDurations[0]; // Use fixed 1 minute value
    const videoCurrentTimeMs = mainVideo.currentTime * 1000;
    const remainingTimeMs = videoDurationMs - videoCurrentTimeMs;

    if (remainingTimeMs <= 0) {
      if (splideInstance) {
        splideInstance.go("+1");
      }
      return;
    }

    const firstProgressLine = progressLines[0];
    if (firstProgressLine) {
      requestAnimationFrame(() => {
        firstProgressLine.style.setProperty(
          "--slide-duration",
          `${remainingTimeMs / 1000}s`
        );

        firstProgressLine.classList.remove("is-active");
        void firstProgressLine.offsetWidth;
        firstProgressLine.classList.add("is-active");
      });
    }

    videoProgressInterval = setInterval(() => {
      // Advance if video ends or if 1 minute has passed (our fixed duration)
      if (
        !mainVideo ||
        mainVideo.paused ||
        mainVideo.ended ||
        isPaused ||
        !isHeroVisible ||
        mainVideo.currentTime * 1000 >= videoDurationMs
      ) {
        clearInterval(videoProgressInterval);
        const completedLine = progressLines[0];
        if (completedLine) {
          requestAnimationFrame(() => {
            completedLine.classList.remove("is-active");
            completedLine.classList.add("is-completed");
          });
        }

        if (splideInstance && !isPaused && isHeroVisible) {
          setTimeout(() => {
            splideInstance.go("+1");
          }, 300);
        }
        return;
      }
    }, 100);
  }

  // Event Listeners with debouncing
  if (playPauseBtn) {
    playPauseBtn.addEventListener("click", debounce(togglePlayPause, 200));
  }

  if (mainVideo) {
    // Optimized video event listeners
    mainVideo.addEventListener("loadedmetadata", () => {
      // Start custom autoplay for video when metadata is loaded
      if (splideInstance && splideInstance.index === 0) {
        if (!isPaused && isHeroVisible) {
          startAutoplay(0);
          startVideoProgress();
        }
      }
      updateProgressBars(splideInstance ? splideInstance.index : 0);
    });

    mainVideo.addEventListener("play", () => {
      if (
        !isPaused &&
        splideInstance &&
        splideInstance.index === 0 &&
        isHeroVisible
      ) {
        updatePlayPauseButton(true);
        startVideoProgress();
      }
    });

    mainVideo.addEventListener("pause", () => {
      if (isPaused || !isHeroVisible) {
        updatePlayPauseButton(false);
        clearInterval(videoProgressInterval);
      }
    });

    mainVideo.addEventListener("ended", () => {
      clearInterval(videoProgressInterval);
      updatePlayPauseButton(false);
      // The autoplay mechanism will handle the transition
    });

    // Progressive video loading
    mainVideo.addEventListener("canplay", () => {
      // Video can start playing, preload more if needed
      if (mainVideo.preload !== "auto") {
        mainVideo.preload = "auto";
      }
    });
  }

  // Click handler for progress bars to navigate with debouncing
  progressLines.forEach((line) => {
    line.addEventListener(
      "click",
      debounce((e) => {
        e.preventDefault();
        const slideIndex = parseInt(line.dataset.slideIndex, 10);
        if (splideInstance && !isNaN(slideIndex)) {
          splideInstance.go(slideIndex);
        }
      }, 200)
    );
  });

  // Touch event optimization for mobile
  if ("ontouchstart" in window) {
    progressLines.forEach((line) => {
      line.addEventListener(
        "touchstart",
        (e) => {
          e.preventDefault();
          line.style.transform = "translateY(-2px) translateZ(0)";
        },
        { passive: false }
      );

      line.addEventListener(
        "touchend",
        (e) => {
          e.preventDefault();
          line.style.transform = "translateY(0) translateZ(0)";
          const slideIndex = parseInt(line.dataset.slideIndex, 10);
          if (splideInstance && !isNaN(slideIndex)) {
            splideInstance.go(slideIndex);
          }
        },
        { passive: false }
      );
    });
  }

  // Optimized initialization with progressive enhancement
  function initializeHero() {
    // Initialize intersection observer first
    initializeIntersectionObserver();

    // Load Splide after initial render
    requestAnimationFrame(() => {
      loadSplide();
    });
  }

  // Initialize when DOM is ready with performance optimization
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initializeHero);
  } else {
    // DOM is already loaded
    initializeHero();
  }

  // Cleanup function for better memory management
  function cleanup() {
    clearAutoplay();
    clearInterval(videoProgressInterval);
    clearInterval(slideProgressInterval);

    if (heroObserver) {
      heroObserver.disconnect();
    }

    if (splideInstance) {
      splideInstance.destroy();
    }
  }

  // Cleanup on page unload
  window.addEventListener("beforeunload", cleanup);

  // Handle visibility change for better performance
  document.addEventListener("visibilitychange", () => {
    if (document.hidden) {
      // Page is hidden, pause everything
      if (!isPaused) {
        pauseAutoplay();
        if (mainVideo && !mainVideo.paused) {
          mainVideo.pause();
        }
      }
    } else {
      // Page is visible, resume if not manually paused
      if (!isPaused && isHeroVisible) {
        resumeAutoplay();
        if (mainVideo && splideInstance && splideInstance.index === 0) {
          mainVideo.play().catch((e) => console.log("Video play error:", e));
        }
      }
    }
  });
</script>
