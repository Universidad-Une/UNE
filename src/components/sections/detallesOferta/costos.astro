---
// Costos.astro
const { 
  planteles,
  seguroEscolar, // Mantener para compatibilidad hacia atrás
  imagen = 1 // Nueva prop para seleccionar imagen de fondo
} = Astro.props;

import Uniforme2 from "@assets/Imagenes/Uniformes/Gral.webp";
import Uniforme1 from "@assets/Imagenes/Uniformes/Primaria.jpg"; // Asumiendo que tienes otra imagen

// Seleccionar imagen de fondo basada en la prop
const imagenFondo = imagen === 2 ? Uniforme2 : Uniforme1;

// Datos iniciales (primer plantel)
const plantelInicial = planteles[0];
const tieneSelectorMultiple = planteles.length > 1;

// Función helper para obtener el período en español
function obtenerPeriodoTexto(periodo) {
  const periodos = {
    'anual': 'durante el año escolar',
    'semestral': 'por semestre',
    'cuatrimestral': 'por cuatrimestre'
  };
  return periodos[periodo] || 'durante el año escolar';
}

// Obtener datos del seguro - nueva estructura o fallback a la antigua
function obtenerDatosSeguro(plantel) {
  if (plantel.seguro) {
    return {
      costo: plantel.seguro.costo,
      descripcion: plantel.seguro.descripcion || `Cobertura médica ${obtenerPeriodoTexto(plantel.seguro.periodo)}`
    };
  }
  // Fallback para compatibilidad hacia atrás
  return {
    costo: seguroEscolar || 1200,
    descripcion: 'Cobertura médica durante el ciclo escolar'
  };
}

const seguroInicial = obtenerDatosSeguro(plantelInicial);
---

<!-- Card de Costos -->
<div class="rounded-lg overflow-hidden shadow-lg relative" style={`background-image: url(${imagenFondo.src}); background-size: cover; background-position: center;`}>
  
  <!-- Contenido -->
  <div class="relative z-10 p-6">
    <!-- Título principal -->
    <div class="text-center mb-8">
      <h2 class="text-4xl font-bold text-white mb-2">Costos</h2>
      <p class="text-white text-sm opacity-90" id="costos-subtitle">
        {tieneSelectorMultiple ? "(Todos los Planteles)" : `(${plantelInicial.nombre})`}
      </p>
    </div>
    
    <div class="space-y-6">
      <!-- Selector de Plantel/Modalidad - Solo si hay múltiples planteles -->
      {tieneSelectorMultiple && (
        <div class="flex flex-col gap-2">
          <div class="flex justify-between items-start">
            <div>
              <h3 class="text-white font-semibold text-lg">Selecciona tu opción:</h3>
              <p class="text-white text-sm opacity-90">Selecciona modalidad y plantel</p>
            </div>
          </div>
          
          <select 
            id="plantel-select" 
            class="mt-2  bg-opacity-20 text-white border border-white border-opacity-30 rounded-lg px-4 py-3 focus:outline-none focus:ring-2 focus:ring-white focus:ring-opacity-50 focus:border-white shadow-sm backdrop-blur-sm"
          >
            {planteles.map((plantel, index) => (
              <option 
                value={index}
                data-nombre={plantel.nombre}
                data-modalidad={plantel.modalidad}
                data-tramite-nombre={plantel.tramite?.nombre || "Trámite administrativo"}
                data-tramite-costo={plantel.tramite?.costo ?? plantel.inscripcion ?? 0}
                data-tramite-descripcion={plantel.tramite?.descripcion || (plantel.inscripcion === 0 ? "Sin costo de inscripción" : "Pago único al inicio del ciclo escolar")}
                data-seguro-costo={plantel.seguro?.costo || seguroEscolar || 1200}
                data-seguro-descripcion={plantel.seguro?.descripcion || `Cobertura médica ${obtenerPeriodoTexto(plantel.seguro?.periodo || 'anual')}`}
                data-cobro-tipo={plantel.tipoCobro?.tipo || "colegiatura"}
                data-cobro-costo={plantel.tipoCobro?.costo || plantel.colegiatura}
                data-cobro-descripcion={plantel.tipoCobro?.descripcion || "Mensual"}
                data-colegiatura={plantel.colegiatura}
                class="text-gray-800 bg-white"
              >
                {plantel.modalidad === 'sabatina' ? `Sabatina - ${plantel.nombre}` : plantel.nombre}
                {plantel.turno && plantel.turno !== 'ambos' ? ` (${plantel.turno})` : ''}
              </option>
            ))}
          </select>
        </div>
      )}

      <!-- Trámite administrativo / Inscripción -->
      <div class="flex justify-between items-start border-b border-white border-opacity-30 pb-4">
        <div class="flex-1">
          <h3 class="text-white font-semibold text-lg" id="tramite-titulo">
            {plantelInicial.tramite?.nombre || "Trámite administrativo"}:
          </h3>
          <p class="text-white text-sm opacity-90" id="tramite-descripcion">
            {plantelInicial.tramite?.descripcion || (plantelInicial.inscripcion === 0 ? "Sin costo de inscripción" : "Pago único al inicio del ciclo escolar")}
          </p>
        </div>
        <div class="text-right ml-4">
          <span class="text-4xl font-bold text-white" id="tramite-precio">
            {(plantelInicial.tramite?.costo ?? plantelInicial.inscripcion ?? 0) === 0 ? "Sin costo" : `${(plantelInicial.tramite?.costo ?? plantelInicial.inscripcion ?? 0).toLocaleString()}`}
          </span>
        </div>
      </div>

      <!-- Credencial -->
      <div class="flex justify-between items-start border-b border-white border-opacity-30 pb-4">
        <div class="flex-1">
          <h3 class="text-white font-semibold text-lg">Credencial:</h3>
          <p class="text-white text-sm opacity-90">Pago único hasta vigencia</p>
        </div>
        <div class="text-right ml-4">
          <span class="text-4xl font-bold text-white">$240</span>
        </div>
      </div>

      <!-- Seguro Escolar -->
      <div class="flex justify-between items-start border-b border-white border-opacity-30 pb-4">
        <div class="flex-1">
          <h3 class="text-white font-semibold text-lg">Seguro Escolar</h3>
          <p class="text-white text-sm opacity-90" id="seguro-descripcion">
            {seguroInicial.descripcion}
          </p>
        </div>
        <div class="text-right ml-4">
          <span class="text-4xl font-bold text-white" id="seguro-precio">
            ${seguroInicial.costo.toLocaleString()}
          </span>
        </div>
      </div>

      <!-- Colegiatura Mensual / Costo por Materia -->
      <div class="flex justify-between items-start">
        <div class="flex-1">
          <h3 class="text-white font-semibold text-lg" id="cobro-titulo">
            {plantelInicial.tipoCobro?.tipo === "materia" ? " Precio de materias:" : "Colegiatura Mensual"}
          </h3>
          <p class="text-white text-sm opacity-90" id="cobro-descripcion">
            {plantelInicial.tipoCobro?.descripcion || (tieneSelectorMultiple ? "Mismo precio en todos los planteles de la modalidad" : `Plantel ${plantelInicial.nombre}`)}
          </p>
        </div>
        <div class="text-right ml-4">
          <span id="cobro-precio" class="text-4xl font-bold text-white">
            ${(plantelInicial.tipoCobro?.costo || plantelInicial.colegiatura).toLocaleString()}
          </span>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Pasar datos a JavaScript -->
<script define:vars={{ planteles }}>
  window.plantelesData = planteles;
</script>

<script>
  // Función helper para obtener el período en español (lado cliente)
  function obtenerPeriodoTexto(periodo) {
    const periodos = {
      'anual': 'durante el ciclo escolar',
      'semestral': 'por semestre', 
      'cuatrimestral': 'por cuatrimestre'
    };
    return periodos[periodo] || 'durante el ciclo escolar';
  }

  // Función para actualizar precios y información del plantel
  function actualizarCostos() {
    const select = document.getElementById('plantel-select');
    if (!select) return;
    
    const selectedIndex = parseInt(select.value);
    const selectedOption = select.options[selectedIndex];
    
    if (!selectedOption) return;
    
    // Obtener datos del option seleccionado
    const datosSeleccionados = {
      nombre: selectedOption.getAttribute('data-nombre'),
      tramiteNombre: selectedOption.getAttribute('data-tramite-nombre'),
      tramiteCosto: parseInt(selectedOption.getAttribute('data-tramite-costo')) || 0,
      tramiteDescripcion: selectedOption.getAttribute('data-tramite-descripcion'),
      seguroCosto: parseInt(selectedOption.getAttribute('data-seguro-costo')) || 0,
      seguroDescripcion: selectedOption.getAttribute('data-seguro-descripcion'),
      cobroTipo: selectedOption.getAttribute('data-cobro-tipo'),
      cobroCosto: parseInt(selectedOption.getAttribute('data-cobro-costo')) || 0,
      cobroDescripcion: selectedOption.getAttribute('data-cobro-descripcion'),
      colegiatura: parseInt(selectedOption.getAttribute('data-colegiatura')) || 0
    };
    
    // Actualizar elementos del DOM
    const elementos = {
      costosSubtitle: document.getElementById('costos-subtitle'),
      tramiteTitulo: document.getElementById('tramite-titulo'),
      tramiteDescripcion: document.getElementById('tramite-descripcion'),
      tramitePrecio: document.getElementById('tramite-precio'),
      seguroDescripcion: document.getElementById('seguro-descripcion'),
      seguroPrecio: document.getElementById('seguro-precio'),
      cobroTitulo: document.getElementById('cobro-titulo'),
      cobroDescripcion: document.getElementById('cobro-descripcion'),
      cobroPrecio: document.getElementById('cobro-precio')
    };
    
    // Actualizar subtítulo
    if (elementos.costosSubtitle) {
      elementos.costosSubtitle.textContent = `(${datosSeleccionados.nombre})`;
    }
    
    // Actualizar trámite administrativo/inscripción
    if (elementos.tramiteTitulo) {
      elementos.tramiteTitulo.textContent = `${datosSeleccionados.tramiteNombre}:`;
    }
    
    if (elementos.tramiteDescripcion) {
      elementos.tramiteDescripcion.textContent = datosSeleccionados.tramiteDescripcion;
    }
    
    if (elementos.tramitePrecio) {
      elementos.tramitePrecio.textContent = datosSeleccionados.tramiteCosto === 0 
        ? "Sin costo" 
        : `$${datosSeleccionados.tramiteCosto.toLocaleString()}`;
    }
    
    // Actualizar seguro escolar
    if (elementos.seguroDescripcion) {
      elementos.seguroDescripcion.textContent = datosSeleccionados.seguroDescripcion;
    }
    
    if (elementos.seguroPrecio) {
      elementos.seguroPrecio.textContent = `$${datosSeleccionados.seguroCosto.toLocaleString()}`;
    }
    
    // Actualizar colegiatura/materia
    if (elementos.cobroTitulo) {
      elementos.cobroTitulo.textContent = datosSeleccionados.cobroTipo === "materia" 
        ? "Costo por Materia" 
        : "Colegiatura Mensual";
    }
    
    if (elementos.cobroDescripcion) {
      elementos.cobroDescripcion.textContent = datosSeleccionados.cobroDescripcion;
    }
    
    if (elementos.cobroPrecio) {
      elementos.cobroPrecio.textContent = `${datosSeleccionados.cobroCosto.toLocaleString()}`;
    }
  }

  // Event listeners
  document.addEventListener('DOMContentLoaded', function() {
    const select = document.getElementById('plantel-select');
    if (select) {
      select.addEventListener('change', actualizarCostos);
      // Seleccionar el primer plantel por defecto
      select.selectedIndex = 0;
      actualizarCostos();
    }
  });
</script>