---
// PerfilSection.astro
const { perfilIngreso, perfilEgreso } = Astro.props;
import Egresos from "@assets/Imagenes/Middles/Egresos.png"
---

<section class="relative min-h-screen flex items-center justify-center pt-8">
  <div
    id="scalingElement"
    class="relative w-full mx-auto px-6 pt-12 pb-12 text-center text-white will-change-transform transition-transform duration-75 ease-out bg-cover bg-center bg-no-repeat rounded-t-2xl"
    style={`transform: scale(0.8); background-image: url(${Egresos.src});`}
  >

    <!-- Encabezado -->
    <div class="mb-6">
      <a
        href="/perfiles"
        class="inline-flex items-center gap-2 text-sm font-medium opacity-90 hover:opacity-100 transition-opacity"
      >
        Ver oferta
        <svg
          width="20"
          height="20"
          viewBox="0 0 24 24"
          fill="none"
          class="inline-block"
        >
          <path
            d="M5 12h14M12 5l7 7-7 7"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
          />
        </svg>
      </a>
    </div>

    <h2 class="text-4xl md:text-5xl lg:text-6xl font-bold mb-16 leading-tight">
      PERFIL
    </h2>

    <!-- Grid de perfiles -->
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-8 max-w-6xl mx-auto">
      <!-- Perfil de ingreso -->
      <div class="bg-black/20 backdrop-blur-sm rounded-lg p-8 border border-white/20">
        <h3 class="text-2xl md:text-3xl font-bold mb-6 text-white">Perfil de ingreso</h3>
        <p class="text-lg md:text-xl leading-relaxed opacity-90 text-left">
          {perfilIngreso}
        </p>
      </div>

      <!-- Perfil de egreso -->
      <div class="bg-black/20 backdrop-blur-sm rounded-lg p-8 border border-white/20">
        <h3 class="text-2xl md:text-3xl font-bold mb-6 text-white">Perfil de egreso</h3>
        <p class="text-lg md:text-xl leading-relaxed opacity-90 text-left">
          {perfilEgreso}
        </p>
      </div>
    </div>
  </div>
</section>

<style>
  .glassmorphism-btn {
    border-radius: 7px;
    border: 1px solid rgba(255, 255, 255, 0.4);
    background: rgba(255, 255, 255, 0.32);
    backdrop-filter: blur(10.5px);
    -webkit-backdrop-filter: blur(10.5px);
  }
</style>

<script is:inline>
  function handleScroll() {
    const scalingElement = document.getElementById("scalingElement");
    if (!scalingElement) return;

    const windowHeight = window.innerHeight;
    const elementRect = scalingElement.getBoundingClientRect();

    const minScale = 0.8;
    const maxScale = 1.0;

    let scrollProgress = 0;

    if (elementRect.top > 0) {
      const distanceFromTop = elementRect.top;
      const maxDistance = windowHeight;
      scrollProgress = Math.max(
        0,
        Math.min(1, 1 - distanceFromTop / maxDistance)
      );
    } else if (elementRect.bottom > 0) {
      scrollProgress = 1;
    } else {
      scrollProgress = 1;
    }

    const scale = minScale + (maxScale - minScale) * scrollProgress;
    scalingElement.style.transform = `scale(${scale})`;
  }

  let ticking = false;
  function optimizedScrollHandler() {
    if (!ticking) {
      requestAnimationFrame(() => {
        handleScroll();
        ticking = false;
      });
      ticking = true;
    }
  }

  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", function () {
      window.addEventListener("scroll", optimizedScrollHandler);
      handleScroll();
    });
  } else {
    window.addEventListener("scroll", optimizedScrollHandler);
    handleScroll();
  }
</script>
