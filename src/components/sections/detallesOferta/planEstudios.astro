---
// Props del componente
export interface Materia {
  codigo: string;
  nombre: string;
  creditos: number;
  color?: 'verde' | 'amarillo' | 'naranja' | 'rojo' | 'azul' | 'morado';
  prerequisitos?: string[];
}

export interface Semestre {
  numero: number;
  materias: Materia[];
}

export interface Props {
  titulo?: string;
  semestres: Semestre[];
}

const { titulo = "Propuesta Educativa", semestres } = Astro.props;

// Generar ID único para el componente
const componentId = `plan-estudios-${Math.random().toString(36).substr(2, 9)}`;

// Función para obtener las clases de color
const getColorClasses = (color: string = 'verde') => {
  const colorMap = {
    verde: 'bg-green-100 border-l-4 border-green-500',
    amarillo: 'bg-yellow-100 border-l-4 border-yellow-500',
    naranja: 'bg-orange-100 border-l-4 border-orange-500',
    rojo: 'bg-red-100 border-l-4 border-red-500',
    azul: 'bg-blue-100 border-l-4 border-blue-500',
    morado: 'bg-purple-100 border-l-4 border-purple-500'
  };
  return colorMap[color] || colorMap.verde;
};

// Función para obtener el nombre ordinal del semestre
const getSemestreNombre = (numero: number) => {
  const nombres = [
    '', 'PRIMERO', 'SEGUNDO', 'TERCERO', 'CUARTO', 'QUINTO', 
    'SEXTO', 'SÉPTIMO', 'OCTAVO', 'NOVENO', 'DÉCIMO'
  ];
  return nombres[numero] || `${numero}°`;
};

// Calcular créditos totales por semestre
const calcularCreditos = (materias: Materia[]) => {
  return materias.reduce((total, materia) => total + materia.creditos, 0);
};

// Calcular créditos totales del plan
const creditosTotales = semestres.reduce((total, sem) => total + calcularCreditos(sem.materias), 0);
---
<div class="mx-auto p-4 sm:p-6 bg-white" id={componentId}>
  <!-- Encabezado -->
  <div class="text-center mb-6 sm:mb-8">
    <h2 class="text-sm font-medium text-gray-600 mb-2">PLAN DE ESTUDIOS</h2>
    <h1 class="text-2xl sm:text-3xl font-bold text-gray-900">{titulo}</h1>
  </div>

  <!-- Contenedor responsivo de semestres -->
  <!-- En mobile: scroll horizontal con tarjetas más anchas -->
  <div class="block sm:hidden">
    <div class="flex gap-4 overflow-x-auto pb-4 scrollbar-hide" style="scroll-snap-type: x mandatory;">
      {semestres.map((semestre) => (
        <div class="flex-shrink-0 w-72 flex flex-col space-y-3" style="scroll-snap-align: start;">
          <!-- Encabezado del semestre -->
          <div class="text-center sticky top-0 bg-white pb-2">
            <h3 class="text-sm font-bold text-gray-800 mb-1">
              {getSemestreNombre(semestre.numero)}
            </h3>
            <div class="text-xs text-gray-600">
              {calcularCreditos(semestre.materias)} créditos
            </div>
          </div>

          <!-- Materias del semestre con scroll vertical limitado -->
          <div class="space-y-2 max-h-96 overflow-y-auto pr-2 scrollbar-thin">
            {semestre.materias.map((materia) => (
              <div class={`p-3 rounded-lg shadow-sm materia-card ${getColorClasses(materia.color)}`}>
                <!-- Código de la materia -->
                <div class="text-xs font-bold text-gray-700 mb-1">
                  {materia.codigo}
                </div>
                
                <!-- Nombre de la materia -->
                <div class="text-sm font-medium text-gray-900 leading-tight mb-2">
                  {materia.nombre}
                </div>
                
                <!-- Información adicional -->
                <div class="flex justify-between items-center">
                  <div class="text-xs text-gray-600">
                    {materia.creditos} créditos
                  </div>
                  <div class="w-6 h-6 bg-gray-300 rounded-full flex items-center justify-center">
                    <span class="text-xs font-bold text-gray-700">
                      {materia.prerequisitos?.length || 0}
                    </span>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      ))}
    </div>
    
    <!-- Indicador de scroll en mobile -->
    <div class="flex justify-center mt-2 space-x-1">
      {semestres.map((_, index) => (
        <div class="w-2 h-2 bg-gray-300 rounded-full"></div>
      ))}
    </div>
  </div>

  <!-- En desktop: scroll horizontal para manejar muchos semestres -->
  <div class="hidden sm:block">
    <div class="flex gap-4 sm:gap-6 overflow-x-auto pb-4 scrollbar-thin">
      {semestres.map((semestre) => (
        <div class="flex-shrink-0 w-64 lg:w-72 xl:w-80 flex flex-col space-y-4">
          <!-- Encabezado del semestre -->
          <div class="text-center">
            <h3 class="text-sm font-bold text-gray-800 mb-1">
              {getSemestreNombre(semestre.numero)}
            </h3>
            <div class="text-xs text-gray-600">
              {calcularCreditos(semestre.materias)} créditos
            </div>
          </div>

          <!-- Materias del semestre -->
          <div class="space-y-3">
            {semestre.materias.map((materia) => (
              <div class={`p-3 rounded-lg shadow-sm materia-card ${getColorClasses(materia.color)}`}>
                <!-- Código de la materia -->
                <div class="text-xs font-bold text-gray-700 mb-1">
                  {materia.codigo}
                </div>
                
                <!-- Nombre de la materia -->
                <div class="text-sm font-medium text-gray-900 leading-tight mb-2">
                  {materia.nombre}
                </div>
                
                <!-- Información adicional -->
                <div class="flex justify-between items-center">
                  <div class="text-xs text-gray-600">
                    {materia.creditos} créditos
                  </div>
                  <div class="w-6 h-6 bg-gray-300 rounded-full flex items-center justify-center">
                    <span class="text-xs font-bold text-gray-700">
                      {materia.prerequisitos?.length || 0}
                    </span>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      ))}
    </div>
    
    <!-- Indicador de scroll en desktop -->
    <div class="flex justify-center mt-2 space-x-1">
      {semestres.map((_, index) => (
        <div class="w-2 h-2 bg-gray-300 rounded-full opacity-50"></div>
      ))}
    </div>
  </div>

  <!-- Información de resumen -->
  <div class="mt-6 sm:mt-8 text-center bg-gray-50 rounded-lg p-4">
    <div class="text-sm text-gray-600">
      <span class="font-medium">Total de créditos:</span> {creditosTotales}
    </div>
    <div class="text-sm text-gray-600 mt-1">
      <span class="font-medium">Total de semestres:</span> {semestres.length}
    </div>
  </div>

  <!-- Botón de descarga -->
  <div class="flex justify-center mt-6 sm:mt-8">
    <button 
      id={`download-btn-${componentId}`}
      class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-6 rounded-lg shadow-lg transition-colors duration-200 flex items-center space-x-2 w-full sm:w-auto"
    >
      <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
      </svg>
      <span>Descargar PDF</span>
    </button>
  </div>
</div>

<style>
  /* Estilos para hover y transiciones */
  .materia-card {
    transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
  }
  
  .materia-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  }

  /* Scroll horizontal en mobile */
  .scrollbar-hide {
    -ms-overflow-style: none;
    scrollbar-width: none;
  }
  
  .scrollbar-hide::-webkit-scrollbar {
    display: none;
  }

  /* Scroll vertical personalizado para las materias */
  .scrollbar-thin {
    scrollbar-width: thin;
    scrollbar-color: rgba(156, 163, 175, 0.5) transparent;
  }

  .scrollbar-thin::-webkit-scrollbar {
    width: 4px;
  }

  .scrollbar-thin::-webkit-scrollbar-track {
    background: transparent;
  }

  .scrollbar-thin::-webkit-scrollbar-thumb {
    background-color: rgba(156, 163, 175, 0.5);
    border-radius: 2px;
  }

  .scrollbar-thin::-webkit-scrollbar-thumb:hover {
    background-color: rgba(156, 163, 175, 0.7);
  }

  /* Smooth scroll para mejor experiencia */
  @media (max-width: 640px) {
    .overflow-x-auto {
      scroll-behavior: smooth;
    }
  }

  /* Optimización para dispositivos móviles */
  @media (max-width: 640px) {
    /* Hacer que el scroll sea más natural en móvil */
    .overflow-x-auto {
      -webkit-overflow-scrolling: touch;
    }
    
    /* Asegurar que las materias no sean demasiado anchas en mobile */
    .materia-card {
      min-height: 90px;
    }
  }
</style>

<script define:vars={{ componentId, titulo, semestres, creditosTotales }}>
  document.addEventListener('DOMContentLoaded', () => {
    const downloadBtn = document.getElementById(`download-btn-${componentId}`);
    
    if (!downloadBtn) return;

    downloadBtn.addEventListener('click', async () => {
      // Declarar la variable fuera del try para que sea accesible en el catch
      let originalText = downloadBtn.innerHTML;

      try {
        // Cambiar texto del botón mientras se genera
        downloadBtn.innerHTML = '<span>Generando PDF...</span>';
        downloadBtn.disabled = true;

        // 1. Importar pdf-lib desde un CDN
        const { PDFDocument, rgb, StandardFonts } = await import('https://cdn.jsdelivr.net/npm/pdf-lib@1.17.1/dist/pdf-lib.esm.js');

        // ... el resto de tu lógica para crear el PDF sigue igual ...

        // Crear nuevo documento PDF
        const pdfDoc = await PDFDocument.create();
        
        // Configurar fuente
        const font = await pdfDoc.embedFont(StandardFonts.Helvetica);
        const boldFont = await pdfDoc.embedFont(StandardFonts.HelveticaBold);
        
        // Crear página
        let page = pdfDoc.addPage([595.28, 841.89]); // A4 size
        const { width, height } = page.getSize();
        
        // Configurar colores
        const colors = {
          verde: rgb(0.8, 0.95, 0.8),
          amarillo: rgb(1, 0.97, 0.8),
          naranja: rgb(1, 0.9, 0.8),
          rojo: rgb(0.98, 0.8, 0.8),
          azul: rgb(0.8, 0.9, 1),
          morado: rgb(0.9, 0.8, 1)
        };

        // Título principal
        let yPosition = height - 80;
        page.drawText('PLAN DE ESTUDIOS', {
          x: width / 2 - 80,
          y: yPosition,
          size: 12,
          font: font,
          color: rgb(0.4, 0.4, 0.4)
        });

        yPosition -= 30;
        page.drawText(titulo, {
          x: width / 2 - (titulo.length * 6),
          y: yPosition,
          size: 18,
          font: boldFont,
          color: rgb(0, 0, 0)
        });

        yPosition -= 40;

        // Función para obtener nombre ordinal
        const getSemestreNombre = (numero) => {
          const nombres = [
            '', 'PRIMERO', 'SEGUNDO', 'TERCERO', 'CUARTO', 'QUINTO', 
            'SEXTO', 'SÉPTIMO', 'OCTAVO', 'NOVENO', 'DÉCIMO'
          ];
          return nombres[numero] || `${numero}°`;
        };

        // Calcular layout
        const semestresPerRow = Math.min(3, semestres.length);
        const columnWidth = (width - 80) / semestresPerRow;
        const startX = 40;

        let currentRow = 0;
        let currentCol = 0;

        // Dibujar semestres
        for (let i = 0; i < semestres.length; i++) {
          const semestre = semestres[i];
          const x = startX + (currentCol * columnWidth);
          let y = yPosition - (currentRow * 350);

          // Si no cabe en la página actual, crear nueva página
          if (y < 100 && i > 0) { // Añadido i > 0 para evitar página en blanco al inicio
            page = pdfDoc.addPage([595.28, 841.89]);
            yPosition = height - 40;
            currentRow = 0;
            y = yPosition;
          }

          // Título del semestre
          page.drawText(getSemestreNombre(semestre.numero), {
            x: x + 10,
            y: y,
            size: 10,
            font: boldFont,
            color: rgb(0, 0, 0)
          });

          // Créditos del semestre
          const creditosSemestre = semestre.materias.reduce((total, materia) => total + materia.creditos, 0);
          page.drawText(`Créditos: ${creditosSemestre}`, {
            x: x + 10,
            y: y - 15,
            size: 8,
            font: font,
            color: rgb(0.4, 0.4, 0.4)
          });

          // Dibujar materias
          let materiaY = y - 40;
          for (const materia of semestre.materias) {
            const materiaHeight = 50;
            const materiaWidth = columnWidth - 20;
            
            // Fondo de la materia
            const bgColor = colors[materia.color] || colors.verde;
            page.drawRectangle({
              x: x + 5,
              y: materiaY - materiaHeight + 5,
              width: materiaWidth,
              height: materiaHeight,
              color: bgColor
            });

            // Borde izquierdo
            const borderColors = {
              verde: rgb(0.2, 0.7, 0.2),
              amarillo: rgb(0.8, 0.8, 0.2),
              naranja: rgb(0.9, 0.5, 0.2),
              rojo: rgb(0.8, 0.2, 0.2),
              azul: rgb(0.2, 0.4, 0.8),
              morado: rgb(0.6, 0.2, 0.8)
            };
            const borderColor = borderColors[materia.color] || borderColors.verde;
            page.drawRectangle({
              x: x + 5,
              y: materiaY - materiaHeight + 5,
              width: 3,
              height: materiaHeight,
              color: borderColor
            });

            // Código de la materia
            page.drawText(materia.codigo, {
              x: x + 12,
              y: materiaY - 15,
              size: 8,
              font: boldFont,
              color: rgb(0.3, 0.3, 0.3)
            });

            // Nombre de la materia (con ajuste de texto)
            const nombreTexto = materia.nombre.length > 25 ? 
              materia.nombre.substring(0, 22) + '...' : materia.nombre;
            page.drawText(nombreTexto, {
              x: x + 12,
              y: materiaY - 28,
              size: 8,
              font: font,
              color: rgb(0, 0, 0)
            });

            // Círculo con prerequisitos
            const prereqCount = materia.prerequisitos?.length || 0;
            const circleX = x + materiaWidth - 10;
            const circleY = materiaY - 35; 
            page.drawCircle({
                x: circleX,
                y: circleY,
                size: 8,
                color: rgb(0.8, 0.8, 0.8)
            });
            page.drawText(prereqCount.toString(), {
                x: circleX - (prereqCount > 9 ? 5 : 2.5),
                y: circleY - 2.5,
                size: 7,
                font: boldFont,
                color: rgb(0.3, 0.3, 0.3)
            });
            
            materiaY -= 60;
          }

          currentCol++;
          if (currentCol >= semestresPerRow) {
            currentCol = 0;
            currentRow++;
            // Reset yPosition para la nueva fila en la misma página
            if (currentCol === 0) {
              yPosition -= 350; 
            }
          }
        }

        // Información adicional en la última página
        const lastPage = pdfDoc.getPages()[pdfDoc.getPages().length - 1];
        lastPage.drawText(`Total de créditos: ${creditosTotales}`, {
          x: 40,
          y: 60,
          size: 12,
          font: boldFont,
          color: rgb(0, 0, 0)
        });

        // ... resto de la información y descarga ...

        // Generar y descargar PDF
        const pdfBytes = await pdfDoc.save();
        const blob = new Blob([pdfBytes], { type: 'application/pdf' });
        const url = URL.createObjectURL(blob);
        
        const a = document.createElement('a');
        a.href = url;
        a.download = `plan-estudios-${titulo.replace(/\s+/g, '-').toLowerCase()}.pdf`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);

        // Restaurar botón
        downloadBtn.innerHTML = originalText;
        downloadBtn.disabled = false;

      } catch (error) {
        console.error('Error al generar PDF:', error);
        alert('Error al generar el PDF. Por favor, intenta nuevamente.');
        
        // 2. Restaurar botón en caso de error (ahora funciona)
        downloadBtn.innerHTML = originalText;
        downloadBtn.disabled = false;
      }
    });
  });
</script>