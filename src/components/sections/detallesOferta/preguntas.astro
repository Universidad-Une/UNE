---
import { Plus, Minus } from "@lucide/astro";

// Definición de las propiedades del componente
export interface Props {
  faqs: Array<{
    question: string;
    answer: string;
  }>;
  title?: string;
  subtitle?: string;
}

// Extracción de props con valores por defecto
const {
  faqs = [],
  title = "Todo lo que necesitas saber, en un solo lugar.",
  subtitle = "",
} = Astro.props;

// Dividir las FAQs en dos columnas para el diseño
const midpoint = Math.ceil(faqs.length / 2);
const leftColumnFaqs = faqs.slice(0, midpoint);
const rightColumnFaqs = faqs.slice(midpoint);
---

<section class="py-16 bg-gray-50">
  <div class="container mx-auto px-4">
    <div class="text-center mb-12">
      <h2 class="text-4xl font-bold text-blue-900 mb-4">
        {title}
      </h2>
      {subtitle && <p class="text-lg text-gray-600">{subtitle}</p>}
    </div>

    <div class="max-w-6xl mx-auto grid md:grid-cols-2 gap-4 items-start">
      <div class="space-y-4">
        {
          leftColumnFaqs.map((faq, index) => (
            <div class="faq-item bg-azul-une text-white rounded-lg cursor-pointer hover:bg-blue-800 transition-colors duration-300 group" data-faq-index={`left-${index}`}>
              <div class="faq-question p-6 flex items-center justify-between">
                <h3 class="text-lg pr-4">{faq.question}</h3>
                <div class="flex-shrink-0">
                  <Plus class="icon-plus w-6 h-6" />
                  <Minus class="icon-minus w-6 h-6 hidden" />
                </div>
              </div>
              <div class="faq-answer overflow-hidden max-h-0 transition-all duration-300 ease-in-out">
                <div class="bg-blue-800 p-6">
                  <p class="text-white">{faq.answer}</p>
                </div>
              </div>
            </div>
          ))
        }
      </div>

      <div class="space-y-4">
        {
          rightColumnFaqs.map((faq, index) => (
            <div class="faq-item bg-azul-une text-white rounded-lg cursor-pointer hover:bg-blue-800 transition-colors duration-300 group" data-faq-index={`right-${index}`}>
              <div class="faq-question p-6 flex items-center justify-between">
                <h3 class="text-lg pr-4">{faq.question}</h3>
                <div class="flex-shrink-0">
                  <Plus class="icon-plus w-6 h-6" />
                  <Minus class="icon-minus w-6 h-6 hidden" />
                </div>
              </div>
              <div class="faq-answer overflow-hidden max-h-0 transition-all duration-300 ease-in-out">
                <div class="bg-blue-800 p-6">
                  <p class="text-white">{faq.answer}</p>
                </div>
              </div>
            </div>
          ))
        }
      </div>
    </div>
  </div>
</section>

<script>
  function initializeFAQ() {
    const faqItems = document.querySelectorAll(".faq-item");
    
    if (faqItems.length === 0) {
      console.warn("No FAQ items found");
      return;
    }

    faqItems.forEach((item) => {
      const question = item.querySelector(".faq-question");
      
      if (!question) {
        console.warn("FAQ question element not found");
        return;
      }

      // Remover event listeners previos para evitar duplicados
      const newQuestion = question.cloneNode(true);
      question.parentNode?.replaceChild(newQuestion, question);

      newQuestion.addEventListener("click", (event) => {
        event.preventDefault();
        event.stopPropagation();
        
        // Comprueba si el elemento clickeado ya está abierto
        const isOpen = item.classList.contains("is-open");

        // Cierra todos los demás elementos antes de abrir el nuevo
        faqItems.forEach((otherItem) => {
          if (otherItem !== item) {
            otherItem.classList.remove("is-open");
          }
        });

        // Alterna la clase 'is-open' en el elemento clickeado
        if (isOpen) {
          item.classList.remove("is-open");
        } else {
          item.classList.add("is-open");
        }
      });
    });
  }

  // Inicializar cuando el DOM esté completamente cargado
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initializeFAQ);
  } else {
    // Si el DOM ya está cargado, ejecutar inmediatamente
    initializeFAQ();
  }

  // También inicializar después de navegación del lado del cliente (para SPAs)
  document.addEventListener("astro:page-load", initializeFAQ);
</script>

<style>
  .faq-item.is-open .faq-answer {
    /* Usamos un valor suficientemente grande para que el contenido quepa */
    max-height: 500px; /* Ajusta si tienes respuestas muy largas */
  }

  .faq-item.is-open .icon-plus {
    display: none;
  }

  .faq-item.is-open .icon-minus {
    display: block;
  }

  /* Estilos adicionales para mejor UX */
  .faq-item {
    transition: all 0.3s ease;
  }

  .faq-question:hover {
    background-color: rgba(255, 255, 255, 0.1);
  }

  .faq-answer {
    transition: max-height 0.3s ease-in-out;
  }
</style>