---
// CampusFinder.astro

// Interfaz actualizada para incluir las coordenadas geográficas
import { CircleArrowRight } from "@lucide/astro";

export interface Plantel {
  id: string;
  nombre: string;
  direccion: string;
  ciudad: string;
  url: string;
  imagen: string;
  lat: number;
  lon: number;
}

export interface Props {
  titulo?: string;
  planteles: Plantel[];
  ciudades?: string[];
  mostrarMasCercano?: boolean;
}

const {
  titulo = "Encuentra tu campus más cercano",
  planteles,
  ciudades = [],
  mostrarMasCercano = true,
} = Astro.props;

// Lógica para generar los tabs de ciudades (se ejecuta en el servidor)
const ciudadesDisponibles =
  ciudades.length > 0
    ? ciudades.filter((ciudad) => planteles.some((p) => p.ciudad === ciudad))
    : [...new Set(planteles.map((p) => p.ciudad))];

// Verificar si solo hay una ciudad y un plantel
const soloUnPlantel = planteles.length === 1 && ciudadesDisponibles.length === 1;
---

<div class="w-full mx-auto py-6 px-12" client:load>
  <div class="flex justify-between items-center mb-8 flex-wrap gap-4">
    <h1 class="text-3xl font-bold text-gray-800">{titulo}</h1>
    {
      mostrarMasCercano && !soloUnPlantel && (
        <button
          id="find-nearest-btn"
          class="flex items-center gap-2 text-gray-600 hover:text-gray-800 transition-colors"
        >
          <svg
            class="w-5 h-5"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"
            />
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"
            />
          </svg>
          <span>Mostrar el más cercano</span>
        </button>
      )
    }
  </div>

  <p
    id="nearest-campus-result"
    class="mb-6 text-center font-medium text-gray-700"
  >
  </p>

  {!soloUnPlantel && (
    <div class="flex flex-wrap gap-2 mb-6">
      <button
        class="px-4 py-2 rounded-full text-sm font-medium transition-colors"
        data-ciudad-tab="todos"
      >
        Todos
      </button>
      {
        ciudadesDisponibles.map((ciudad) => (
          <button
            class="px-4 py-2 rounded-full text-sm font-medium transition-colors"
            data-ciudad-tab={ciudad}
          >
            {ciudad}
          </button>
        ))
      }
    </div>
  )}

  <div class={`grid gap-12 ${soloUnPlantel ? 'grid-cols-1 max-w-2xl mx-auto' : 'grid-cols-1 md:grid-cols-2'}`}>
    {
      planteles.map((plantel) => (
        <div
          class="bg-white rounded-3xl shadow-lg overflow-hidden hover:shadow-xl transition-shadow campus-card"
          data-ciudad-card={plantel.ciudad}
          data-plantel-id={plantel.id}
        >
          <div class="flex">
            <div class="flex-1 p-6">
              <div class="flex items-center gap-2 mb-2">
                <svg
                  class="w-4 h-4 text-gray-500"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"
                  />
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"
                  />
                </svg>
                <span class="text-sm text-gray-600 uppercase tracking-wide">
                  {plantel.ciudad}
                </span>
              </div>
              <h3 class="text-xl font-bold text-gray-800 mb-2">
                {plantel.nombre}
              </h3>
              <p class="text-gray-600 text-sm mb-4 leading-relaxed">
                {plantel.direccion}
              </p>
              <div class="flex gap-3">
                <a
                  href={plantel.url}
                  class="bg-rojo-une text-white px-4 py-2 rounded text-sm font-medium hover:bg-red-700 transition-colors"
                >
                  CONOCE EL PLANTEL
                </a>
                <a
                  href="/contacto"
                  class=" text-blue-500 px-4 py-2 rounded text-sm font-medium hover:bg-gray-50 transition-colors flex items-center gap-2"
                >
                  Contactar
                  <CircleArrowRight />
                </a>
              </div>
            </div>
            <div class="w-48 flex-shrink-0 rounded-r-3xl overflow-hidden">
              <img
                src={plantel.imagen}
                alt={`Campus ${plantel.nombre}`}
                class="w-full h-full object-cover"
                loading="lazy"
              />
            </div>
          </div>
        </div>
      ))
    }
  </div>
</div>

<script define:vars={{ planteles, soloUnPlantel }}>
  // Solo ejecutar la lógica de filtros si hay más de un plantel
  if (!soloUnPlantel) {
    // --- Lógica del filtro de ciudades ---
    const filterButtons = document.querySelectorAll("[data-ciudad-tab]");
    const campusCards = document.querySelectorAll("[data-ciudad-card]");
    const activeClasses = "bg-blue-600 text-white";
    const inactiveClasses = "bg-gray-200 text-gray-700 hover:bg-gray-300";

    function setActiveTab(button) {
      filterButtons.forEach((btn) => {
        btn.className = `px-4 py-2 rounded-full text-sm font-medium transition-colors ${inactiveClasses}`;
      });
      button.className = `px-4 py-2 rounded-full text-sm font-medium transition-colors ${activeClasses}`;
    }

    filterButtons.forEach((button) => {
      button.addEventListener("click", () => {
        const targetCiudad = button.dataset.ciudadTab;
        setActiveTab(button);

        campusCards.forEach((card) => {
          const cardCiudad = card.dataset.ciudadCard;
          if (targetCiudad === "todos" || cardCiudad === targetCiudad) {
            card.style.display = "block";
          } else {
            card.style.display = "none";
          }
        });
      });
    });

    // Inicia con "Todos" activo
    const todosButton = document.querySelector('[data-ciudad-tab="todos"]');
    if (todosButton) {
      setActiveTab(todosButton);
    }
  }

  // --- Lógica para "Mostrar el más cercano" ---
  const findNearestBtn = document.getElementById("find-nearest-btn");
  const resultParagraph = document.getElementById("nearest-campus-result");

  if (findNearestBtn) {
    function getUserLocation() {
      return new Promise((resolve, reject) => {
        if (!navigator.geolocation) {
          reject(
            new Error("La geolocalización no es soportada por tu navegador.")
          );
        }
        navigator.geolocation.getCurrentPosition(resolve, reject);
      });
    }

    function haversineDistance(coords1, coords2) {
      function toRad(x) {
        return (x * Math.PI) / 180;
      }
      const R = 6371; // Radio de la Tierra en km
      const dLat = toRad(coords2.lat - coords1.lat);
      const dLon = toRad(coords2.lon - coords1.lon);
      const lat1 = toRad(coords1.lat);
      const lat2 = toRad(coords2.lat);
      const a =
        Math.sin(dLat / 2) * Math.sin(dLat / 2) +
        Math.sin(dLon / 2) * Math.sin(dLon / 2) * Math.cos(lat1) * Math.cos(lat2);
      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
      return R * c;
    }

    findNearestBtn.addEventListener("click", async () => {
      resultParagraph.textContent = "Buscando tu ubicación...";
      resultParagraph.style.color = "#374151";

      try {
        const position = await getUserLocation();
        const userCoords = {
          lat: position.coords.latitude,
          lon: position.coords.longitude,
        };
        resultParagraph.textContent = "Calculando la sucursal más cercana...";

        let nearestCampus = null;
        let minDistance = Infinity;

        // La variable 'planteles' ya está disponible gracias a define:vars
        planteles.forEach((plantel) => {
          const distance = haversineDistance(userCoords, {
            lat: plantel.lat,
            lon: plantel.lon,
          });
          if (distance < minDistance) {
            minDistance = distance;
            nearestCampus = plantel;
          }
        });

        if (nearestCampus) {
          resultParagraph.innerHTML = `📍 Según tu ubicación, el plantel más cercano es <strong>${nearestCampus.nombre}</strong> (a ${minDistance.toFixed(1)} km).`;
          const nearestCard = document.querySelector(
            `[data-plantel-id="${nearestCampus.id}"]`
          );
          if (nearestCard) {
            nearestCard.style.display = "block";
            nearestCard.scrollIntoView({ behavior: "smooth", block: "center" });
            nearestCard.style.transition = "all 0.3s ease-in-out";
            nearestCard.style.boxShadow = "0 0 0 3px rgba(59, 130, 246, 0.7)";
            setTimeout(() => {
              nearestCard.style.boxShadow = "";
            }, 3000);
          }
        }
      } catch (error) {
        console.error("Error de geolocalización:", error);
        let message = "No se pudo obtener tu ubicación. ";
        if (error.code === 1) {
          // PERMISSION_DENIED
          message +=
            "Por favor, permite el acceso a tu ubicación para usar esta función.";
        } else {
          message += "Inténtalo de nuevo.";
        }
        resultParagraph.textContent = message;
        resultParagraph.style.color = "#dc2626";
      }
    });
  }
</script>

<style>
  .bg-rojo-une {
    background-color: #dc2626;
  }
  .hover\:bg-rojo-une:hover {
    background-color: #b91c1c;
  }
</style>