---
// CampusFinder.astro
import { CircleArrowRight } from "@lucide/astro";

// Interfaces sin cambios
export interface Plantel {
  id: string;
  nombre: string;
  direccion: string;
  ciudad: string;
  url: string;
  imagen: string;
  
}

export interface Props {
  titulo?: string;
  actividades: Plantel[];
  ciudades?: string[];
}

const {
  titulo = "Encuentra tu campus más cercano",
  actividades,
  ciudades = [],
} = Astro.props;

// Lógica de servidor sin cambios
const ciudadesDisponibles =
  ciudades.length > 0
    ? ciudades.filter((ciudad) => actividades.some((p) => p.ciudad === ciudad))
    : [...new Set(actividades.map((p) => p.ciudad))];

const soloUnPlantel = actividades.length === 1;

// Pasamos los datos al cliente a través de atributos data-*
const componentProps = {
  actividades,
  soloUnPlantel,
};
---

<div
  id="campus-finder-wrapper"
  class="w-full mx-auto py-6 px-4 sm:px-6 md:px-12"
  client:load
  data-props={JSON.stringify(componentProps)}
>
  <div class="flex justify-between items-center mb-8 flex-wrap gap-4">
    <h1 class="text-3xl font-bold text-gray-800">{titulo}</h1>
  </div>

  {
    !soloUnPlantel && (
      <div class="flex flex-wrap justify-center gap-2 mb-6">
        {ciudadesDisponibles.map((ciudad) => (
          <button
            class="px-4 py-2 rounded-full text-sm font-medium transition-colors"
            data-ciudad-tab={ciudad}
          >
            {ciudad}
          </button>
        ))}
      </div>
    )
  }

  <div
    class={`hidden md:grid gap-6 ${soloUnPlantel ? "grid-cols-1 max-w-2xl mx-auto" : "grid-cols-1 md:grid-cols-4"}`}
    id="desktop-grid"
  >
    {
      actividades.map((plantel) => (
        <div
          class="bg-white  max-w-lg rounded-3xl shadow-lg overflow-hidden hover:shadow-xl transition-all duration-300 campus-card"
          data-ciudad-card={plantel.ciudad}
          data-plantel-id={plantel.id}
          data-plantel-nombre={plantel.nombre}
        >
          <div class="flex flex-col ">
            <div class="">
              <img
                src={plantel.imagen}
                alt={`Campus ${plantel.nombre}`}
                class="w-full h-48 object-cover"
                loading="lazy"
              />
            </div>
            <div class="flex-1 p-6">
              <div class="flex items-center gap-2 mb-2">
                <svg
                  class="w-4 h-4 text-gray-500"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <>
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"
                    />
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"
                    />
                  </>
                </svg>
                <span class="text-sm text-gray-600 uppercase tracking-wide">
                  {plantel.ciudad}
                </span>
              </div>
              <h3 class="text-xl font-bold text-gray-800 mb-2">
                {plantel.nombre}
              </h3>
              <p class="text-gray-600 text-sm mb-4 leading-relaxed">
                {plantel.direccion}
              </p>
              <div class="flex gap-3">
             
                <a
                  href={plantel.url} 
                  class="text-blue-500 px-4 py-2 rounded text-sm font-medium hover:bg-gray-50 transition-colors flex items-center gap-2"
                >
                  Conoce todos los detalles <CircleArrowRight />
                </a>
              </div>
            </div>
          </div>
        </div>
      ))
    }
  </div>

  <div class="block md:hidden splide" id="mobile-carousel">
    <div class="splide__track py-12">
      <ul class="splide__list">
        {
          actividades.map((plantel) => (
            <li class="splide__slide">
              <div
                class="bg-white rounded-3xl shadow-lg overflow-hidden transition-all duration-300 campus-card h-full"
                data-ciudad-card={plantel.ciudad}
                data-plantel-id={plantel.id}
                data-plantel-nombre={plantel.nombre}
              >
                <div class="flex flex-col h-full">
                  <div class="w-full h-48 rounded-t-3xl overflow-hidden">
                    <img
                      src={plantel.imagen}
                      alt={`Campus ${plantel.nombre}`}
                      class="w-full h-full object-cover"
                      loading="lazy"
                    />
                  </div>
                  <div class="flex-1 p-6">
                    <div class="flex items-center gap-2 mb-2">
                      <svg
                        class="w-4 h-4 text-gray-500"
                        fill="none"
                        stroke="currentColor"
                        viewBox="0 0 24 24"
                      >
                        <>
                          <path
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            stroke-width="2"
                            d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"
                          />
                          <path
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            stroke-width="2"
                            d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"
                          />
                        </>
                      </svg>
                      <span class="text-sm text-gray-600 uppercase tracking-wide">
                        {plantel.ciudad}
                      </span>
                    </div>
                    <h3 class="text-xl font-bold text-gray-800 mb-2">
                      {plantel.nombre}
                    </h3>
                    <p class="text-gray-600 text-sm mb-4 leading-relaxed">
                      {plantel.direccion}
                    </p>
                    <div class="flex flex-col justify-center items-center gap-3">
                      <a
                        href={plantel.url}
                        class="bg-rojo-une text-white px-4 py-2 rounded text-sm font-medium hover:bg-red-700 transition-colors"
                      >
                        CONOCE EL PLANTEL
                      </a>
                      <a
                        href="/contacto"
                        class=" text-blue-500 px-4 py-2 rounded text-sm font-medium hover:bg-gray-50 transition-colors flex items-center gap-2"
                      >
                        Contactar <CircleArrowRight />
                      </a>
                    </div>
                  </div>
                </div>
              </div>
            </li>
          ))
        }
      </ul>
    </div>
  </div>
</div>

<style>
  .bg-rojo-une {
    background-color: #dc2626;
  }
  .hover\:bg-rojo-une:hover {
    background-color: #b91c1c;
  }
  /* Estilos para resaltar la tarjeta */
  .highlight-card {
    box-shadow: 0 0 0 3px rgba(220, 38, 38, 0.7) !important;
    transform: scale(1.02);
  }
  /* Estilos Splide */
  .splide__slide {
    padding: 0 0.5rem;
  }
  .splide__arrow {
    background: rgba(255, 255, 255, 0.9);
    border: 1px solid #e2e8f0;
  }
  .splide__arrow:hover {
    background: #ffffff;
  }
  .splide__arrow svg {
    fill: #64748b;
  }
  .splide__pagination__page.is-active {
    background: #dc2626;
  }
</style>

<script>
  import Splide from "@splidejs/splide";
  import "@splidejs/splide/dist/css/splide.min.css";

  // Función para inicializar toda la lógica del cliente
  function initCampusFinder() {
    const wrapper = document.getElementById("campus-finder-wrapper");
    if (!wrapper) return;

    // 1. Leer las props del atributo data-*
    const { actividades, soloUnPlantel } = JSON.parse(wrapper.dataset.props);
    let splideInstance = null;

    // 2. Inicializar el carrusel (Splide) en vistas móviles
    const mobileCarousel = document.getElementById("mobile-carousel");
    if (mobileCarousel && window.innerWidth < 768) {
      splideInstance = new Splide("#mobile-carousel", {
        type: "loop",
        padding: "1.3rem",
        perPage: 1,
        gap: ".1rem",
        arrows: false,
        pagination: false,
        autoplay: true,
        interval: 4000,
        pauseOnHover: true,
      }).mount();
    }

    // Si solo hay un plantel, no se necesita la lógica de filtros
    if (soloUnPlantel) return;

    // 3. Lógica del filtro de ciudades
    const filterButtons = document.querySelectorAll("[data-ciudad-tab]");
    const campusCards = document.querySelectorAll(".campus-card");
    const activeClasses = "bg-blue-600 text-white";
    const inactiveClasses = "bg-gray-200 text-gray-700 hover:bg-gray-300";

    const setActiveTab = (button) => {
      filterButtons.forEach((btn) => {
        btn.className = `px-4 py-2 rounded-full text-sm font-medium transition-colors ${inactiveClasses}`;
      });
      button.className = `px-4 py-2 rounded-full text-sm font-medium transition-colors ${activeClasses}`;
    };

    const filterCards = (targetCiudad) => {
      let visibleSlides = [];
      campusCards.forEach((card) => {
        const cardCiudad = card.dataset.ciudadCard;
        const parentContainer = card.closest(".splide__slide") || card;
        const isVisible = cardCiudad === targetCiudad;
        parentContainer.style.display = isVisible ? "block" : "none";
        if (isVisible && card.closest(".splide__slide")) {
          visibleSlides.push(parentContainer);
        }
      });

      // Actualizar el carrusel si existe
      if (splideInstance) {
        // Eliminar los slides que no corresponden
        const list = splideInstance.Components.Elements.list;
        list.innerHTML = ""; // Limpiar la lista
        visibleSlides.forEach((slide) => list.appendChild(slide)); // Re-agregar los visibles
        splideInstance.refresh();
      }
    };

    filterButtons.forEach((button) => {
      button.addEventListener("click", () => {
        const targetCiudad = button.dataset.ciudadTab;
        setActiveTab(button);
        filterCards(targetCiudad);
      });
    });

    // 4. Buscar y activar el plantel "Milenio" por defecto
    const milenioCard = document.querySelector('.campus-card[data-plantel-nombre*="Milenio"]');
    if (milenioCard) {
      const milenioCiudad = milenioCard.dataset.ciudadCard;
      const milenioButton = document.querySelector(`[data-ciudad-tab="${milenioCiudad}"]`);
      
      if (milenioButton) {
        setActiveTab(milenioButton);
        filterCards(milenioCiudad);
      }
    } else {
      // Si no existe "Milenio", mostrar la primera ciudad disponible
      const firstButton = filterButtons[0];
      if (firstButton) {
        setActiveTab(firstButton);
        filterCards(firstButton.dataset.ciudadTab);
      }
    }
  }

  // Ejecutar el script una vez el DOM esté listo
  document.addEventListener("DOMContentLoaded", initCampusFinder);
</script>