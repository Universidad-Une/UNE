---

---

<div class="bg-gray-50 rounded-lg p-3 mb-6">
  <div class="flex items-center justify-between text-sm mb-2">
    <span class="text-gray-600" id="progress-text">Solo toma 2 minutos</span>
    <span class="text-green-600 font-medium">‚úì Sin compromiso</span>
  </div>
  <div class="w-full bg-gray-200 rounded-full h-2 overflow-hidden">
    <div
      class="h-2 bg-gradient-to-r from-blue-400 to-blue-600 rounded-full transition-all duration-500 ease-out"
      id="form-progress"
      style="width: 0%"
    >
    </div>
  </div>
  <div class="mt-2 text-xs text-gray-500" id="progress-message">
    Completa los campos para continuar
  </div>
</div>

<form id="education-form" class="space-y-3 lg:space-y-4 flex-1 lg:flex-none">
  <!-- Nombre -->
  <div>
    <input
      type="text"
      name="nombre"
      placeholder="Nombre"
      class="w-full px-2 lg:px-4 py-1.5 lg:py-2.5 border-b focus:border-blue-500 outline-none transition-colors bg-transparent text-sm lg:text-base"
      required
    />
  </div>

  <!-- Apellidos completos (un solo campo) -->
  <div class="relative">
    <input
      type="text"
      name="apellidos"
      id="apellidos-input"
      placeholder="Apellidos completos"
      class="w-full px-2 lg:px-4 py-1.5 lg:py-2.5 border-b focus:border-blue-500 outline-none transition-colors bg-transparent text-sm lg:text-base"
      required
    />
    <!-- Campos ocultos para los apellidos separados -->
    <input type="hidden" name="apellido_p" id="apellido_p_hidden" />
    <input type="hidden" name="apellido_m" id="apellido_m_hidden" />
  </div>

  <!-- Correo electr√≥nico con autocompletado -->
  <div class="relative">
    <input
      type="email"
      name="correo"
      id="correo-input"
      placeholder="Correo electr√≥nico"
      class="w-full px-2 lg:px-4 py-1.5 lg:py-2.5 border-b focus:border-blue-500 outline-none transition-colors bg-transparent text-sm lg:text-base"
      autocomplete="off"
    />
    <!-- Lista de sugerencias -->
    <div
      id="email-suggestions"
      class="absolute top-full left-0 right-0 bg-white border border-gray-300 rounded-md shadow-lg z-50 hidden max-h-40 overflow-y-auto"
    >
    </div>
  </div>

  <!-- Tel√©fono -->
  <div>
    <input
      type="tel"
      name="telefono"
      placeholder="Tel√©fono"
      class="w-full px-2 lg:px-4 py-1.5 lg:py-2.5 border-b focus:border-blue-500 outline-none transition-colors bg-transparent text-sm lg:text-base"
      required
    />
  </div>

  <!-- Nivel educativo -->
  <div>
    <label class="text-xs lg:text-sm text-gray-600 mb-2 block"
      >Nivel educativo</label
    >
    <select
      name="nivelEducativo"
      id="nivel-educativo"
      class="w-full px-2 lg:px-4 py-1.5 lg:py-2.5 border-b focus:border-blue-500 outline-none transition-colors bg-transparent text-gray-500 text-sm lg:text-base"
      required
    >
      <option value="">Selecciona una opci√≥n</option>
    </select>
  </div>

  <!-- √Årea de conocimiento -->
  <div id="area-container" class="hidden">
    <label class="text-xs lg:text-sm text-gray-600 mb-2 block"
      >√Årea de conocimiento</label
    >
    <select
      name="areaConocimiento"
      id="area-conocimiento"
      class="w-full px-2 lg:px-4 py-1.5 lg:py-2.5 border-b focus:border-blue-500 outline-none transition-colors bg-transparent text-gray-500 text-sm lg:text-base"
    >
      <option value="">Selecciona una opci√≥n</option>
    </select>
  </div>

  <!-- Programa de inter√©s -->
  <div id="programa-container" class="hidden">
    <label class="text-xs lg:text-sm text-gray-600 mb-2 block"
      >Programa de inter√©s</label
    >
    <select
      name="programaInteres"
      id="programa-interes"
      class="w-full px-2 lg:px-4 py-1.5 lg:py-2.5 border-b focus:border-blue-500 outline-none transition-colors bg-transparent text-gray-500 text-sm lg:text-base"
    >
      <option value="">Selecciona una opci√≥n</option>
    </select>
  </div>

  <!-- Plantel de inter√©s -->
  <div>
    <label class="text-xs lg:text-sm text-gray-600 mb-2 block"
      >Plantel de inter√©s</label
    >
    <select
      name="plantelInteres"
      id="plantel-interes"
      class="w-full px-2 lg:px-4 py-1.5 lg:py-2.5 border-b focus:border-blue-500 outline-none transition-colors bg-transparent text-gray-500 text-sm lg:text-base"
      required
      disabled
    >
      <option value="">Selecciona una opci√≥n</option>
    </select>
  </div>

  <!-- Modalidad -->
  <div id="modalidad-container" class="hidden">
    <label class="text-xs lg:text-sm text-gray-600 mb-2 block">Modalidad</label>
    <div id="modalidad-options" class="flex flex-wrap gap-2">
      <!-- Las opciones de modalidad se generar√°n din√°micamente -->
    </div>
  </div>

  <!-- Incorporaci√≥n (oculto, se selecciona autom√°ticamente) -->
  <input type="hidden" name="incorporacion" id="incorporacion-hidden" />

  <!-- Bot√≥n de env√≠o -->
  <div class="pt-2 lg:pt-4">
    <button
      type="submit"
      class="w-full bg-red-500 hover:bg-red-600 text-white font-semibold py-2.5 lg:py-3 px-6 rounded-md transition-all duration-300 text-sm lg:text-base disabled:opacity-50 disabled:cursor-not-allowed relative overflow-hidden"
      aria-label="ENVIAR"
      title="ENVIAR"
      id="submit-button"
      disabled
    >
      <span id="button-text">COMPLETAR REGISTRO</span>
      <div
        class="absolute inset-0 bg-gradient-to-r from-transparent via-white to-transparent opacity-0 transform -skew-x-12 group-hover:opacity-20 transition-all duration-700"
        id="button-shine"
      >
      </div>
    </button>
  </div>
</form>

<!-- Modal de error -->
<div
  id="error-modal"
  class="hidden fixed inset-0  flex items-center justify-center z-50 p-4"
>
  <div class="bg-white rounded-lg shadow-xl max-w-md w-full p-6">
    <div class="flex items-start mb-4">
      <div class="flex-shrink-0">
        <svg
          class="w-6 h-6 text-red-600"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"
          ></path>
        </svg>
      </div>
      <div class="ml-3 flex-1">
        <h3 class="text-lg font-medium text-gray-900 mb-2">
          Error al enviar solicitud
        </h3>
        <p id="modal-error-message" class="text-sm text-gray-600 mb-4"></p>
        <div
          class="text-sm text-gray-600 bg-gray-50 p-3 rounded border border-gray-200"
        >
          <p class="font-semibold mb-1">Si el problema persiste:</p>
          <p>Por favor, env√≠e su solicitud por correo a:</p>
          <a
            href="mailto:informes@universidad-une.com"
            class="text-blue-600 hover:text-blue-700 font-medium"
          >
            informes@universidad-une.com
          </a>
        </div>
      </div>
    </div>
    <div class="flex gap-3 mt-6">
      <button
        id="retry-button"
        class="flex-1 bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded-md font-medium transition-colors"
      >
        Intentar de nuevo
      </button>
      <button
        id="close-modal-button"
        class="flex-1 bg-gray-200 hover:bg-gray-300 text-gray-700 py-2 px-4 rounded-md font-medium transition-colors"
      >
        Cerrar
      </button>
    </div>
  </div>
</div>

<script>
  import { FormValidator } from "src/helpers/ContactFormConfig";

  document.addEventListener("DOMContentLoaded", function () {
    // Inicializar el FormValidator existente
    new FormValidator("#education-form", {
      apiUrl: "https://intranet.universidad-une.com/api/createleads",
    });

    // Sistema de progreso mejorado
    class FormProgressTracker {
      constructor() {
        this.form = document.getElementById("education-form");
        this.progressBar = document.getElementById("form-progress");
        this.progressText = document.getElementById("progress-text");
        this.progressMessage = document.getElementById("progress-message");
        this.submitButton = document.getElementById("submit-button");

        this.messages = {
          0: {
            text: "¬°Empecemos! üöÄ",
            message: "Completa tus datos personales",
          },
          20: {
            text: "¬°Buen comienzo! üëè",
            message: "Sigue completando tus datos",
          },
          40: {
            text: "¬°Vas muy bien! ‚≠ê",
            message: "Ya casi tienes la mitad",
          },
          60: {
            text: "¬°Excelente progreso! üéØ",
            message: "Solo faltan unos campos m√°s",
          },
          80: {
            text: "¬°Casi listo! üî•",
            message: "Un √∫ltimo esfuerzo",
          },
          100: {
            text: "¬°Perfecto! ‚úÖ",
            message: "Todo listo para enviar",
          },
        };

        this.init();
      }

      init() {
        // Agregar listeners a todos los campos
        const allInputs = this.form.querySelectorAll("input, select");
        allInputs.forEach((input) => {
          input.addEventListener("input", () => this.updateProgress());
          input.addEventListener("change", () => this.updateProgress());
        });

        // NUEVO: Listener espec√≠fico para radio buttons de modalidad
        const modalidadContainer = document.getElementById("modalidad-options");
        const modalidadObserver = new MutationObserver(() => {
          // Cuando se agregan nuevos radio buttons, agregar listeners
          const radioButtons = document.querySelectorAll(
            'input[name="modalidad"]'
          );
          radioButtons.forEach((radio) => {
            radio.addEventListener("change", () => this.updateProgress());
          });
          this.updateProgress();
        });

        modalidadObserver.observe(modalidadContainer, {
          childList: true,
          subtree: true,
        });

        // Escuchar cambios en campos din√°micos (√°rea de conocimiento, programa, modalidad)
        const observer = new MutationObserver(() => {
          this.updateProgress();
        });

        observer.observe(document.getElementById("area-container"), {
          attributes: true,
          attributeFilter: ["class"],
        });
        observer.observe(document.getElementById("programa-container"), {
          attributes: true,
          attributeFilter: ["class"],
        });
        observer.observe(document.getElementById("modalidad-container"), {
          attributes: true,
          attributeFilter: ["class"],
        });

        // Observar cambios en el atributo disabled del plantel
        observer.observe(document.getElementById("plantel-interes"), {
          attributes: true,
          attributeFilter: ["disabled"],
        });

        // Progreso inicial
        this.updateProgress();
      }

      getRequiredFields() {
        const fields = [];

        // Campos base siempre requeridos
        const baseFields = [
          "nombre",
          "apellidos",
          "correo",
          "telefono",
          "nivelEducativo",
        ];

        baseFields.forEach((fieldName) => {
          const field = this.form.querySelector(`[name="${fieldName}"]`);
          if (field && !field.disabled) {
            fields.push({ name: fieldName, element: field });
          }
        });

        // Plantel solo si est√° habilitado
        const plantelField = this.form.querySelector('[name="plantelInteres"]');
        if (plantelField && !plantelField.disabled) {
          fields.push({ name: "plantelInteres", element: plantelField });
        }

        // √Årea de conocimiento solo si est√° visible
        const areaContainer = document.getElementById("area-container");
        if (!areaContainer.classList.contains("hidden")) {
          const areaField = this.form.querySelector(
            '[name="areaConocimiento"]'
          );
          if (areaField && !areaField.disabled) {
            fields.push({ name: "areaConocimiento", element: areaField });
          }
        }

        // Programa solo si est√° visible
        const programaContainer = document.getElementById("programa-container");
        if (!programaContainer.classList.contains("hidden")) {
          const programaField = this.form.querySelector(
            '[name="programaInteres"]'
          );
          if (programaField && !programaField.disabled) {
            fields.push({ name: "programaInteres", element: programaField });
          }
        }

        // Modalidad solo si est√° visible y tiene opciones
        const modalidadContainer = document.getElementById(
          "modalidad-container"
        );
        if (!modalidadContainer.classList.contains("hidden")) {
          const modalidadInputs = document.querySelectorAll(
            'input[name="modalidad"]'
          );
          if (modalidadInputs.length > 0) {
            fields.push({ name: "modalidad", element: modalidadInputs });
          }
        }

        return fields;
      }

      updateProgress() {
        const requiredFields = this.getRequiredFields();
        let completedFields = 0;

        requiredFields.forEach((field) => {
          if (field.name === "modalidad") {
            // Verificar si alg√∫n radio button est√° marcado
            const isModalidadSelected = Array.from(field.element).some(
              (input) => input.checked
            );
            console.log("Modalidad seleccionada:", isModalidadSelected);
            if (isModalidadSelected) completedFields++;
          } else {
            if (field.element.value.trim() !== "") {
              completedFields++;
            }
          }
        });

        const totalRequired = requiredFields.length;
        const progress =
          totalRequired > 0 ? (completedFields / totalRequired) * 100 : 0;

        // DEBUG
        console.log("Campos requeridos:", totalRequired);
        console.log("Campos completados:", completedFields);
        console.log("Progreso:", progress);

        // Detalle de cada campo
        requiredFields.forEach((field) => {
          if (field.name === "modalidad") {
            const selected = Array.from(field.element).find(
              (input) => input.checked
            );
            console.log(
              `${field.name}:`,
              selected ? selected.value : "NO SELECCIONADO"
            );
          } else {
            console.log(`${field.name}:`, field.element.value || "VAC√çO");
          }
        });

        // Actualizar barra de progreso
        this.progressBar.style.width = `${progress}%`;

        // Cambiar color de la barra seg√∫n el progreso
        if (progress < 30) {
          this.progressBar.className =
            "h-2 bg-gradient-to-r from-blue-400 to-blue-500 rounded-full transition-all duration-500 ease-out";
        } else if (progress < 70) {
          this.progressBar.className =
            "h-2 bg-gradient-to-r from-purple-400 to-indigo-500 rounded-full transition-all duration-500 ease-out";
        } else {
          this.progressBar.className =
            "h-2 bg-gradient-to-r from-green-400 to-green-600 rounded-full transition-all duration-500 ease-out";
        }

        // Actualizar mensajes
        const messageKey = this.getMessageKey(progress);
        if (this.messages[messageKey]) {
          this.progressText.textContent = this.messages[messageKey].text;
          this.progressMessage.textContent = this.messages[messageKey].message;

          if (progress === 100) {
            this.progressBar.style.animation = "pulse 1s ease-in-out 3";
          }
        }

        // Habilitar/deshabilitar bot√≥n de env√≠o
        this.submitButton.disabled = progress < 100;

        // Actualizar texto del bot√≥n seg√∫n el progreso
        this.updateButtonState(progress);

        // Feedback visual adicional
        this.addVisualFeedback(progress);
      }

      getMessageKey(progress) {
        if (progress === 0) return 0;
        if (progress < 20) return 0;
        if (progress < 40) return 20;
        if (progress < 60) return 40;
        if (progress < 80) return 60;
        if (progress < 100) return 80;
        return 100;
      }

      addVisualFeedback(progress) {
        this.progressText.classList.remove(
          "animate-bounce",
          "text-green-600",
          "font-bold"
        );

        if (progress === 100) {
          this.progressText.classList.add(
            "animate-bounce",
            "text-green-600",
            "font-bold"
          );
          this.showCelebration();
        }
      }

      updateButtonState(progress) {
        const buttonText = document.getElementById("button-text");
        const buttonShine = document.getElementById("button-shine");

        if (progress === 100) {
          buttonText.textContent = "¬°ENVIAR!";
          this.submitButton.classList.add(
            "animate-pulse",
            "shadow-lg",
            "shadow-red-500/25",
            "scale-105",
            "group"
          );
          buttonShine.style.animation = "shine 2s ease-in-out infinite";
          this.submitButton.addEventListener(
            "mouseenter",
            this.buttonHoverEffect
          );
          this.submitButton.addEventListener(
            "mouseleave",
            this.buttonLeaveEffect
          );
        } else {
          buttonText.textContent = "COMPLETAR REGISTRO";
          this.submitButton.classList.remove(
            "animate-pulse",
            "shadow-lg",
            "shadow-red-500/25",
            "scale-105",
            "group"
          );
          buttonShine.style.animation = "none";
          this.submitButton.removeEventListener(
            "mouseenter",
            this.buttonHoverEffect
          );
          this.submitButton.removeEventListener(
            "mouseleave",
            this.buttonLeaveEffect
          );
        }
      }

      buttonHoverEffect = () => {
        this.submitButton.style.transform = "scale(1.08) translateY(-2px)";
        this.submitButton.style.boxShadow =
          "0 20px 25px -5px rgba(239, 68, 68, 0.4), 0 10px 10px -5px rgba(239, 68, 68, 0.04)";
      };

      buttonLeaveEffect = () => {
        this.submitButton.style.transform = "scale(1.05)";
        this.submitButton.style.boxShadow =
          "0 10px 15px -3px rgba(239, 68, 68, 0.25), 0 4px 6px -2px rgba(239, 68, 68, 0.05)";
      };

      showCelebration() {
        const celebration = document.createElement("div");
        celebration.innerHTML = "üéâ";
        celebration.style.cssText = `
      position: absolute;
      top: 10px;
      right: 10px;
      font-size: 1.5rem;
      animation: fadeInOut 2s ease-in-out;
      pointer-events: none;
    `;

        this.progressText.parentElement.style.position = "relative";
        this.progressText.parentElement.appendChild(celebration);

        setTimeout(() => {
          if (celebration.parentElement) {
            celebration.remove();
          }
        }, 2000);
      }
    }

    // Inicializar el tracker de progreso
    new FormProgressTracker();
  });
</script>

<style>
  /* Estilos para los radio buttons personalizados */
  input[type="radio"]:checked + span {
    background-color: #3b82f6;
    color: white;
    border-color: #3b82f6;
  }

  /* Animaciones y efectos mejorados */
  @keyframes pulse {
    0%,
    100% {
      transform: scaleY(1);
    }
    50% {
      transform: scaleY(1.1);
    }
  }

  @keyframes fadeInOut {
    0% {
      opacity: 0;
      transform: translateY(10px) scale(0.8);
    }
    50% {
      opacity: 1;
      transform: translateY(0) scale(1.2);
    }
    100% {
      opacity: 0;
      transform: translateY(-10px) scale(0.8);
    }
  }

  @keyframes shine {
    0% {
      transform: translateX(-100%) skewX(-12deg);
      opacity: 0;
    }
    50% {
      opacity: 0.6;
    }
    100% {
      transform: translateX(200%) skewX(-12deg);
      opacity: 0;
    }
  }

  /* Efectos hover mejorados */
  details[open] {
    background: linear-gradient(135deg, #f3f4f6, #e5e7eb);
  }

  /* Responsive */
  @media (max-width: 768px) {
    iframe {
      height: 300px;
    }

    .grid-cols-2 {
      grid-template-columns: 1fr 1fr;
    }
  }

  /* Efectos de entrada */
  @keyframes slideInFromLeft {
    from {
      opacity: 0;
      transform: translateX(-30px);
    }
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }

  @keyframes slideInFromRight {
    from {
      opacity: 0;
      transform: translateX(30px);
    }
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }

  .animate-slide-left {
    animation: slideInFromLeft 0.8s ease-out;
  }

  .animate-slide-right {
    animation: slideInFromRight 0.8s ease-out;
  }
</style>
