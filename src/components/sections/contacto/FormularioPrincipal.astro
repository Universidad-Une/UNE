---
// DynamicEducationForm.astro
import { programasEducativos } from "@helpers/estructura_educativa.js";
---

<form id="education-form" class="space-y-3 lg:space-y-4 flex-1 lg:flex-none">
  <!-- Nombre -->
  <div>
    <input
      type="text"
      name="nombre"
      placeholder="Nombre"
      class="w-full px-2 lg:px-4 py-1.5 lg:py-2.5 border-b focus:border-blue-500 outline-none transition-colors bg-transparent text-sm lg:text-base"
      required
    />
  </div>

  <!-- Apellidos completos -->
  <div>
    <input
      type="text"
      name="apellido_p"
      placeholder="Apellido paterno"
      class="w-full px-2 lg:px-4 py-1.5 lg:py-2.5 border-b focus:border-blue-500 outline-none transition-colors bg-transparent text-sm lg:text-base"
      required
    />
  </div>
  <div>
    <input
      type="text"
      name="apellido_m"
      placeholder="Apellido materno"
      class="w-full px-2 lg:px-4 py-1.5 lg:py-2.5 border-b focus:border-blue-500 outline-none transition-colors bg-transparent text-sm lg:text-base"
      required
    />
  </div>

  <!-- Correo electrónico -->
  <div>
    <input
      type="email"
      name="correo"
      placeholder="Correo electrónico"
      class="w-full px-2 lg:px-4 py-1.5 lg:py-2.5 border-b focus:border-blue-500 outline-none transition-colors bg-transparent text-sm lg:text-base"
      required
    />
  </div>

  <!-- Teléfono -->
  <div>
    <input
      type="tel"
      name="telefono"
      placeholder="Teléfono"
      class="w-full px-2 lg:px-4 py-1.5 lg:py-2.5 border-b focus:border-blue-500 outline-none transition-colors bg-transparent text-sm lg:text-base"
      required
    />
  </div>

  <!-- Nivel educativo -->
  <div>
    <label class="text-xs lg:text-sm text-gray-600 mb-2 block"
      >Nivel educativo</label
    >
    <select
      name="nivelEducativo"
      id="nivel-educativo"
      class="w-full px-2 lg:px-4 py-1.5 lg:py-2.5 border-b focus:border-blue-500 outline-none transition-colors bg-transparent text-gray-500 text-sm lg:text-base"
      required
    >
      <option value="">Selecciona una opción</option>
    </select>
  </div>

  <!-- Área de conocimiento -->
  <div id="area-container" class="hidden">
    <label class="text-xs lg:text-sm text-gray-600 mb-2 block"
      >Área de conocimiento</label
    >
    <select
      name="areaConocimiento"
      id="area-conocimiento"
      class="w-full px-2 lg:px-4 py-1.5 lg:py-2.5 border-b focus:border-blue-500 outline-none transition-colors bg-transparent text-gray-500 text-sm lg:text-base"
    >
      <option value="">Selecciona una opción</option>
    </select>
  </div>

  <!-- Programa de interés -->
  <div id="programa-container" class="hidden">
    <label class="text-xs lg:text-sm text-gray-600 mb-2 block"
      >Programa de interés</label
    >
    <select
      name="programaInteres"
      id="programa-interes"
      class="w-full px-2 lg:px-4 py-1.5 lg:py-2.5 border-b focus:border-blue-500 outline-none transition-colors bg-transparent text-gray-500 text-sm lg:text-base"
    >
      <option value="">Selecciona una opción</option>
    </select>
  </div>

  <!-- Plantel de interés -->
  <div>
    <label class="text-xs lg:text-sm text-gray-600 mb-2 block"
      >Plantel de interés</label
    >
    <select
      name="plantelInteres"
      id="plantel-interes"
      class="w-full px-2 lg:px-4 py-1.5 lg:py-2.5 border-b focus:border-blue-500 outline-none transition-colors bg-transparent text-gray-500 text-sm lg:text-base"
      required
      disabled
    >
      <option value="">Selecciona una opción</option>
    </select>
  </div>

  <!-- Modalidad -->
  <div id="modalidad-container" class="hidden">
    <label class="text-xs lg:text-sm text-gray-600 mb-2 block">Modalidad</label>
    <div id="modalidad-options" class="flex flex-wrap gap-2">
      <!-- Las opciones de modalidad se generarán dinámicamente -->
    </div>
  </div>

  <!-- Incorporación (oculto, se selecciona automáticamente) -->
  <input type="hidden" name="incorporacion" id="incorporacion-hidden" />

  <!-- Botón de envío -->
  <div class="pt-2 lg:pt-4">
    <button
      type="submit"
      class="w-full bg-red-500 hover:bg-red-600 text-white font-semibold py-2.5 lg:py-3 px-6 rounded-md transition-colors duration-200 text-sm lg:text-base"
      aria-label="ENVIAR MENSAJE"
      title="ENVIAR MENSAJE"
    >
      ENVIAR MENSAJE
    </button>
  </div>
</form>

<script define:vars={{ programasEducativos }}>
  // ==========================================
  // FORMULARIO DINÁMICO CON ESTRUCTURA_EDUCATIVA.JS
  // ==========================================

  // Configuración de mapeo de nombres
  const nivelMapping = {
    Licenciaturas: {
      key: "licenciaturas",
      nombre: "Licenciatura",
      requiereArea: true,
      requierePrograma: true,
    },
    Secundaria: {
      key: "secundaria",
      nombre: "Secundaria",
      requiereArea: false,
      requierePrograma: true,
    },
    Primaria: {
      key: "primaria",
      nombre: "Primaria",
      requiereArea: false,
      requierePrograma: true,
    },
    Bachillerato: {
      key: "bachillerato",
      nombre: "Bachillerato",
      requiereArea: false,
      requierePrograma: true,
    },
    Especialidades: {
      key: "especialidades",
      nombre: "Especialidad",
      requiereArea: true,
      requierePrograma: true,
    },
    Maestrías: {
      key: "Maestrías",
      nombre: "Maestría",
      requiereArea: true,
      requierePrograma: true,
    },
    Continua: {
      key: "continua",
      nombre: "Educación Continua",
      requiereArea: true,
      requierePrograma: true,
    },
  };

  // Función para procesar datos de estructura educativa
  function processEducationData(estructuraEducativa) {
    const processedData = {};

    for (const [nivel, contenido] of Object.entries(estructuraEducativa)) {
      if (!nivelMapping[nivel]) continue;

      const config = nivelMapping[nivel];
      processedData[config.key] = {
        nombre: config.nombre,
        requiereArea: config.requiereArea,
        requierePrograma: config.requierePrograma,
        areas: {},
        todosLosPlanteles: new Set(),
        todasLasModalidades: new Set(),
        todasLasIncorporaciones: new Set(),
      };

      // Procesar áreas
      for (const [area, programas] of Object.entries(contenido)) {
        processedData[config.key].areas[area] = {
          programas: {},
          planteles: new Set(),
          modalidades: new Set(),
          incorporaciones: new Set(),
        };

        // Procesar programas en cada área
        for (const [programa, planteles] of Object.entries(programas)) {
          processedData[config.key].areas[area].programas[programa] = {
            planteles: {},
            modalidades: new Set(),
            incorporaciones: new Set(),
          };

          // Procesar planteles en cada programa
          for (const [plantel, infoPlantel] of Object.entries(planteles)) {
            processedData[config.key].areas[area].programas[programa].planteles[
              plantel
            ] = {
              modalidades: [],
              incorporaciones: [],
            };

            // Procesar información de cada plantel
            infoPlantel.forEach((info) => {
              const modalidad = info.modalidad;
              const incorporacion = info.incorporacion;

              // Agregar a programa específico
              processedData[config.key].areas[area].programas[
                programa
              ].planteles[plantel].modalidades.push(modalidad);
              processedData[config.key].areas[area].programas[
                programa
              ].planteles[plantel].incorporaciones.push(incorporacion);

              // Agregar a conjuntos generales
              processedData[config.key].areas[area].planteles.add(plantel);
              processedData[config.key].areas[area].modalidades.add(modalidad);
              processedData[config.key].areas[area].incorporaciones.add(
                incorporacion
              );
              processedData[config.key].areas[area].programas[
                programa
              ].modalidades.add(modalidad);
              processedData[config.key].areas[area].programas[
                programa
              ].incorporaciones.add(incorporacion);
              processedData[config.key].todosLosPlanteles.add(plantel);
              processedData[config.key].todasLasModalidades.add(modalidad);
              processedData[config.key].todasLasIncorporaciones.add(
                incorporacion
              );
            });

            // Eliminar duplicados
            processedData[config.key].areas[area].programas[programa].planteles[
              plantel
            ].modalidades = [
              ...new Set(
                processedData[config.key].areas[area].programas[
                  programa
                ].planteles[plantel].modalidades
              ),
            ];
            processedData[config.key].areas[area].programas[programa].planteles[
              plantel
            ].incorporaciones = [
              ...new Set(
                processedData[config.key].areas[area].programas[
                  programa
                ].planteles[plantel].incorporaciones
              ),
            ];
          }

          // Convertir Sets a Arrays ordenados para programas
          processedData[config.key].areas[area].programas[
            programa
          ].modalidades = Array.from(
            processedData[config.key].areas[area].programas[programa]
              .modalidades
          ).sort();
          processedData[config.key].areas[area].programas[
            programa
          ].incorporaciones = Array.from(
            processedData[config.key].areas[area].programas[programa]
              .incorporaciones
          ).sort();
        }

        // Convertir Sets a Arrays ordenados para áreas
        processedData[config.key].areas[area].planteles = Array.from(
          processedData[config.key].areas[area].planteles
        ).sort();
        processedData[config.key].areas[area].modalidades = Array.from(
          processedData[config.key].areas[area].modalidades
        ).sort();
        processedData[config.key].areas[area].incorporaciones = Array.from(
          processedData[config.key].areas[area].incorporaciones
        ).sort();
      }

      // Convertir Sets generales a Arrays ordenados
      processedData[config.key].todosLosPlanteles = Array.from(
        processedData[config.key].todosLosPlanteles
      ).sort();
      processedData[config.key].todasLasModalidades = Array.from(
        processedData[config.key].todasLasModalidades
      ).sort();
      processedData[config.key].todasLasIncorporaciones = Array.from(
        processedData[config.key].todasLasIncorporaciones
      ).sort();
    }

    return processedData;
  }

  // Procesar datos
  const processedData = processEducationData(programasEducativos);

  // ==========================================
  // ELEMENTOS DEL DOM
  // ==========================================
  const nivelEducativoSelect = document.getElementById("nivel-educativo");
  const areaContainer = document.getElementById("area-container");
  const areaConocimientoSelect = document.getElementById("area-conocimiento");
  const programaContainer = document.getElementById("programa-container");
  const programaInteresSelect = document.getElementById("programa-interes");
  const plantelInteresSelect = document.getElementById("plantel-interes");
  const modalidadContainer = document.getElementById("modalidad-container");
  const modalidadOptions = document.getElementById("modalidad-options");
  const incorporacionHidden = document.getElementById("incorporacion-hidden");
  const form = document.getElementById("education-form");

  // ==========================================
  // FUNCIONES AUXILIARES
  // ==========================================

  function clearSelect(selectElement) {
    if (!selectElement) return;
    selectElement.innerHTML = '<option value="">Selecciona una opción</option>';
  }

  function populateSelect(
    selectElement,
    options,
    placeholder = "Selecciona una opción"
  ) {
    if (!selectElement) return;

    clearSelect(selectElement);
    selectElement.querySelector("option").textContent = placeholder;

    options.forEach((option) => {
      const optionElement = document.createElement("option");
      optionElement.value = option;
      optionElement.textContent = option;
      selectElement.appendChild(optionElement);
    });
  }

  function hideContainer(container) {
    if (container) container.classList.add("hidden");
  }

  function showContainer(container) {
    if (container) container.classList.remove("hidden");
  }

  function createHiddenModalidadInput(modalidad) {
    const existingHidden = form.querySelector(
      'input[name="modalidad"][type="hidden"]'
    );
    if (existingHidden) existingHidden.remove();

    const hiddenInput = document.createElement("input");
    hiddenInput.type = "hidden";
    hiddenInput.name = "modalidad";
    hiddenInput.value = modalidad;
    form.appendChild(hiddenInput);
  }

  function createModalidadOptions(modalidades) {
    if (!modalidadOptions) return;

    modalidadOptions.innerHTML = "";

    modalidades.forEach((modalidad, index) => {
      const label = document.createElement("label");
      label.className = "flex items-center";

      const input = document.createElement("input");
      input.type = "radio";
      input.name = "modalidad";
      input.value = modalidad;
      input.className = "sr-only peer";
      input.required = true;
      input.id = `modalidad_${index}`;

      const span = document.createElement("span");
      span.className =
        "px-3 py-1.5 text-xs lg:text-sm border border-gray-300 rounded-full cursor-pointer peer-checked:bg-blue-500 peer-checked:text-white peer-checked:border-blue-500 transition-colors hover:bg-gray-50";
      span.textContent = modalidad;

      label.appendChild(input);
      label.appendChild(span);
      modalidadOptions.appendChild(label);
    });
  }

  function handleModalidadDisplay(modalidades, incorporaciones = []) {
    if (!modalidades || modalidades.length === 0) {
      hideContainer(modalidadContainer);
      return;
    }

    // Actualizar incorporación si está disponible
    if (incorporaciones && incorporaciones.length > 0 && incorporacionHidden) {
      incorporacionHidden.value = incorporaciones[0];
    }

    if (modalidades.length === 1) {
      hideContainer(modalidadContainer);
      createHiddenModalidadInput(modalidades[0]);
    } else {
      const existingHidden = form.querySelector(
        'input[name="modalidad"][type="hidden"]'
      );
      if (existingHidden) existingHidden.remove();

      showContainer(modalidadContainer);
      createModalidadOptions(modalidades);
    }
  }

  function resetDependentFields(fromLevel = "area") {
    const levels = ["area", "programa", "plantel", "modalidad"];
    const startIndex = levels.indexOf(fromLevel);

    for (let i = startIndex; i < levels.length; i++) {
      switch (levels[i]) {
        case "area":
          clearSelect(areaConocimientoSelect);
          hideContainer(areaContainer);
          break;
        case "programa":
          clearSelect(programaInteresSelect);
          hideContainer(programaContainer);
          break;
        case "plantel":
          clearSelect(plantelInteresSelect);
          if (plantelInteresSelect) plantelInteresSelect.disabled = true;
          break;
        case "modalidad":
          if (modalidadOptions) modalidadOptions.innerHTML = "";
          hideContainer(modalidadContainer);
          const existingHidden = form.querySelector(
            'input[name="modalidad"][type="hidden"]'
          );
          if (existingHidden) existingHidden.remove();
          if (incorporacionHidden) incorporacionHidden.value = "";
          break;
      }
    }
  }

  // ==========================================
  // INICIALIZACIÓN Y EVENT LISTENERS
  // ==========================================

  // Poblar nivel educativo
  function initializeNivelEducativo() {
    if (!nivelEducativoSelect) return;

    const niveles = Object.keys(processedData);
    niveles.forEach((nivelKey) => {
      const nivel = processedData[nivelKey];
      const option = document.createElement("option");
      option.value = nivelKey;
      option.textContent = nivel.nombre;
      nivelEducativoSelect.appendChild(option);
    });
  }

  // Event listener para nivel educativo
  if (nivelEducativoSelect) {
    nivelEducativoSelect.addEventListener("change", function () {
      const selectedLevel = this.value;
      resetDependentFields("area");

      if (!selectedLevel || !processedData[selectedLevel]) return;

      const nivelData = processedData[selectedLevel];

      if (nivelData.requiereArea) {
        const areas = Object.keys(nivelData.areas).sort();
        populateSelect(areaConocimientoSelect, areas, "Selecciona un área");
        showContainer(areaContainer);
      } else {
        // Si no requiere área, mostrar todos los planteles directamente
        populateSelect(plantelInteresSelect, nivelData.todosLosPlanteles);
        if (plantelInteresSelect) plantelInteresSelect.disabled = false;
      }
    });
  }

  // Event listener para área de conocimiento
  if (areaConocimientoSelect) {
    areaConocimientoSelect.addEventListener("change", function () {
      const selectedArea = this.value;
      const selectedLevel = nivelEducativoSelect
        ? nivelEducativoSelect.value
        : "";

      resetDependentFields("programa");

      if (!selectedArea || !selectedLevel || !processedData[selectedLevel])
        return;

      const areaData = processedData[selectedLevel].areas[selectedArea];
      const nivelData = processedData[selectedLevel];

      if (nivelData.requierePrograma) {
        const programas = Object.keys(areaData.programas).sort();
        populateSelect(
          programaInteresSelect,
          programas,
          "Selecciona un programa"
        );
        showContainer(programaContainer);
      } else {
        // Si no requiere programa, mostrar planteles del área
        populateSelect(plantelInteresSelect, areaData.planteles);
        if (plantelInteresSelect) plantelInteresSelect.disabled = false;
      }
    });
  }

  // Event listener para programa
  if (programaInteresSelect) {
    programaInteresSelect.addEventListener("change", function () {
      const selectedPrograma = this.value;
      const selectedArea = areaConocimientoSelect
        ? areaConocimientoSelect.value
        : "";
      const selectedLevel = nivelEducativoSelect
        ? nivelEducativoSelect.value
        : "";

      resetDependentFields("plantel");

      if (!selectedPrograma || !selectedArea || !selectedLevel) return;

      const programaData =
        processedData[selectedLevel].areas[selectedArea].programas[
          selectedPrograma
        ];
      const planteles = Object.keys(programaData.planteles).sort();

      populateSelect(plantelInteresSelect, planteles, "Selecciona un plantel");
      if (plantelInteresSelect) plantelInteresSelect.disabled = false;
    });
  }

  // Event listener para plantel
  if (plantelInteresSelect) {
    plantelInteresSelect.addEventListener("change", function () {
      const selectedPlantel = this.value;
      const selectedPrograma = programaInteresSelect
        ? programaInteresSelect.value
        : "";
      const selectedArea = areaConocimientoSelect
        ? areaConocimientoSelect.value
        : "";
      const selectedLevel = nivelEducativoSelect
        ? nivelEducativoSelect.value
        : "";

      resetDependentFields("modalidad");

      if (!selectedPlantel || !selectedLevel) return;

      let modalidades = [];
      let incorporaciones = [];

      if (selectedPrograma && selectedArea) {
        // Caso específico: nivel > área > programa > plantel
        const plantelData =
          processedData[selectedLevel].areas[selectedArea].programas[
            selectedPrograma
          ].planteles[selectedPlantel];
        modalidades = plantelData.modalidades;
        incorporaciones = plantelData.incorporaciones;
      } else if (selectedArea) {
        // Caso: nivel > área > plantel (sin programa específico)
        modalidades =
          processedData[selectedLevel].areas[selectedArea].modalidades;
        incorporaciones =
          processedData[selectedLevel].areas[selectedArea].incorporaciones;
      } else {
        // Caso: nivel > plantel (sin área ni programa)
        modalidades = processedData[selectedLevel].todasLasModalidades;
        incorporaciones = processedData[selectedLevel].todasLasIncorporaciones;
      }

      handleModalidadDisplay(modalidades, incorporaciones);
    });
  }

  // Envio de form
  if (form) {
    form.addEventListener("submit", async function (e) {
      e.preventDefault();

      const formData = new FormData(this);
      // Crear objeto con las propiedades específicas que necesitas
      const data = {
        nombre: formData.get("nombre") || "",
        apellido_p: formData.get("apellido_p") || "",
        apellido_m: formData.get("apellido_m") || "",
        correo: formData.get("correo") || "",
        telefono: formData.get("telefono") || "",
        nivel_educativo: formData.get("nivelEducativo") || "",
        plantel_interes: formData.get("plantelInteres") || "",
        programa_interes: formData.get("programaInteres") || "",
        modalidad: formData.get("modalidad") || "",
      };

      console.log("=== DATOS DEL FORMULARIO ===");
      console.log("Datos completos:", data);

      // Mostrar loading
      const submitButton = this.querySelector('button[type="submit"]');
      const originalText = submitButton ? submitButton.textContent : "";
      if (submitButton) {
        submitButton.disabled = true;
        submitButton.textContent = "Enviando...";
      }

      const apiUrl = "https://intranet.universidad-une.com/api/createleads";

      const response = await fetch(apiUrl, {
        method: "POST",
        mode: "no-cors", 
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(data),
      });

      console.log(response);
      console.log("ok")

      console.error("Constructor:", error.constructor.name);
      console.error("Mensaje:", error.message);
    });
  }

  // Event delegation para radio buttons de modalidad
  if (modalidadOptions) {
    modalidadOptions.addEventListener("click", function (e) {
      if (
        e.target.tagName === "SPAN" &&
        e.target.previousElementSibling &&
        e.target.previousElementSibling.type === "radio"
      ) {
        e.target.previousElementSibling.checked = true;

        const changeEvent = new Event("change", { bubbles: true });
        e.target.previousElementSibling.dispatchEvent(changeEvent);
      }
    });
  }

  // Inicializar cuando el DOM esté listo
  document.addEventListener("DOMContentLoaded", function () {
    initializeNivelEducativo();
  });
</script>
<style>
  /* Estilos para los radio buttons personalizados */
  input[type="radio"]:checked + span {
    background-color: #3b82f6;
    color: white;
    border-color: #3b82f6;
  }
</style>
