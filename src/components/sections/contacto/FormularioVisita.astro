---
// DynamicEducationForm.astro
---

<form id="education-form" class="space-y-3 lg:space-y-4 flex-1 lg:flex-none">
  <!-- Nombre -->
  <div>
    <input 
      type="text" 
      name="nombre"
      placeholder="Nombre del alumno" 
      class="w-full px-2 lg:px-4 py-1.5 lg:py-2.5 border-b-2 border-gray-200 focus:border-blue-500 outline-none transition-colors bg-transparent text-sm lg:text-base"
      required
    />
  </div>

  <!-- Apellidos completos -->
  <div>
    <input 
      type="text" 
      name="apellidos"
      placeholder="Apellidos completos" 
      class="w-full px-2 lg:px-4 py-1.5 lg:py-2.5 border-b-2 border-gray-200 focus:border-blue-500 outline-none transition-colors bg-transparent text-sm lg:text-base"
      required
    />
  </div>

  <!-- Correo electrónico -->
  <div>
    <input 
      type="email" 
      name="correo"
      placeholder="Correo electrónico" 
      class="w-full px-2 lg:px-4 py-1.5 lg:py-2.5 border-b-2 border-gray-200 focus:border-blue-500 outline-none transition-colors bg-transparent text-sm lg:text-base"
      required
    />
  </div>

  <!-- Teléfono -->
  <div>
    <input 
      type="tel" 
      name="telefono"
      placeholder="Teléfono" 
      class="w-full px-2 lg:px-4 py-1.5 lg:py-2.5 border-b-2 border-gray-200 focus:border-blue-500 outline-none transition-colors bg-transparent text-sm lg:text-base"
      required
    />
  </div>

  <!-- Plantel -->
  <div>
    <select 
      name="plantel" 
      class="w-full px-2 lg:px-4 py-2 border-b-2 border-gray-200 focus:border-blue-500 outline-none transition-colors bg-transparent text-sm lg:text-base"
      required
    >
      <option value="" disabled selected>Seleccione un plantel</option>
      <option value="Torre UNE Milenio">Torre UNE Milenio</option>
      <option value="Milenio">Milenio</option>
      <option value="Plantel Centro">Plantel Centro</option>
      <option value="Centro Médico">Centro Médico</option>
      <option value="Plaza del Sol">Plaza del Sol</option>
      <option value="Tesistán">Tesistán</option>
      <option value="Tlajomulco">Tlajomulco</option>
      <option value="Tlaquepaque">Tlaquepaque</option>
      <option value="Tonalá">Tonalá</option>
      <option value="Torre Quetzal">Torre Quetzal</option>
      <option value="Plantel Chapultepec">Plantel Chapultepec</option>
      <option value="Campus Puerto Vallarta">Campus Puerto Vallarta</option>
      <option value="Las Juntas Puerto Vallarta">Las Juntas Puerto Vallarta</option>
      <option value="Puerto Vallarta Avenida México">Puerto Vallarta Avenida México</option>
      <option value="Plaza Caracol Puerto Vallarta">Plaza Caracol Puerto Vallarta</option>
      <option value="Tepatitlán">Tepatitlán</option>
    </select>
  </div>

  <!-- Fecha de visita -->
  <div>
    <input 
      type="date" 
      name="fecha_visita"
      class="w-full px-2 lg:px-4 py-2 border-b-2 border-gray-200 focus:border-blue-500 outline-none transition-colors bg-transparent text-sm lg:text-base"
      required
    />
  </div>

  <!-- Hora de visita -->
  <div>
    <input 
      type="time" 
      name="hora_visita"
      class="w-full px-2 lg:px-4 py-2 border-b-2 border-gray-200 focus:border-blue-500 outline-none transition-colors bg-transparent text-sm lg:text-base"
      required
    />
  </div>

  <!-- Relación con el visitante -->
  <div>
    <select 
      name="relacion_visita"
      class="w-full px-2 lg:px-4 py-2 border-b-2 border-gray-200 focus:border-blue-500 outline-none transition-colors bg-transparent text-sm lg:text-base"
      required
    >
      <option value="" disabled selected>¿Para quién es la visita?</option>
      <option value="Soy el interesado">Soy el interesado</option>
      <option value="Es para mi hijo/a">Es para mi hijo/a</option>
    </select>
  </div>

  <!-- Botón de envío -->
  <div class="pt-2 lg:pt-4">
    <button 
      type="submit"
      id="submit-button"
      class="w-full bg-red-500 hover:bg-red-600 text-white font-semibold py-2.5 lg:py-3 px-6 rounded-md transition-colors duration-200 text-sm lg:text-base disabled:bg-gray-400 disabled:cursor-not-allowed"
      aria-label="ENVIAR MENSAJE" 
      title="ENVIAR MENSAJE"
    >
      <span id="button-text">ENVIAR MENSAJE</span>
    </button>
  </div>

   <!-- Modal de error -->
  <div id="error-modal" class="hidden fixed inset-0  bg-opacity-50 flex items-center justify-center z-50 p-4">
    <div class="bg-white rounded-lg shadow-xl max-w-md w-full p-6">
      <div class="flex items-start mb-4">
        <div class="flex-shrink-0">
          <svg class="w-6 h-6 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"></path>
          </svg>
        </div>
        <div class="ml-3 flex-1">
          <h3 class="text-lg font-semibold text-gray-900 mb-2">Error al enviar solicitud</h3>
          <p id="modal-error-message" class="text-sm text-gray-600 mb-4"></p>
          <div class="text-sm text-gray-600 bg-gray-50 p-3 rounded border border-gray-200">
            <p class="font-semibold mb-1">Si el problema persiste:</p>
            <p>Por favor, envíe su solicitud por correo a:</p>
            <a href="mailto:informes@universidad-une.com" class="text-blue-600 hover:text-blue-700 font-medium">
              informes@universidad-une.com
            </a>
          </div>
        </div>
      </div>
      <div class="flex gap-3 mt-6">
        <button 
          id="retry-button"
          class="flex-1 bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded-md font-medium transition-colors"
        >
          Intentar de nuevo
        </button>
        <button 
          id="close-modal-button"
          class="flex-1 bg-gray-200 hover:bg-gray-300 text-gray-700 py-2 px-4 rounded-md font-medium transition-colors"
        >
          Cerrar
        </button>
      </div>
    </div>
  </div>

</form>

<script>
  const form = document.getElementById('education-form');
  const submitButton = document.getElementById('submit-button');
  const buttonText = document.getElementById('button-text');
  const errorModal = document.getElementById('error-modal');
  const modalErrorMessage = document.getElementById('modal-error-message');
  const retryButton = document.getElementById('retry-button');
  const closeModalButton = document.getElementById('close-modal-button');
  const apiUrl = 'https://intranet.universidad-une.com/api/createvisit';

  let formDataCache = null;
  const REQUEST_TIMEOUT = 15000; // 15 segundos

  // Función para ajustar la hora sumando 1 hora
  const adjustHour = (timeString) => {
    if (!timeString) return timeString;
    
    const [hours, minutes] = timeString.split(':');
    let hour = parseInt(hours);
    
    // Sumar 1 hora
    hour += 1;
    
    // Si supera 23, volver a 0
    if (hour >= 24) {
      hour = 0;
    }
    
    // Formatear con ceros a la izquierda
    return `${hour.toString().padStart(2, '0')}:${minutes}`;
  };

  // Función para mostrar el modal de error
  const showErrorModal = (message) => {
    modalErrorMessage.textContent = message;
    errorModal.classList.remove('hidden');
    document.body.style.overflow = 'hidden';
  };

  // Función para ocultar el modal
  const hideErrorModal = () => {
    errorModal.classList.add('hidden');
    document.body.style.overflow = '';
  };

  // Función para deshabilitar/habilitar botón
  const setButtonState = (isLoading) => {
    submitButton.disabled = isLoading;
    buttonText.textContent = isLoading ? 'ENVIANDO...' : 'ENVIAR MENSAJE';
  };

  // Función para enviar datos con timeout
  const fetchWithTimeout = (url, options, timeout = REQUEST_TIMEOUT) => {
    return Promise.race([
      fetch(url, options),
      new Promise((_, reject) =>
        setTimeout(() => reject(new Error('timeout')), timeout)
      )
    ]);
  };

  // Función principal de envío
  const submitForm = async (data) => {
    console.log('[FORM] Enviando visita...');
    
    try {
      const response = await fetchWithTimeout(apiUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        },
        body: JSON.stringify(data)
      });
      
      let responseData;
      try {
        responseData = await response.json();
      } catch {
        responseData = { message: 'Respuesta del servidor no válida' };
      }
      
      if (response.ok) {
        console.log('[FORM] ✅ Visita registrada exitosamente');
        formDataCache = null;
        form.reset();
        window.location.href = '/contacto/gracias-visita';
      } else {
        console.error('[FORM] ❌ Error del servidor:', response.status);
        const errorMessage = responseData.message || 
          `No pudimos procesar tu solicitud en este momento. Error del servidor (${response.status}).`;
        showErrorModal(errorMessage);
      }
      
    } catch (error) {
      console.error('[FORM] ❌ Error:', error.message);
      
      let errorMessage;
      
      if (error.message === 'timeout') {
        errorMessage = 'El servidor está tardando más de lo esperado en responder. Por favor, verifica tu conexión a internet e intenta nuevamente.';
      } else if (error.message.includes('Failed to fetch') || error.message.includes('NetworkError')) {
        errorMessage = 'No se pudo conectar con el servidor. Por favor, verifica tu conexión a internet e intenta nuevamente.';
      } else {
        errorMessage = 'Ocurrió un error inesperado al procesar tu solicitud. Por favor, intenta nuevamente.';
      }
      
      showErrorModal(errorMessage);
    } finally {
      setButtonState(false);
    }
  };

  // Manejar el envío del formulario
  form.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    setButtonState(true);
    
    const formData = new FormData(form);
    const originalHour = formData.get('hora_visita');
    
    formDataCache = {
      nombre: formData.get('nombre'),
      apellidos: formData.get('apellidos'),
      correo: formData.get('correo'),
      telefono: formData.get('telefono'),
      plantel: formData.get('plantel'),
      fecha_visita: formData.get('fecha_visita'),
      hora_visita: adjustHour(originalHour),
      relacion_visita: formData.get('relacion_visita')
    };
    
    console.log('[FORM] Hora original:', originalHour, '→ Hora ajustada:', formDataCache.hora_visita);
    
    await submitForm(formDataCache);
  });

  // Botón de reintentar
  retryButton.addEventListener('click', async () => {
    if (formDataCache) {
      hideErrorModal();
      setButtonState(true);
      await submitForm(formDataCache);
    }
  });

  // Botón de cerrar modal
  closeModalButton.addEventListener('click', (e) => {
    e.preventDefault();
    e.stopPropagation();
    hideErrorModal();
  });

  // Cerrar modal al hacer clic fuera de él
  errorModal.addEventListener('click', (e) => {
    if (e.target === errorModal) {
      hideErrorModal();
    }
  });

  // Cerrar modal con tecla ESC
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape' && !errorModal.classList.contains('hidden')) {
      hideErrorModal();
    }
  });

  console.log('[FORM] ✅ Formulario inicializado');
</script>

<style>
  /* Animación para el mensaje */
  #response-message {
    animation: slideIn 0.3s ease-out;
  }

  @keyframes slideIn {
    from {
      opacity: 0;
      transform: translateY(-10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }



  /* Estilos para el botón en estado de carga */
  #submit-button:disabled {
    cursor: not-allowed;
    opacity: 0.6;
  }
</style>