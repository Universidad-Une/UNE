---
// CampusFinder.astro
import { CircleArrowRight, MapPin, Search, X } from "@lucide/astro";

// Interfaces sin cambios
export interface Plantel {
  id: string;
  nombre: string;
  direccion: string;
  ciudad: string;
  horario: string;
  url: string;
  imagen: string;
  lat: number;
  lon: number;
}

export interface Props {
  titulo?: string;
  planteles: Plantel[];
  ciudades?: string[];
  mostrarMasCercano?: boolean;
  placeholder?: string;
}

const {
  titulo = "Encuentra tu plantel más cercano",
  planteles,
  ciudades = [],
  mostrarMasCercano = true,
  placeholder = "Buscar por nombre o ciudad...",
} = Astro.props;

// Lógica de servidor sin cambios
const ciudadesDisponibles =
  ciudades.length > 0
    ? ciudades.filter((ciudad) => planteles.some((p) => p.ciudad === ciudad))
    : [...new Set(planteles.map((p) => p.ciudad))];

const soloUnPlantel = planteles.length === 1;

// Pasamos los datos al cliente a través de atributos data-*
const componentProps = {
  planteles,
  soloUnPlantel,
  placeholder,
};
---

<div
  id="campus-finder-wrapper"
  class="w-full mx-auto py-6 px-4 sm:px-6 md:px-12"
  client:load
  data-props={JSON.stringify(componentProps)}
>
  <div class="flex justify-between items-center mb-8 flex-wrap gap-4">
    <div>
      <h1 class="text-3xl font-bold text-gray-800">{titulo}</h1>
      <p class="font-bold">UNE siempre cerca de ti</p>
    </div>
    {
      mostrarMasCercano && !soloUnPlantel && (
        <button
          id="find-nearest-btn"
          class="flex items-center gap-2 text-gray-600 hover:text-gray-800 transition-colors"
        >
          <svg
            class="w-5 h-5"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"
            />
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"
            />
          </svg>
          <span>Mostrar el más cercano</span>
        </button>
      )
    }
  </div>

  <!-- Autocomplete Search Input -->

  <p
    id="nearest-campus-result"
    class="mb-6 text-center font-medium text-gray-700 h-6"
  >
  </p>

  {
    !soloUnPlantel && (
      <div class="flex   gap-2 mb-6 ">
        <div class="  ">
          <div class="w-[400px] ">
            <Search class="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
            <input
              type="text"
              id="campus-search-input"
              placeholder={placeholder}
              class="w-full pl-10 pr-10 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent outline-none transition-all"
              autocomplete="off"
            />
            <button
              id="clear-search-btn"
              class="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600 opacity-0 transition-opacity"
              type="button"
            >
              <X class="w-4 h-4" />
            </button>
          </div>

          <div
            id="autocomplete-dropdown"
            class="absolute top-full left-0 right-0 bg-white border border-gray-200 rounded-xl shadow-lg z-50 max-h-60 overflow-y-auto hidden"
          ></div>

          <div
            id="no-results-message"
            class="hidden text-center text-gray-500 text-sm mt-2"
          >
            No se encontraron planteles
          </div>
        </div>
        <button
          class="px-4 py-2 rounded-full text-sm font-medium transition-colors"
          data-ciudad-tab="todos"
        >
          Todos
        </button>
        {ciudadesDisponibles.map((ciudad) => (
          <button
            class="px-4 py-2 rounded-full text-sm font-medium transition-colors"
            data-ciudad-tab={ciudad}
          >
            {ciudad}
          </button>
        ))}
      </div>
    )
  }

  <div
    class={`hidden md:grid gap-6 ${soloUnPlantel ? "grid-cols-1 max-w-2xl mx-auto" : "grid-cols-1 md:grid-cols-3"}`}
    id="desktop-grid"
  >
    {
      planteles.map((plantel) => (
        <div
          class="bg-white max-w-[550px] rounded-3xl shadow-lg overflow-hidden hover:shadow-xl transition-all duration-300 campus-card"
          data-ciudad-card={plantel.ciudad}
          data-plantel-id={plantel.id}
          data-plantel-nombre={plantel.nombre.toLowerCase()}
          data-plantel-direccion={plantel.direccion.toLowerCase()}
        >
          <div class="flex flex-col">
            <div class="w-full h-64 flex-shrink-0 overflow-hidden">
              <img
                src={plantel.imagen}
                alt={`Campus ${plantel.nombre}`}
                class="w-full h-full object-cover"
                loading="lazy"
              />
            </div>

            <div class="flex-1 p-6 flex flex-col justify-between">
              <div>
                <div class="flex justify-between gap-2 mb-3">
                  <div class="flex items-center justify-center gap-3">
                    <MapPin />
                    <span class="text-sm font-bold uppercase tracking-wide">
                      {plantel.ciudad}
                    </span>
                  </div>

                  <span class="text-sm text-gray-600">{plantel.horario}</span>
                </div>

                <h3 class="text-4xl font-light text-gray-900 mb-3">
                  {plantel.nombre}
                </h3>

                <p class="text-gray-600 text-sm mb-4 leading-relaxed">
                  {plantel.direccion}
                </p>
              </div>

              <div class="">
                <a
                  href={plantel.url}
                  class="group relative max-w-52 py-2 text-sm font-medium text-rojo-une 
         overflow-hidden 
         flex items-start gap-2"
                >
                  Conocer plantel
                  <CircleArrowRight />
                  <span
                    class="absolute bottom-0 left-0 w-full h-0.5 bg-rojo-une 
           transform translate-y-0 transition-transform duration-300 ease-out 
           group-hover:-translate-y-full"
                  />
                </a>
              </div>
            </div>
          </div>
        </div>
      ))
    }
  </div>

  <div class="block md:hidden splide" id="mobile-carousel">
    <div class="splide__track py-12">
      <ul class="splide__list">
        {
          planteles.map((plantel) => (
            <li class="splide__slide">
              <div
                class="bg-white rounded-3xl shadow-lg overflow-hidden transition-all duration-300 campus-card h-full"
                data-ciudad-card={plantel.ciudad}
                data-plantel-id={plantel.id}
                data-plantel-nombre={plantel.nombre.toLowerCase()}
                data-plantel-direccion={plantel.direccion.toLowerCase()}
              >
                <div class="flex flex-col h-full">
                  <div class="w-full h-48 rounded-t-3xl overflow-hidden">
                    <img
                      src={plantel.imagen}
                      alt={`Campus ${plantel.nombre}`}
                      class="w-full h-full object-cover"
                      loading="lazy"
                    />
                  </div>
                  <div class="flex-1 p-6">
                    <div class="flex items-center gap-2 mb-2">
                      <svg
                        class="w-4 h-4 text-gray-500"
                        fill="none"
                        stroke="currentColor"
                        viewBox="0 0 24 24"
                      >
                        <>
                          <path
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            stroke-width="2"
                            d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"
                          />
                          <path
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            stroke-width="2"
                            d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"
                          />
                        </>
                      </svg>
                      <span class="text-sm text-gray-600 uppercase tracking-wide">
                        {plantel.ciudad}
                      </span>
                    </div>
                    <h3 class="text-xl font-bold text-gray-800 mb-2">
                      {plantel.nombre}
                    </h3>
                    <p class="text-gray-600 text-sm mb-4 leading-relaxed">
                      {plantel.direccion}
                    </p>
                    <div class="flex flex-col justify-center items-center gap-3">
                      <a
                        href={plantel.url}
                        class="bg-rojo-une text-white px-4 py-2 rounded text-sm font-medium hover:bg-red-700 transition-colors"
                      >
                        CONOCE EL PLANTEL
                      </a>
                    </div>
                  </div>
                </div>
              </div>
            </li>
          ))
        }
      </ul>
    </div>
  </div>
</div>

<style>
  .bg-rojo-une {
    background-color: #dc2626;
  }
  .hover\:bg-rojo-une:hover {
    background-color: #b91c1c;
  }
  .text-rojo-une {
    color: #dc2626;
  }

  /* Estilos para resaltar la tarjeta */
  .highlight-card {
    box-shadow: 0 0 0 3px rgba(220, 38, 38, 0.7) !important;
    transform: scale(1.02);
  }

  /* Estilos para resaltar texto en autocomplete */
  .highlight-text {
    background-color: #fef3c7;
    font-weight: 600;
  }

  /* Estilos Splide */
  .splide__slide {
    padding: 0 0.5rem;
  }
  .splide__arrow {
    background: rgba(255, 255, 255, 0.9);
    border: 1px solid #e2e8f0;
  }
  .splide__arrow:hover {
    background: #ffffff;
  }
  .splide__arrow svg {
    fill: #64748b;
  }
  .splide__pagination__page.is-active {
    background: #dc2626;
  }

  /* Estilos para dropdown de autocomplete */
  .autocomplete-item {
    padding: 0.75rem 1rem;
    border-bottom: 1px solid #f3f4f6;
    cursor: pointer;
    transition: background-color 0.2s;
  }
  .autocomplete-item:hover,
  .autocomplete-item.selected {
    background-color: #f8fafc;
  }
  .autocomplete-item:last-child {
    border-bottom: none;
  }
</style>

<script>
  import Splide from "@splidejs/splide";
  import "@splidejs/splide/dist/css/splide.min.css";

  // Función para inicializar toda la lógica del cliente
  function initCampusFinder() {
    const wrapper = document.getElementById("campus-finder-wrapper");
    if (!wrapper) return;

    // 1. Leer las props del atributo data-*
    const { planteles, soloUnPlantel, placeholder } = JSON.parse(
      wrapper.dataset.props
    );
    let splideInstance = null;
    let selectedIndex = -1; // Para navegación con teclado

    // 2. Inicializar el carrusel (Splide) en vistas móviles
    const mobileCarousel = document.getElementById("mobile-carousel");
    if (mobileCarousel && window.innerWidth < 768) {
      splideInstance = new Splide("#mobile-carousel", {
        type: "loop",
        padding: "1.3rem",
        perPage: 1,
        gap: ".1rem",
        arrows: false,
        pagination: false,
        autoplay: true,
        interval: 4000,
        pauseOnHover: true,
      }).mount();
    }

    // Si solo hay un plantel, no se necesita la lógica de filtros ni de búsqueda
    if (soloUnPlantel) return;

    // 3. Elementos del autocomplete
    const searchInput = document.getElementById("campus-search-input");
    const clearButton = document.getElementById("clear-search-btn");
    const dropdown = document.getElementById("autocomplete-dropdown");
    const noResultsMessage = document.getElementById("no-results-message");

    // 4. Lógica del filtro de ciudades
    const filterButtons = document.querySelectorAll("[data-ciudad-tab]");
    const campusCards = document.querySelectorAll(".campus-card");
    const activeClasses = "bg-blue-600 text-white";
    const inactiveClasses = "bg-gray-200 text-gray-700 hover:bg-gray-300";

    const setActiveTab = (button) => {
      filterButtons.forEach((btn) => {
        btn.className = `px-4 py-2 rounded-full text-sm font-medium transition-colors ${inactiveClasses}`;
      });
      button.className = `px-4 py-2 rounded-full text-sm font-medium transition-colors ${activeClasses}`;
    };

    const filterCards = (targetCiudad, searchTerm = "") => {
      let visibleSlides = [];
      let hasVisibleCards = false;

      campusCards.forEach((card) => {
        const cardCiudad = card.dataset.ciudadCard;
        const cardNombre = card.dataset.plantelNombre || "";
        const cardDireccion = card.dataset.plantelDireccion || "";
        const parentContainer = card.closest(".splide__slide") || card;

        const matchesCiudad =
          targetCiudad === "todos" || cardCiudad === targetCiudad;
        const matchesSearch =
          !searchTerm ||
          cardNombre.includes(searchTerm.toLowerCase()) ||
          cardCiudad.toLowerCase().includes(searchTerm.toLowerCase()) ||
          cardDireccion.includes(searchTerm.toLowerCase());

        const isVisible = matchesCiudad && matchesSearch;

        parentContainer.style.display = isVisible ? "block" : "none";

        if (isVisible) {
          hasVisibleCards = true;
          if (card.closest(".splide__slide")) {
            visibleSlides.push(parentContainer);
          }
        }
      });

      // Mostrar/ocultar mensaje de "no encontrado"
      noResultsMessage.classList.toggle("hidden", hasVisibleCards);

      // Actualizar el carrusel si existe
      if (splideInstance) {
        const list = splideInstance.Components.Elements.list;
        list.innerHTML = "";
        visibleSlides.forEach((slide) => list.appendChild(slide));
        splideInstance.refresh();
      }
    };

    // 5. Funciones del autocomplete
    const highlightText = (text, searchTerm) => {
      if (!searchTerm) return text;
      const regex = new RegExp(`(${searchTerm})`, "gi");
      return text.replace(regex, '<span class="highlight-text">$1</span>');
    };

    const getSuggestions = (searchTerm) => {
      if (!searchTerm || searchTerm.length < 1) return [];

      const suggestions = [];
      const lowerSearchTerm = searchTerm.toLowerCase();

      planteles.forEach((plantel) => {
        const nombre = plantel.nombre.toLowerCase();
        const ciudad = plantel.ciudad.toLowerCase();
        const direccion = plantel.direccion.toLowerCase();

        if (
          nombre.includes(lowerSearchTerm) ||
          ciudad.includes(lowerSearchTerm) ||
          direccion.includes(lowerSearchTerm)
        ) {
          suggestions.push(plantel);
        }
      });

      return suggestions.slice(0, 5); // Máximo 5 sugerencias
    };

    const showSuggestions = (suggestions, searchTerm) => {
      if (suggestions.length === 0) {
        dropdown.classList.add("hidden");
        return;
      }

      const suggestionItems = suggestions
        .map((plantel, index) => {
          const highlightedNombre = highlightText(plantel.nombre, searchTerm);
          const highlightedCiudad = highlightText(plantel.ciudad, searchTerm);

          return `
          <div class="autocomplete-item p-6 border-b border-rojo-une" data-index="${index}" data-plantel-id="${plantel.id}">
            <div class="font-medium text-gray-900">${highlightedNombre}</div>
            <div class="text-sm text-gray-600">${highlightedCiudad} • ${plantel.direccion}</div>
          </div>
        `;
        })
        .join("");

      dropdown.innerHTML = suggestionItems;
      dropdown.classList.remove("hidden");
      selectedIndex = -1;
    };

    const hideSuggestions = () => {
      dropdown.classList.add("hidden");
      selectedIndex = -1;
    };

    const selectSuggestion = (plantel) => {
      searchInput.value = plantel.nombre;
      hideSuggestions();

      // Filtrar y resaltar el plantel seleccionado
      filterCards("todos", plantel.nombre);
      highlightCard(plantel.id);

      // Mostrar el botón de limpiar
      clearButton.classList.remove("opacity-0");
    };

    // 6. Event listeners del autocomplete
    searchInput.addEventListener("input", (e) => {
      const searchTerm = e.target.value.trim();

      if (searchTerm.length === 0) {
        hideSuggestions();
        clearButton.classList.add("opacity-0");
        filterCards("todos");
        return;
      }

      clearButton.classList.remove("opacity-0");

      const suggestions = getSuggestions(searchTerm);
      showSuggestions(suggestions, searchTerm);

      // Filtrar tarjetas en tiempo real
      const currentTab =
        document.querySelector("[data-ciudad-tab].bg-blue-600")?.dataset
          .ciudadTab || "todos";
      filterCards(currentTab, searchTerm);
    });

    searchInput.addEventListener("keydown", (e) => {
      const items = dropdown.querySelectorAll(".autocomplete-item");

      switch (e.key) {
        case "ArrowDown":
          e.preventDefault();
          selectedIndex = Math.min(selectedIndex + 1, items.length - 1);
          updateSelection(items);
          break;

        case "ArrowUp":
          e.preventDefault();
          selectedIndex = Math.max(selectedIndex - 1, -1);
          updateSelection(items);
          break;

        case "Enter":
          e.preventDefault();
          if (selectedIndex >= 0 && items[selectedIndex]) {
            const plantelId = items[selectedIndex].dataset.plantelId;
            const plantel = planteles.find((p) => p.id === plantelId);
            if (plantel) selectSuggestion(plantel);
          }
          break;

        case "Escape":
          hideSuggestions();
          searchInput.blur();
          break;
      }
    });

    const updateSelection = (items) => {
      items.forEach((item, index) => {
        item.classList.toggle("selected", index === selectedIndex);
      });
    };

    // Click en sugerencias
    dropdown.addEventListener("click", (e) => {
      const item = e.target.closest(".autocomplete-item");
      if (item) {
        const plantelId = item.dataset.plantelId;
        const plantel = planteles.find((p) => p.id === plantelId);
        if (plantel) selectSuggestion(plantel);
      }
    });

    // Botón de limpiar
    clearButton.addEventListener("click", () => {
      searchInput.value = "";
      clearButton.classList.add("opacity-0");
      hideSuggestions();
      filterCards("todos");
      searchInput.focus();
    });

    // Cerrar dropdown al hacer click fuera
    document.addEventListener("click", (e) => {
      if (!searchInput.contains(e.target) && !dropdown.contains(e.target)) {
        hideSuggestions();
      }
    });

    // 7. Lógica del filtro de ciudades (actualizada)
    filterButtons.forEach((button) => {
      button.addEventListener("click", () => {
        const targetCiudad = button.dataset.ciudadTab;
        setActiveTab(button);
        const searchTerm = searchInput.value.trim();
        filterCards(targetCiudad, searchTerm);
      });
    });

    // Iniciar con "Todos" activo
    const todosButton = document.querySelector('[data-ciudad-tab="todos"]');
    if (todosButton) {
      setActiveTab(todosButton);
    }

    // 8. Función para resaltar tarjetas
    const highlightCard = (plantelId) => {
      // Remover resaltado previo
      document
        .querySelectorAll(".highlight-card")
        .forEach((c) => c.classList.remove("highlight-card"));

      const cardToHighlight = document.querySelector(
        `.campus-card[data-plantel-id="${plantelId}"]`
      );
      if (cardToHighlight) {
        // Mostrar la tarjeta si está oculta por un filtro
        const ciudad = cardToHighlight.dataset.ciudadCard;
        const tabButton = document.querySelector(
          `[data-ciudad-tab="${ciudad}"]`
        );
        if (tabButton) {
          setActiveTab(tabButton);
        }

        // Mover a la vista y resaltar
        cardToHighlight.scrollIntoView({ behavior: "smooth", block: "center" });
        cardToHighlight.classList.add("highlight-card");

        if (splideInstance && window.innerWidth < 768) {
          const slideIndex = Array.from(
            cardToHighlight.closest(".splide__list").children
          ).indexOf(cardToHighlight.closest(".splide__slide"));
          if (slideIndex > -1) {
            splideInstance.go(slideIndex);
          }
        }

        setTimeout(
          () => cardToHighlight.classList.remove("highlight-card"),
          3000
        );
      }
    };

    // 9. Lógica para "Mostrar el más cercano"
    const findNearestBtn = document.getElementById("find-nearest-btn");
    const resultParagraph = document.getElementById("nearest-campus-result");

    const haversineDistance = (coords1, coords2) => {
      const toRad = (x) => (x * Math.PI) / 180;
      const R = 6371; // Radio de la Tierra en km
      const dLat = toRad(coords2.lat - coords1.lat);
      const dLon = toRad(coords2.lon - coords1.lon);
      const a =
        Math.sin(dLat / 2) * Math.sin(dLat / 2) +
        Math.cos(toRad(coords1.lat)) *
          Math.cos(toRad(coords2.lat)) *
          Math.sin(dLon / 2) *
          Math.sin(dLon / 2);
      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
      return R * c;
    };

    findNearestBtn.addEventListener("click", () => {
      resultParagraph.textContent = "Buscando tu ubicación...";
      resultParagraph.style.color = "#374151";

      if (!navigator.geolocation) {
        resultParagraph.textContent =
          "La geolocalización no es soportada por tu navegador.";
        resultParagraph.style.color = "#dc2626";
        return;
      }

      const geoOptions = {
        enableHighAccuracy: true,
        timeout: 10000,
        maximumAge: 0,
      };

      const successCallback = (position) => {
        const userCoords = {
          lat: position.coords.latitude,
          lon: position.coords.longitude,
        };

        let nearestCampus = planteles.reduce(
          (nearest, plantel) => {
            const distance = haversineDistance(userCoords, {
              lat: plantel.lat,
              lon: plantel.lon,
            });
            if (distance < nearest.minDistance) {
              return { minDistance: distance, plantel };
            }
            return nearest;
          },
          { minDistance: Infinity, plantel: null }
        );

        if (nearestCampus.plantel) {
          resultParagraph.innerHTML = `📍 El plantel más cercano es <strong>${nearestCampus.plantel.nombre}</strong> (a ${nearestCampus.minDistance.toFixed(1)} km).`;
          resultParagraph.style.color = "#10b981";
          highlightCard(nearestCampus.plantel.id);
        } else {
          resultParagraph.textContent =
            "No se encontraron planteles para calcular la distancia.";
          resultParagraph.style.color = "#dc2626";
        }
      };

      const errorCallback = (error) => {
        let message = "No se pudo obtener tu ubicación. ";
        console.error("Error de Geolocalización:", error);

        switch (error.code) {
          case error.PERMISSION_DENIED:
            message +=
              "Permiso denegado. Por favor, permite el acceso a tu ubicación en los ajustes de tu navegador.";
            break;
          case error.POSITION_UNAVAILABLE:
            message +=
              "La información de ubicación no está disponible. Puede que no tengas señal GPS o estés en un lugar sin buena cobertura de red.";
            break;
          case error.TIMEOUT:
            message +=
              "La solicitud de ubicación tardó demasiado en responder. Inténtalo de nuevo en un lugar con mejor señal.";
            break;
          default:
            message += `Ocurrió un error desconocido (Código: ${error.code}).`;
            break;
        }
        resultParagraph.textContent = message;
        resultParagraph.style.color = "#dc2626";
      };

      navigator.geolocation.getCurrentPosition(
        successCallback,
        errorCallback,
        geoOptions
      );
    });
  }

  // Ejecutar el script una vez el DOM esté listo
  document.addEventListener("DOMContentLoaded", initCampusFinder);
</script>
