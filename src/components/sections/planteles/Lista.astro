---
// CampusFinder.astro
import { CircleArrowRight, MapPin, Search, X } from "@lucide/astro";

// Imports de las imágenes
import CentroImg from "@/assets/Imagenes/CardsPlanteles/Centro.webp";
import CentroMedicoImg from "@/assets/Imagenes/CardsPlanteles/CentroMedico.webp";
import CampusPuertoVallartaImg from "@/assets/Imagenes/CardsPlanteles/Campus-Puerto-Vallarta.webp";
import ChapultepecImg from "@/assets/Imagenes/CardsPlanteles/Chapultepec.webp";
import PuertoVallartaImg from "@/assets/Imagenes/CardsPlanteles/PuertoVallarta.webp";
import MilenioImg from "@/assets/Imagenes/CardsPlanteles/Milenio.webp";
import CaracolImg from "@/assets/Imagenes/CardsPlanteles/Caracol.webp";
import Juntas from "@/assets/Imagenes/CardsPlanteles/LasJuntas.webp";
import PlazaSolImg from "@/assets/Imagenes/CardsPlanteles/PlazaSol.webp";
import TepatitlanImg from "@/assets/Imagenes/CardsPlanteles/Tepatitlan.webp";
import TesistanImg from "@/assets/Imagenes/CardsPlanteles/Tesistan.webp";
import TlajomulcoImg from "@/assets/Imagenes/CardsPlanteles/Tlajomulco.webp";
import TlaquepaqueImg from "@/assets/Imagenes/CardsPlanteles/Tlaquepaque.webp";
import TonalaImg from "@/assets/Imagenes/CardsPlanteles/Tonala.webp";
import TorreMilenioImg from "@/assets/Imagenes/CardsPlanteles/Torre-milenio.webp";
import TorreQuetzalImg from "@/assets/Imagenes/CardsPlanteles/Torre-quetzal.webp";
import ZapopanImg from "@/assets/Imagenes/CardsPlanteles/Zapopan.webp";

const planteles = [
  {
    id: "7",
    nombre: "Centro",
    codigo: "00015",
    direccion: "Av. República No.10 Col. San Juan de Dios, Guadalajara, Jalisco",
    ciudad: "Guadalajara ZMG",
    url: "/planteles/centro",
    imagen: CentroImg,
    lat: 20.67744801539995,
    lon: -103.34031672627513,
  },
  {
    id: "8",
    nombre: "Centro Médico",
    codigo: "00016",
    direccion: "José María Lozano #1077 Col. Belisario Domínguez Guadalajara, Jalisco",
    ciudad: "Guadalajara ZMG",
    url: "/planteles/centro-medico",
    imagen: CentroMedicoImg,
    lat: 20.684590788642307,
    lon: -103.3256397932448,
  },
  {
    id: "16",
    nombre: "Campus Puerto Vallarta",
    codigo: "Campus",
    direccion: "Carretera a Tepic No. 5657 Col. las Juntas C.P 48291",
    ciudad: "Puerto Vallarta",
    url: "/planteles/campus-puerto-vallarta",
    imagen: CampusPuertoVallartaImg,
    lat: 20.69715126066295,
    lon: -105.23759816941552,
  },
  {
    id: "12",
    nombre: "Chapultepec",
    codigo: "00020",
    direccion: "Av. Vallarta #1458 Col. Americana Guadalajara, Jalisco",
    ciudad: "Guadalajara ZMG",
    url: "/planteles/chapultepec",
    imagen: ChapultepecImg,
    lat: 20.67471004174908,
    lon: -103.36909119392195,
  },
  {
    id: "1",
    nombre: "Avenida México",
    codigo: "00008",
    direccion: "Av. México #1255, Col. Agua Zarca, Puerto Vallarta, Jalisco",
    ciudad: "Puerto Vallarta",
    url: "/planteles/avenida-mexico",
    imagen: PuertoVallartaImg,
    lat: 20.669418,
    lon: -105.226917,
  },
  {
  id: "20",
  nombre: "Las juntas",
  codigo: "00022", // ✅ Agregar código
  direccion: "Francisco Murguía #523 Col. Las Juntas Puerto Vallarta, Jalisco",
  ciudad: "Puerto Vallarta", // ✅ Corregir ciudad
  url: "/planteles/las-juntas",
  imagen: Juntas,
  lat: 20.696982077577214,
  lon: -105.23748669247418,
},
  {
    id: "9",
    nombre: "Milenio",
    codigo: "00017",
    direccion: "Av. Adolfo López Mateos Sur 4154, La Giralda, 45088 Zapopan, Jal",
    ciudad: "Guadalajara ZMG",
    url: "/planteles/milenio",
    imagen: MilenioImg,
    lat: 20.64540739939039,
    lon: -103.40630313415286,
  },
  {
    id: "10",
    nombre: "Plaza Caracol",
    codigo: "00018",
    direccion:
      "Av. Francisco Medina Ascencio #2190, Plaza Caracol, Puerto Vallarta, Jalisco",
    ciudad: "Puerto Vallarta",
    url: "/planteles/caracol",
    imagen: CaracolImg,
    lat: 20.639287162026815,
    lon: -105.23323589513319,
  },
  {
    id: "2",
    nombre: "Plaza del Sol",
    codigo: "00005",
    direccion: "Chimalhuacán #6, Col. Ciudad del Sol, Guadalajara, Jalisco",
    ciudad: "Guadalajara ZMG",
    url: "/planteles/plaza-del-sol",
    imagen: PlazaSolImg,
    lat: 20.651805,
    lon: -103.402918,
  },
  {
    id: "11",
    nombre: "Tepatitlán",
    codigo: "00019",
    direccion: "Col. Alameda. Av. Matamoros #505, Tepatitlán de Morelos, Jalisco",
    ciudad: "Tepatitlán de Morelos",
    url: "/planteles/tepatitlan",
    imagen: TepatitlanImg,
    lat: 20.8062946507024,
    lon: -102.76382902869392,
  },
  {
    id: "3",
    nombre: "Tesistán",
    codigo: "00010",
    direccion:
      "Av. Juan Gil Preciado #3897, Col. Hogares de Nuevo México, Zapopan, Jalisco",
    ciudad: "Guadalajara ZMG",
    url: "/planteles/tesistan",
    imagen: TesistanImg,
    lat: 20.806203,
    lon: -102.763903,
  },
  {
    id: "4",
    nombre: "Tlajomulco",
    codigo: "00012",
    direccion:
      "Av. López Mateos #10100, Col. Los Gavilanes Poniente, Tlajomulco de Zúñiga, Jalisco",
    ciudad: "Guadalajara ZMG",
    url: "/planteles/tlajomulco",
    imagen: TlajomulcoImg,
    lat: 20.576464164603113,
    lon: -103.45243680650722,
  },
  {
    id: "5",
    nombre: "Tlaquepaque",
    codigo: "00013",
    direccion:
      "Blvd. Marcelino García Barragán #2056, Col. Bosques del Boulevard, Tlaquepaque, Jalisco",
    ciudad: "Guadalajara ZMG",
    url: "/planteles/tlaquepaque",
    imagen: TlaquepaqueImg,
    lat: 20.645650028567157,
    lon: -103.32094530771215,
  },
  {
    id: "6",
    nombre: "Tonalá",
    codigo: "00014",
    direccion: "Av. Tonaltecas #333, Col. Agua Escondida, Tonalá, Jalisco",
    ciudad: "Guadalajara ZMG",
    url: "/planteles/tonala",
    imagen: TonalaImg,
    lat: 20.63176692188573,
    lon: -103.24439406488241,
  },
  {
    id: "14",
    nombre: "Torre UNE Milenio",
    codigo: "TORRE MILENIO",
    direccion: "Av. López Mateos Sur #4175 Col. La Giralda Zapopan, Jalisco",
    ciudad: "Guadalajara ZMG",
    url: "/planteles/torre-une-milenio",
    imagen: TorreMilenioImg,
    lat: 20.645336,
    lon: -103.405938,
  },
  {
    id: "15",
    nombre: "Torre Quetzal",
    codigo: "Torre Quetzal",
    direccion: "Chimalhuacán #3569 Col. Ciudad del Sol Zapopan, Jalisco",
    ciudad: "Guadalajara ZMG",
    url: "/planteles/torre-quetzal",
    imagen: TorreQuetzalImg,
    lat: 20.651860618451966,
    lon: -103.40329340052432,
  },
  {
    id: "13",
    nombre: "Zapopan",
    codigo: "00021",
    direccion: "Plaza Caudillos Zapopan, Jalisco",
    ciudad: "Guadalajara ZMG",
    url: "/planteles/zapopan",
    imagen: ZapopanImg,
    lat: 20.720900646775917,
    lon: -103.38975281813357,
  },
];

// Props del componente (opcionales, con valores por defecto)
export interface Props {
  titulo?: string;
  mostrarMasCercano?: boolean;
  placeholder?: string;
}

const {
  titulo = "Encuentra tu plantel más cercano",
  mostrarMasCercano = true,
  placeholder = "Buscar por nombre o ciudad...",
} = Astro.props;

// Extraer ciudades únicas de los planteles
const ciudadesDisponibles = [...new Set(planteles.map((p) => p.ciudad))];
---
<div class="w-full mx-auto py-6 px-4 sm:px-6 md:px-12">
  <div class="flex justify-between items-center mb-8 flex-wrap gap-4">
    <div>
      <h1 class="text-3xl font-bold text-gray-800">{titulo}</h1>
      <p class="font-bold">UNE siempre cerca de ti</p>
    </div>
    {
      mostrarMasCercano && (
        <button
          id="find-nearest-btn"
          class="flex items-center gap-2 text-gray-600 hover:text-gray-800 transition-colors"
        >
          <svg
            class="w-5 h-5"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"
            />
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"
            />
          </svg>
          <span>Mostrar el más cercano</span>
        </button>
      )
    }
  </div>

  <p
    id="nearest-campus-result"
    class="mb-6 text-center font-medium text-gray-700 h-6"
  >
  </p>

  <div class="flex gap-2 mb-6 flex-wrap">
    <div class="relative">
      <div class="w-full max-w-[400px] relative">
        <Search
          class="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4"
        />
        <input
          type="text"
          id="campus-search-input"
          placeholder={placeholder}
          class="w-full pl-10 pr-10 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent outline-none transition-all"
          autocomplete="off"
        />
        <button
          id="clear-search-btn"
          class="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600 opacity-0 transition-opacity"
          type="button"
          aria-label="Limpiar búsqueda" 
          title="Limpiar búsqueda">
          <X class="w-4 h-4" />
        </button>
      </div>
      
      <!-- Dropdown de autocomplete -->
      <div
        id="autocomplete-dropdown"
        class="hidden absolute z-10 w-full max-w-[400px] bg-white border border-gray-300 rounded-lg shadow-lg mt-1"
      >
        <!-- Las sugerencias se insertan aquí dinámicamente -->
      </div>
      
      <div
        id="no-results-message"
        class="hidden text-center text-gray-500 text-sm mt-2"
      >
        No se encontraron planteles
      </div>
    </div>

    <button
      class="ciudad-tab px-4 py-2 rounded-full text-sm font-medium transition-colors bg-blue-600 text-white"
      data-ciudad-tab="todos"
      aria-label="Todos" 
      title="Todos">
      Todos
    </button>
    {
      ciudadesDisponibles.map((ciudad) => (
        <button
          class="ciudad-tab px-4 py-2 rounded-full text-sm font-medium transition-colors bg-gray-200 text-gray-700 hover:bg-gray-300"
          data-ciudad-tab={ciudad}
        >
          {ciudad}
        </button>
      ))
    }
  </div>

  <!-- Desktop Grid -->
  <div
    class="hidden md:grid gap-6 grid-cols-1 md:grid-cols-2 lg:grid-cols-3"
    id="desktop-grid"
  >
    {
      planteles.map((plantel) => (
        <div
          class="bg-white max-w-[550px] rounded-3xl shadow-lg overflow-hidden hover:shadow-xl transition-all duration-300 campus-card"
          data-ciudad-card={plantel.ciudad}
          data-plantel-id={plantel.id}
          data-plantel-nombre={plantel.nombre.toLowerCase()}
          data-plantel-direccion={plantel.direccion.toLowerCase()}
          data-lat={plantel.lat}
          data-lon={plantel.lon}
        >
          <div class="flex flex-col">
            <div class="w-full h-64 flex-shrink-0 overflow-hidden">
              <img
                src={plantel.imagen.src}
                alt={`Campus ${plantel.nombre}`}
                class="w-full h-full object-cover"
                loading="lazy"
              />
            </div>

            <div class="flex-1 p-6 flex flex-col justify-between">
              <div>
                <div class="flex justify-between gap-2 mb-3">
                  <div class="flex items-center justify-center gap-3">
                    <MapPin />
                    <span class="text-sm font-bold uppercase tracking-wide">
                      {plantel.ciudad}
                    </span>
                  </div>
                </div>

                <h3 class="text-4xl font-light text-gray-900 mb-3">
                  {plantel.nombre}
                </h3>

                <p class="text-gray-600 text-sm mb-4 leading-relaxed">
                  {plantel.direccion}
                </p>
              </div>

              <div class="">
                <a
                  href={plantel.url}
                  class="group relative max-w-52 py-2 text-sm font-medium text-rojo-une 
         overflow-hidden 
         flex items-start gap-2"
                >
                  Conocer plantel
                  <CircleArrowRight />
                  <span
                    class="absolute bottom-0 left-0 w-full h-0.5 bg-rojo-une 
           transform translate-y-0 transition-transform duration-300 ease-out 
           group-hover:-translate-y-full"
                  />
                </a>
              </div>
            </div>
          </div>
        </div>
      ))
    }
  </div>

  <!-- Mobile Carousel -->
  <div class="block md:hidden splide" id="mobile-carousel">
    <div class="splide__track py-12">
      <ul class="splide__list">
        {
          planteles.map((plantel) => (
            <li class="splide__slide">
              <div
                class="bg-white rounded-3xl shadow-lg overflow-hidden transition-all duration-300 campus-card h-full"
                data-ciudad-card={plantel.ciudad}
                data-plantel-id={plantel.id}
                data-plantel-nombre={plantel.nombre.toLowerCase()}
                data-plantel-direccion={plantel.direccion.toLowerCase()}
                data-lat={plantel.lat}
                data-lon={plantel.lon}
              >
                <div class="flex flex-col h-full">
                  <div class="w-full h-48 rounded-t-3xl overflow-hidden">
                    <img
                      src={plantel.imagen.src}
                      alt={`Campus ${plantel.nombre}`}
                      class="w-full h-full object-cover"
                      loading="lazy"
                    />
                  </div>
                  <div class="flex-1 p-6">
                    <div class="flex items-center gap-2 mb-2">
                      <svg
                        class="w-4 h-4 text-gray-500"
                        fill="none"
                        stroke="currentColor"
                        viewBox="0 0 24 24"
                      >
                        <path
                          stroke-linecap="round"
                          stroke-linejoin="round"
                          stroke-width="2"
                          d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"
                        />
                        <path
                          stroke-linecap="round"
                          stroke-linejoin="round"
                          stroke-width="2"
                          d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"
                        />
                      </svg>
                      <span class="text-sm text-gray-600 uppercase tracking-wide">
                        {plantel.ciudad}
                      </span>
                    </div>
                    <h3 class="text-xl font-bold text-gray-800 mb-2">
                      {plantel.nombre}
                    </h3>
                    <p class="text-gray-600 text-sm mb-4 leading-relaxed">
                      {plantel.direccion}
                    </p>
                    <div class="flex flex-col justify-center items-center gap-3">
                      <a
                        href={plantel.url}
                        class="bg-rojo-une text-white px-4 py-2 rounded text-sm font-medium hover:bg-red-700 transition-colors"
                      >
                        CONOCE EL PLANTEL
                      </a>
                    </div>
                  </div>
                </div>
              </div>
            </li>
          ))
        }
      </ul>
    </div>
  </div>
</div>


<script>
  import Splide from "@splidejs/splide";
  import "@splidejs/splide/dist/css/splide.min.css";

  // Función para inicializar toda la lógica del cliente
  function initCampusFinder() {
    // Obtener datos desde el contexto del componente o desde atributos data-*
    // Asumiendo que las props están disponibles en el contexto de Astro
    const planteles = window.plantelesData || [];
    const placeholder = window.placeholderText || "Buscar plantel...";
    
    let splideInstance = null;
    let selectedIndex = -1; // Para navegación con teclado

    // 1. Inicializar el carrusel (Splide) en vistas móviles
    const mobileCarousel = document.getElementById("mobile-carousel");
    if (mobileCarousel && window.innerWidth < 768) {
      splideInstance = new Splide("#mobile-carousel", {
        type: "loop",
        padding: "1.3rem",
        perPage: 1,
        gap: ".5rem",
        arrows: false,
        pagination: false,
        autoplay: true,
        interval: 3000,
        pauseOnHover: true,
        pauseOnFocus: true,
        resetProgress: false,
        speed: 800,
        easing: 'cubic-bezier(0.25, 1, 0.5, 1)',
      }).mount();
    }

    // 2. Elementos del DOM
    const searchInput = document.getElementById("campus-search-input");
    const clearButton = document.getElementById("clear-search-btn");
    const dropdown = document.getElementById("autocomplete-dropdown");
    const noResultsMessage = document.getElementById("no-results-message");
    
    if (!searchInput || !clearButton || !dropdown || !noResultsMessage) {
      console.warn("Algunos elementos del DOM no se encontraron");
      return;
    }

    // 3. Lógica del filtro de ciudades
    const filterButtons = document.querySelectorAll("[data-ciudad-tab]");
    const campusCards = document.querySelectorAll(".campus-card");
    const activeClasses = "bg-blue-600 text-white";
    const inactiveClasses = "bg-gray-200 text-gray-700 hover:bg-gray-300";

    const setActiveTab = (button) => {
      filterButtons.forEach((btn) => {
        btn.className = `px-4 py-2 rounded-full text-sm font-medium transition-colors ${inactiveClasses}`;
      });
      button.className = `px-4 py-2 rounded-full text-sm font-medium transition-colors ${activeClasses}`;
    };

    const filterCards = (targetCiudad, searchTerm = "") => {
      let visibleSlides = [];
      let hasVisibleCards = false;

      campusCards.forEach((card) => {
        const cardCiudad = card.dataset.ciudadCard;
        const cardNombre = card.dataset.plantelNombre || "";
        const cardDireccion = card.dataset.plantelDireccion || "";
        const parentContainer = card.closest(".splide__slide") || card;

        const matchesCiudad =
          targetCiudad === "todos" || cardCiudad === targetCiudad;
        const matchesSearch =
          !searchTerm ||
          cardNombre.includes(searchTerm.toLowerCase()) ||
          cardCiudad.toLowerCase().includes(searchTerm.toLowerCase()) ||
          cardDireccion.includes(searchTerm.toLowerCase());

        const isVisible = matchesCiudad && matchesSearch;

        parentContainer.style.display = isVisible ? "block" : "none";

        if (isVisible) {
          hasVisibleCards = true;
          if (card.closest(".splide__slide")) {
            visibleSlides.push(parentContainer);
          }
        }
      });

      // Mostrar/ocultar mensaje de "no encontrado"
      noResultsMessage.classList.toggle("hidden", hasVisibleCards);

      // Actualizar el carrusel si existe
      if (splideInstance) {
        const list = splideInstance.Components.Elements.list;
        list.innerHTML = "";
        visibleSlides.forEach((slide) => list.appendChild(slide));
        splideInstance.refresh();
      }
    };

    // 4. Funciones del autocomplete
    const highlightText = (text, searchTerm) => {
      if (!searchTerm) return text;
      const regex = new RegExp(`(${searchTerm})`, "gi");
      return text.replace(regex, '<span class="highlight-text">$1</span>');
    };

    const getSuggestions = (searchTerm) => {
      if (!searchTerm || searchTerm.length < 1) return [];

      const suggestions = [];
      const lowerSearchTerm = searchTerm.toLowerCase();

      planteles.forEach((plantel) => {
        const nombre = plantel.nombre.toLowerCase();
        const ciudad = plantel.ciudad.toLowerCase();
        const direccion = plantel.direccion.toLowerCase();

        if (
          nombre.includes(lowerSearchTerm) ||
          ciudad.includes(lowerSearchTerm) ||
          direccion.includes(lowerSearchTerm)
        ) {
          suggestions.push(plantel);
        }
      });

      return suggestions.slice(0, 5); // Máximo 5 sugerencias
    };

    const showSuggestions = (suggestions, searchTerm) => {
      if (suggestions.length === 0) {
        dropdown.classList.add("hidden");
        return;
      }

      const suggestionItems = suggestions
        .map((plantel, index) => {
          const highlightedNombre = highlightText(plantel.nombre, searchTerm);
          const highlightedCiudad = highlightText(plantel.ciudad, searchTerm);

          return `
          <div class="autocomplete-item p-6 border-b border-gray-200 last:border-b-0" data-index="${index}" data-plantel-id="${plantel.id}">
            <div class="font-medium text-gray-900">${highlightedNombre}</div>
            <div class="text-sm text-gray-600">${highlightedCiudad} • ${plantel.direccion}</div>
          </div>
        `;
        })
        .join("");

      dropdown.innerHTML = suggestionItems;
      dropdown.classList.remove("hidden");
      selectedIndex = -1;
    };

    const hideSuggestions = () => {
      dropdown.classList.add("hidden");
      selectedIndex = -1;
    };

    const selectSuggestion = (plantel) => {
      searchInput.value = plantel.nombre;
      hideSuggestions();

      // Filtrar y resaltar el plantel seleccionado
      filterCards("todos", plantel.nombre);
      highlightCard(plantel.id);

      // Mostrar el botón de limpiar
      clearButton.classList.remove("opacity-0");
    };

    // 5. Event listeners del autocomplete
    searchInput.addEventListener("input", (e) => {
      const searchTerm = e.target.value.trim();

      if (searchTerm.length === 0) {
        hideSuggestions();
        clearButton.classList.add("opacity-0");
        filterCards("todos");
        return;
      }

      clearButton.classList.remove("opacity-0");

      const suggestions = getSuggestions(searchTerm);
      showSuggestions(suggestions, searchTerm);

      // Filtrar tarjetas en tiempo real
      const currentTab =
        document.querySelector("[data-ciudad-tab].bg-blue-600")?.dataset
          .ciudadTab || "todos";
      filterCards(currentTab, searchTerm);
    });

    searchInput.addEventListener("keydown", (e) => {
      const items = dropdown.querySelectorAll(".autocomplete-item");

      switch (e.key) {
        case "ArrowDown":
          e.preventDefault();
          selectedIndex = Math.min(selectedIndex + 1, items.length - 1);
          updateSelection(items);
          break;

        case "ArrowUp":
          e.preventDefault();
          selectedIndex = Math.max(selectedIndex - 1, -1);
          updateSelection(items);
          break;

        case "Enter":
          e.preventDefault();
          if (selectedIndex >= 0 && items[selectedIndex]) {
            const plantelId = items[selectedIndex].dataset.plantelId;
            const plantel = planteles.find((p) => p.id === plantelId);
            if (plantel) selectSuggestion(plantel);
          }
          break;

        case "Escape":
          hideSuggestions();
          searchInput.blur();
          break;
      }
    });

    const updateSelection = (items) => {
      items.forEach((item, index) => {
        item.classList.toggle("selected", index === selectedIndex);
      });
    };

    // Click en sugerencias
    dropdown.addEventListener("click", (e) => {
      const item = e.target.closest(".autocomplete-item");
      if (item) {
        const plantelId = item.dataset.plantelId;
        const plantel = planteles.find((p) => p.id === plantelId);
        if (plantel) selectSuggestion(plantel);
      }
    });

    // Botón de limpiar
    clearButton.addEventListener("click", () => {
      searchInput.value = "";
      clearButton.classList.add("opacity-0");
      hideSuggestions();
      filterCards("todos");
      searchInput.focus();
    });

    // Cerrar dropdown al hacer click fuera
    document.addEventListener("click", (e) => {
      if (!searchInput.contains(e.target) && !dropdown.contains(e.target)) {
        hideSuggestions();
      }
    });

    // 6. Lógica del filtro de ciudades
    filterButtons.forEach((button) => {
      button.addEventListener("click", () => {
        const targetCiudad = button.dataset.ciudadTab;
        setActiveTab(button);
        const searchTerm = searchInput.value.trim();
        filterCards(targetCiudad, searchTerm);
      });
    });

    // 7. Función para resaltar tarjetas
    const highlightCard = (plantelId) => {
      // Remover resaltado previo
      document
        .querySelectorAll(".highlight-card")
        .forEach((c) => c.classList.remove("highlight-card"));

      const cardToHighlight = document.querySelector(
        `.campus-card[data-plantel-id="${plantelId}"]`
      );
      if (cardToHighlight) {
        // Mostrar la tarjeta si está oculta por un filtro
        const ciudad = cardToHighlight.dataset.ciudadCard;
        const tabButton = document.querySelector(
          `[data-ciudad-tab="${ciudad}"]`
        );
        if (tabButton) {
          setActiveTab(tabButton);
        }

        // Mover a la vista y resaltar
        cardToHighlight.scrollIntoView({ behavior: "smooth", block: "center" });
        cardToHighlight.classList.add("highlight-card");

        if (splideInstance && window.innerWidth < 768) {
          const slideIndex = Array.from(
            cardToHighlight.closest(".splide__list").children
          ).indexOf(cardToHighlight.closest(".splide__slide"));
          if (slideIndex > -1) {
            splideInstance.go(slideIndex);
          }
        }

        setTimeout(
          () => cardToHighlight.classList.remove("highlight-card"),
          3000
        );
      }
    };

    // 8. Lógica para "Mostrar el más cercano"
    const findNearestBtn = document.getElementById("find-nearest-btn");
    const resultParagraph = document.getElementById("nearest-campus-result");

    if (findNearestBtn && resultParagraph) {
      const haversineDistance = (coords1, coords2) => {
        const toRad = (x) => (x * Math.PI) / 180;
        const R = 6371; // Radio de la Tierra en km
        const dLat = toRad(coords2.lat - coords1.lat);
        const dLon = toRad(coords2.lon - coords1.lon);
        const a =
          Math.sin(dLat / 2) * Math.sin(dLat / 2) +
          Math.cos(toRad(coords1.lat)) *
            Math.cos(toRad(coords2.lat)) *
            Math.sin(dLon / 2) *
            Math.sin(dLon / 2);
        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
        return R * c;
      };

      findNearestBtn.addEventListener("click", () => {
        resultParagraph.textContent = "Buscando tu ubicación...";
        resultParagraph.style.color = "#374151";

        if (!navigator.geolocation) {
          resultParagraph.textContent =
            "La geolocalización no es soportada por tu navegador.";
          resultParagraph.style.color = "#dc2626";
          return;
        }

        const geoOptions = {
          enableHighAccuracy: true,
          timeout: 10000,
          maximumAge: 0,
        };

        const successCallback = (position) => {
          const userCoords = {
            lat: position.coords.latitude,
            lon: position.coords.longitude,
          };

          let nearestCampus = planteles.reduce(
            (nearest, plantel) => {
              const distance = haversineDistance(userCoords, {
                lat: plantel.lat,
                lon: plantel.lon,
              });
              if (distance < nearest.minDistance) {
                return { minDistance: distance, plantel };
              }
              return nearest;
            },
            { minDistance: Infinity, plantel: null }
          );

          if (nearestCampus.plantel) {
            resultParagraph.innerHTML = `📍 El plantel más cercano es <strong>${nearestCampus.plantel.nombre}</strong> (a ${nearestCampus.minDistance.toFixed(1)} km aproximadamente).`;
            resultParagraph.style.color = "#10b981";
            highlightCard(nearestCampus.plantel.id);
          } else {
            resultParagraph.textContent =
              "No se encontraron planteles para calcular la distancia.";
            resultParagraph.style.color = "#dc2626";
          }
        };

        const errorCallback = (error) => {
          let message = "No se pudo obtener tu ubicación. ";
          console.error("Error de Geolocalización:", error);

          switch (error.code) {
            case error.PERMISSION_DENIED:
              message +=
                "Permiso denegado. Por favor, permite el acceso a tu ubicación en los ajustes de tu navegador.";
              break;
            case error.POSITION_UNAVAILABLE:
              message +=
                "La información de ubicación no está disponible. Puede que no tengas señal GPS o estés en un lugar sin buena cobertura de red.";
              break;
            case error.TIMEOUT:
              message +=
                "La solicitud de ubicación tardó demasiado en responder. Inténtalo de nuevo en un lugar con mejor señal.";
              break;
            default:
              message += `Ocurrió un error desconocido (Código: ${error.code}).`;
              break;
          }
          resultParagraph.textContent = message;
          resultParagraph.style.color = "#dc2626";
        };

        navigator.geolocation.getCurrentPosition(
          successCallback,
          errorCallback,
          geoOptions
        );
      });
    }
  }

  // Ejecutar el script una vez el DOM esté listo
  document.addEventListener("DOMContentLoaded", initCampusFinder);
</script>

<script is:inline define:vars={{ planteles, placeholder }}>
  // Hacer las variables disponibles globalmente para el script principal
  window.plantelesData = planteles;
  window.soloUnPlantel = false; // Ya que no existe en el frontmatter, usamos false
  window.placeholderText = placeholder;
</script>

<script>
  // JavaScript que se ejecuta en el cliente
  document.addEventListener("DOMContentLoaded", function () {
    // Elementos del DOM
    const searchInput = document.getElementById("campus-search-input");
    const clearBtn = document.getElementById("clear-search-btn");
    const noResultsMessage = document.getElementById("no-results-message");
    const cityTabs = document.querySelectorAll(".ciudad-tab");
    const campusCards = document.querySelectorAll(".campus-card");
    const findNearestBtn = document.getElementById("find-nearest-btn");
    const nearestResult = document.getElementById("nearest-campus-result");

    // Funcionalidad de búsqueda
    if (searchInput) {
      searchInput.addEventListener("input", function (e) {
        const searchTerm = e.target.value.toLowerCase().trim();

        if (searchTerm.length > 0) {
          clearBtn.style.opacity = "1";
          filterCampuses(searchTerm);
        } else {
          clearBtn.style.opacity = "0";
          showAllCampuses();
        }
      });
    }

    // Botón de limpiar búsqueda
    if (clearBtn) {
      clearBtn.addEventListener("click", function () {
        searchInput.value = "";
        clearBtn.style.opacity = "0";
        showAllCampuses();
        // Resetear filtro de ciudad a "todos"
        cityTabs.forEach((tab) => tab.classList.remove("active"));
        document.querySelector('[data-ciudad="todos"]').classList.add("active");
      });
    }

    // Filtros por ciudad
    cityTabs.forEach((tab) => {
      tab.addEventListener("click", function () {
        // Remover clase active de todos los tabs
        cityTabs.forEach((t) => t.classList.remove("active"));
        this.classList.add("active");

        const ciudad = this.dataset.ciudad;
        filterByCiudad(ciudad);

        // Limpiar búsqueda cuando se selecciona una ciudad
        if (searchInput) {
          searchInput.value = "";
          clearBtn.style.opacity = "0";
        }
      });
    });

    // Función para filtrar campus por búsqueda
    function filterCampuses(searchTerm) {
      let hasResults = false;

      campusCards.forEach((card) => {
        const nombre = card.dataset.nombre;
        const direccion = card.dataset.direccion;
        const ciudad = card.dataset.ciudad?.toLowerCase();

        if (
          nombre.includes(searchTerm) ||
          direccion.includes(searchTerm) ||
          ciudad.includes(searchTerm)
        ) {
          card.style.display = "block";
          hasResults = true;
        } else {
          card.style.display = "none";
        }
      });

      if (!hasResults) {
        noResultsMessage.classList.remove("hidden");
      } else {
        noResultsMessage.classList.add("hidden");
      }
    }

    // Función para mostrar todos los campus
    function showAllCampuses() {
      campusCards.forEach((card) => {
        card.style.display = "block";
      });
      noResultsMessage.classList.add("hidden");
    }

    // Función para filtrar por ciudad
    function filterByCiudad(ciudad) {
      if (ciudad === "todos") {
        showAllCampuses();
        return;
      }

      let hasResults = false;
      campusCards.forEach((card) => {
        if (card.dataset.ciudad === ciudad) {
          card.style.display = "block";
          hasResults = true;
        } else {
          card.style.display = "none";
        }
      });

      if (!hasResults) {
        noResultsMessage.classList.remove("hidden");
      } else {
        noResultsMessage.classList.add("hidden");
      }
    }

    // Funcionalidad para encontrar el más cercano
    if (findNearestBtn) {
      findNearestBtn.addEventListener("click", function () {
        if (navigator.geolocation) {
          nearestResult.textContent = "Obteniendo tu ubicación...";

          navigator.geolocation.getCurrentPosition(
            function (position) {
              const userLat = position.coords.latitude;
              const userLon = position.coords.longitude;

              let nearestCampus = null;
              let minDistance = Infinity;

              campusCards.forEach((card) => {
                const lat = parseFloat(card.dataset.lat);
                const lon = parseFloat(card.dataset.lon);
                const distance = calculateDistance(userLat, userLon, lat, lon);

                if (distance < minDistance) {
                  minDistance = distance;
                  nearestCampus = {
                    nombre: card.querySelector("h3").textContent,
                    distancia: distance.toFixed(1),
                  };
                }
              });

              if (nearestCampus) {
                nearestResult.textContent = `Tu plantel más cercano es ${nearestCampus.nombre} (${nearestCampus.distancia} km)`;
              }
            },
            function (error) {
              nearestResult.textContent = "No se pudo obtener tu ubicación";
            }
          );
        } else {
          nearestResult.textContent = "Tu navegador no soporta geolocalización";
        }
      });
    }

    // Función para calcular distancia entre dos puntos
    function calculateDistance(lat1, lon1, lat2, lon2) {
      const R = 6371; // Radio de la Tierra en km
      const dLat = ((lat2 - lat1) * Math.PI) / 180;
      const dLon = ((lon2 - lon1) * Math.PI) / 180;
      const a =
        Math.sin(dLat / 2) * Math.sin(dLat / 2) +
        Math.cos((lat1 * Math.PI) / 180) *
          Math.cos((lat2 * Math.PI) / 180) *
          Math.sin(dLon / 2) *
          Math.sin(dLon / 2);
      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
      return R * c;
    }
  });
</script>


<style>
  

  .highlight-card {
    box-shadow: 0 0 20px rgba(59, 130, 246, 0.5);
    transform: scale(1.02);
  }
  
  .highlight-text {
    background-color: #fef3c7;
    font-weight: 600;
  }
  
  .autocomplete-item.selected {
    background-color: #f3f4f6;
  }
  
  .autocomplete-item:hover {
    background-color: #f9fafb;
    cursor: pointer;
  }
</style>